
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c10c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f8  0800c2e0  0800c2e0  0000d2e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c7d8  0800c7d8  0000e1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c7d8  0800c7d8  0000d7d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c7e0  0800c7e0  0000e1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c7e0  0800c7e0  0000d7e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c7e4  0800c7e4  0000d7e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800c7e8  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001f2e8  200001d4  0800c9bc  0000e1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001f4bc  0800c9bc  0000e4bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018881  00000000  00000000  0000e204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035ef  00000000  00000000  00026a85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014d8  00000000  00000000  0002a078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000105a  00000000  00000000  0002b550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024d49  00000000  00000000  0002c5aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c5ec  00000000  00000000  000512f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7aeb  00000000  00000000  0006d8df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001453ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b34  00000000  00000000  00145410  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000090  00000000  00000000  0014bf44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c2c4 	.word	0x0800c2c4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	0800c2c4 	.word	0x0800c2c4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bfc:	f000 b96a 	b.w	8000ed4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <calculateCenter>:

//this function takes in an array of pixels from the camera and finds the center of the ball. It will place
//the current coordinates of the center of the ball into global variables BALL_CURRENT_X and BALL_CURRENT_Y
//the coordinates themselves are in terms of PIXELS. It will let you know which PIXEL is the center.
void calculateCenter(uint8_t* buffer, int IMAGE_ROWS, int IMAGE_COLS, int THRESHOLD)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b08b      	sub	sp, #44	@ 0x2c
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	60f8      	str	r0, [r7, #12]
 8000ee0:	60b9      	str	r1, [r7, #8]
 8000ee2:	607a      	str	r2, [r7, #4]
 8000ee4:	603b      	str	r3, [r7, #0]
    int count = 0;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	627b      	str	r3, [r7, #36]	@ 0x24
    float ballX = 0;
 8000eea:	f04f 0300 	mov.w	r3, #0
 8000eee:	623b      	str	r3, [r7, #32]
    float ballY = 0;
 8000ef0:	f04f 0300 	mov.w	r3, #0
 8000ef4:	61fb      	str	r3, [r7, #28]
    //Find centroid

        // Iterate through the 1D array and calculate centroid
    for (int i = 0; i < IMAGE_ROWS * IMAGE_COLS; i++) {
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61bb      	str	r3, [r7, #24]
 8000efa:	e031      	b.n	8000f60 <calculateCenter+0x88>
        int row = i / IMAGE_COLS;  // Calculate row index
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f04:	617b      	str	r3, [r7, #20]
        int col = i % IMAGE_COLS;  // Calculate column index
 8000f06:	69bb      	ldr	r3, [r7, #24]
 8000f08:	687a      	ldr	r2, [r7, #4]
 8000f0a:	fb93 f2f2 	sdiv	r2, r3, r2
 8000f0e:	6879      	ldr	r1, [r7, #4]
 8000f10:	fb01 f202 	mul.w	r2, r1, r2
 8000f14:	1a9b      	subs	r3, r3, r2
 8000f16:	613b      	str	r3, [r7, #16]

        if (buffer[i] < THRESHOLD) {  // Check if pixel meets the threshold
 8000f18:	69bb      	ldr	r3, [r7, #24]
 8000f1a:	68fa      	ldr	r2, [r7, #12]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	461a      	mov	r2, r3
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	4293      	cmp	r3, r2
 8000f26:	dd18      	ble.n	8000f5a <calculateCenter+0x82>
            ballX += col;  // Accumulate x-coordinate
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	ee07 3a90 	vmov	s15, r3
 8000f2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f32:	ed97 7a08 	vldr	s14, [r7, #32]
 8000f36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f3a:	edc7 7a08 	vstr	s15, [r7, #32]
            ballY += row;  // Accumulate y-coordinate
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	ee07 3a90 	vmov	s15, r3
 8000f44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f48:	ed97 7a07 	vldr	s14, [r7, #28]
 8000f4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f50:	edc7 7a07 	vstr	s15, [r7, #28]
            count++;        // Increment pixel count
 8000f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f56:	3301      	adds	r3, #1
 8000f58:	627b      	str	r3, [r7, #36]	@ 0x24
    for (int i = 0; i < IMAGE_ROWS * IMAGE_COLS; i++) {
 8000f5a:	69bb      	ldr	r3, [r7, #24]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	61bb      	str	r3, [r7, #24]
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	687a      	ldr	r2, [r7, #4]
 8000f64:	fb02 f303 	mul.w	r3, r2, r3
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	429a      	cmp	r2, r3
 8000f6c:	dbc6      	blt.n	8000efc <calculateCenter+0x24>

        }
    }

    //ball is not detected in frame, set the X and Y coords back to the middle
    if(count == 0)
 8000f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d106      	bne.n	8000f82 <calculateCenter+0xaa>
    {

        BALL_NEW_X = 0;
 8000f74:	4b15      	ldr	r3, [pc, #84]	@ (8000fcc <calculateCenter+0xf4>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
        BALL_NEW_Y = 0;
 8000f7a:	4b15      	ldr	r3, [pc, #84]	@ (8000fd0 <calculateCenter+0xf8>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
    //	char msg[100];

    //	sprintf(msg, "Old CurrX%d\n\r", BALL_CURRENT_X);
    //	print_msg(msg);

}
 8000f80:	e01d      	b.n	8000fbe <calculateCenter+0xe6>
        BALL_NEW_X = ballX / count;
 8000f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f84:	ee07 3a90 	vmov	s15, r3
 8000f88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f8c:	edd7 6a08 	vldr	s13, [r7, #32]
 8000f90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f98:	ee17 2a90 	vmov	r2, s15
 8000f9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000fcc <calculateCenter+0xf4>)
 8000f9e:	601a      	str	r2, [r3, #0]
        BALL_NEW_Y = ballY / count;
 8000fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fa2:	ee07 3a90 	vmov	s15, r3
 8000fa6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000faa:	edd7 6a07 	vldr	s13, [r7, #28]
 8000fae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fb6:	ee17 2a90 	vmov	r2, s15
 8000fba:	4b05      	ldr	r3, [pc, #20]	@ (8000fd0 <calculateCenter+0xf8>)
 8000fbc:	601a      	str	r2, [r3, #0]
}
 8000fbe:	bf00      	nop
 8000fc0:	372c      	adds	r7, #44	@ 0x2c
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	2001eba4 	.word	0x2001eba4
 8000fd0:	2001eba8 	.word	0x2001eba8

08000fd4 <calculateDxDy>:

//this function checks the global variables BALLCURRENT XY and BALLNEW XY and finds the difference between them. It will update the global variables Dx and DY
//accordingly, which will be sent as parameters to the motor code, telling the motors how fast to move.
void calculateDxDy()
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
//	char msg[100];

//	  sprintf(msg, "Old CurrX%d\n\r", BALL_CURRENT_X);
//	  print_msg(msg);
      Dx = BALL_NEW_X - BALL_CURRENT_X;
 8000fd8:	4b0d      	ldr	r3, [pc, #52]	@ (8001010 <calculateDxDy+0x3c>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	4b0d      	ldr	r3, [pc, #52]	@ (8001014 <calculateDxDy+0x40>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	4a0d      	ldr	r2, [pc, #52]	@ (8001018 <calculateDxDy+0x44>)
 8000fe4:	6013      	str	r3, [r2, #0]
      Dy = BALL_NEW_Y - BALL_CURRENT_Y;
 8000fe6:	4b0d      	ldr	r3, [pc, #52]	@ (800101c <calculateDxDy+0x48>)
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	4b0d      	ldr	r3, [pc, #52]	@ (8001020 <calculateDxDy+0x4c>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	1ad3      	subs	r3, r2, r3
 8000ff0:	4a0c      	ldr	r2, [pc, #48]	@ (8001024 <calculateDxDy+0x50>)
 8000ff2:	6013      	str	r3, [r2, #0]
    //update the current coordinates with the new coordinates
    BALL_CURRENT_X = BALL_NEW_X;
 8000ff4:	4b06      	ldr	r3, [pc, #24]	@ (8001010 <calculateDxDy+0x3c>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a06      	ldr	r2, [pc, #24]	@ (8001014 <calculateDxDy+0x40>)
 8000ffa:	6013      	str	r3, [r2, #0]
    BALL_CURRENT_Y = BALL_NEW_Y;
 8000ffc:	4b07      	ldr	r3, [pc, #28]	@ (800101c <calculateDxDy+0x48>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a07      	ldr	r2, [pc, #28]	@ (8001020 <calculateDxDy+0x4c>)
 8001002:	6013      	str	r3, [r2, #0]

//	  sprintf(msg, "New CurrX%d, Dx: %d\n\r", BALL_CURRENT_X,Dx);
//	  print_msg(msg);
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	2001eba4 	.word	0x2001eba4
 8001014:	2001ebac 	.word	0x2001ebac
 8001018:	2001ebb4 	.word	0x2001ebb4
 800101c:	2001eba8 	.word	0x2001eba8
 8001020:	2001ebb0 	.word	0x2001ebb0
 8001024:	2001ebb8 	.word	0x2001ebb8

08001028 <print_msg>:
//DMA_HandleTypeDef hdma_usart3_tx;
//
//PCD_HandleTypeDef hpcd_USB_OTG_FS;
//
//
HAL_StatusTypeDef print_msg(char * msg) {
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
//  return HAL_UART_Transmit_DMA(&huart3, (uint8_t *)msg, strlen(msg));
	return HAL_UART_Transmit(&huart3, (uint8_t *)msg, strlen(msg), 100);
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f7ff f93d 	bl	80002b0 <strlen>
 8001036:	4603      	mov	r3, r0
 8001038:	b29a      	uxth	r2, r3
 800103a:	2364      	movs	r3, #100	@ 0x64
 800103c:	6879      	ldr	r1, [r7, #4]
 800103e:	4804      	ldr	r0, [pc, #16]	@ (8001050 <print_msg+0x28>)
 8001040:	f006 ff49 	bl	8007ed6 <HAL_UART_Transmit>
 8001044:	4603      	mov	r3, r0

}
 8001046:	4618      	mov	r0, r3
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	200001f0 	.word	0x200001f0

08001054 <receive_msg>:

HAL_StatusTypeDef receive_msg(char * msg) {
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
//  return HAL_UART_Transmit_DMA(&huart3, (uint8_t *)msg, strlen(msg));
	return HAL_UART_Receive(&huart3, (uint8_t *)msg, strlen(msg), 100);
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f7ff f927 	bl	80002b0 <strlen>
 8001062:	4603      	mov	r3, r0
 8001064:	b29a      	uxth	r2, r3
 8001066:	2364      	movs	r3, #100	@ 0x64
 8001068:	6879      	ldr	r1, [r7, #4]
 800106a:	4804      	ldr	r0, [pc, #16]	@ (800107c <receive_msg+0x28>)
 800106c:	f006 ffc5 	bl	8007ffa <HAL_UART_Receive>
 8001070:	4603      	mov	r3, r0

}
 8001072:	4618      	mov	r0, r3
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	200001f0 	.word	0x200001f0

08001080 <main>:




int main(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b09a      	sub	sp, #104	@ 0x68
 8001084:	af00      	add	r7, sp, #0

  HAL_Init();
 8001086:	f001 fa49 	bl	800251c <HAL_Init>
  /* Configure the system clock */
  SystemClock_Config();
 800108a:	f000 f8db 	bl	8001244 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800108e:	f000 fb51 	bl	8001734 <MX_GPIO_Init>
  MX_DMA_Init();
 8001092:	f000 fb19 	bl	80016c8 <MX_DMA_Init>
  MX_DCMI_Init();
 8001096:	f000 f941 	bl	800131c <MX_DCMI_Init>
  MX_USART3_UART_Init();
 800109a:	f000 fabd 	bl	8001618 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800109e:	f000 fae5 	bl	800166c <MX_USB_OTG_FS_PCD_Init>
  MX_I2C2_Init();
 80010a2:	f000 f96f 	bl	8001384 <MX_I2C2_Init>
  MX_TIM1_Init();
 80010a6:	f000 f99b 	bl	80013e0 <MX_TIM1_Init>
  MX_TIM6_Init();
 80010aa:	f000 fa7f 	bl	80015ac <MX_TIM6_Init>
  MX_TIM2_Init();
 80010ae:	f000 fa19 	bl	80014e4 <MX_TIM2_Init>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_X);
 80010b2:	2108      	movs	r1, #8
 80010b4:	4838      	ldr	r0, [pc, #224]	@ (8001198 <main+0x118>)
 80010b6:	f006 f8a5 	bl	8007204 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_Y);
 80010ba:	210c      	movs	r1, #12
 80010bc:	4836      	ldr	r0, [pc, #216]	@ (8001198 <main+0x118>)
 80010be:	f006 f8a1 	bl	8007204 <HAL_TIM_PWM_Start>
  //run_motor_test_sequence();
  /* USER CODE END 2 */

  char msg[100];

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80010c2:	2100      	movs	r1, #0
 80010c4:	4835      	ldr	r0, [pc, #212]	@ (800119c <main+0x11c>)
 80010c6:	f006 f89d 	bl	8007204 <HAL_TIM_PWM_Start>

  ov7670_init();
 80010ca:	f000 fd25 	bl	8001b18 <ov7670_init>
  HAL_Delay(100);
 80010ce:	2064      	movs	r0, #100	@ 0x64
 80010d0:	f001 fa96 	bl	8002600 <HAL_Delay>

  reset_motor();
 80010d4:	f000 fc42 	bl	800195c <reset_motor>

  int R;
  int theta;
  int phi;

  current_buff = snapshot_buff1;
 80010d8:	4b31      	ldr	r3, [pc, #196]	@ (80011a0 <main+0x120>)
 80010da:	4a32      	ldr	r2, [pc, #200]	@ (80011a4 <main+0x124>)
 80010dc:	601a      	str	r2, [r3, #0]
  process_buff = snapshot_buff2;
 80010de:	4b32      	ldr	r3, [pc, #200]	@ (80011a8 <main+0x128>)
 80010e0:	4a32      	ldr	r2, [pc, #200]	@ (80011ac <main+0x12c>)
 80010e2:	601a      	str	r2, [r3, #0]

  ov7670_snapshot(process_buff);
 80010e4:	4b30      	ldr	r3, [pc, #192]	@ (80011a8 <main+0x128>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f000 fdf9 	bl	8001ce0 <ov7670_snapshot>

  while(dma_flag == 0){
 80010ee:	e002      	b.n	80010f6 <main+0x76>
 //	  	  		  print_msg("Here");
 	  	  		  HAL_Delay(10);
 80010f0:	200a      	movs	r0, #10
 80010f2:	f001 fa85 	bl	8002600 <HAL_Delay>
  while(dma_flag == 0){
 80010f6:	4b2e      	ldr	r3, [pc, #184]	@ (80011b0 <main+0x130>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d0f8      	beq.n	80010f0 <main+0x70>
  };

  uint8_t firstMovement = 0;
 80010fe:	2300      	movs	r3, #0
 8001100:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_DCMI_Stop(&hdcmi);  // Stop DCMI to reconfigure DMA
 8001104:	482b      	ldr	r0, [pc, #172]	@ (80011b4 <main+0x134>)
 8001106:	f001 fc51 	bl	80029ac <HAL_DCMI_Stop>
	  ov7670_capture(current_buff);
 800110a:	4b25      	ldr	r3, [pc, #148]	@ (80011a0 <main+0x120>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4618      	mov	r0, r3
 8001110:	f000 fdf8 	bl	8001d04 <ov7670_capture>

	  print_buf(process_buff);  // Process the buffer that just finished capturing
 8001114:	4b24      	ldr	r3, [pc, #144]	@ (80011a8 <main+0x128>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4618      	mov	r0, r3
 800111a:	f000 f853 	bl	80011c4 <print_buf>

      calculateDxDy(); //Function calculates dx, dy for motor
 800111e:	f7ff ff59 	bl	8000fd4 <calculateDxDy>

//    sprintf(msg, "BallCurr x: %d, BallNewX: %d\n\r",BALL_CURRENT_X,BALL_NEW_X);
//      print_msg(msg);

	  if(firstMovement <= 10 ){
 8001122:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001126:	2b0a      	cmp	r3, #10
 8001128:	d809      	bhi.n	800113e <main+0xbe>
		  firstMovement++;
 800112a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800112e:	3301      	adds	r3, #1
 8001130:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);  // Toggle LED for debugging
 8001134:	2101      	movs	r1, #1
 8001136:	4820      	ldr	r0, [pc, #128]	@ (80011b8 <main+0x138>)
 8001138:	f003 fd97 	bl	8004c6a <HAL_GPIO_TogglePin>
 800113c:	e00f      	b.n	800115e <main+0xde>
	  }
	  else{
		 set_motor_direction(Dx/2, Dy);
 800113e:	4b1f      	ldr	r3, [pc, #124]	@ (80011bc <main+0x13c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	0fda      	lsrs	r2, r3, #31
 8001144:	4413      	add	r3, r2
 8001146:	105b      	asrs	r3, r3, #1
 8001148:	461a      	mov	r2, r3
 800114a:	4b1d      	ldr	r3, [pc, #116]	@ (80011c0 <main+0x140>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4619      	mov	r1, r3
 8001150:	4610      	mov	r0, r2
 8001152:	f000 fc6b 	bl	8001a2c <set_motor_direction>
	  }


	  while(dma_flag == 0){
 8001156:	e002      	b.n	800115e <main+0xde>
  //	  	  		  print_msg("Here");
		  HAL_Delay(10);
 8001158:	200a      	movs	r0, #10
 800115a:	f001 fa51 	bl	8002600 <HAL_Delay>
	  while(dma_flag == 0){
 800115e:	4b14      	ldr	r3, [pc, #80]	@ (80011b0 <main+0x130>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d0f8      	beq.n	8001158 <main+0xd8>
	  };

	  dma_flag = 0;  // Reset the DMA flag
 8001166:	4b12      	ldr	r3, [pc, #72]	@ (80011b0 <main+0x130>)
 8001168:	2200      	movs	r2, #0
 800116a:	701a      	strb	r2, [r3, #0]

	  // Swap buffers
	  if (current_buff == snapshot_buff1) {
 800116c:	4b0c      	ldr	r3, [pc, #48]	@ (80011a0 <main+0x120>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a0c      	ldr	r2, [pc, #48]	@ (80011a4 <main+0x124>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d106      	bne.n	8001184 <main+0x104>
		process_buff = snapshot_buff1;  // Buffer 1 is ready for processing
 8001176:	4b0c      	ldr	r3, [pc, #48]	@ (80011a8 <main+0x128>)
 8001178:	4a0a      	ldr	r2, [pc, #40]	@ (80011a4 <main+0x124>)
 800117a:	601a      	str	r2, [r3, #0]
		current_buff = snapshot_buff2;  // Switch to buffer 2 for the next frame
 800117c:	4b08      	ldr	r3, [pc, #32]	@ (80011a0 <main+0x120>)
 800117e:	4a0b      	ldr	r2, [pc, #44]	@ (80011ac <main+0x12c>)
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	e005      	b.n	8001190 <main+0x110>
	  } else {
		process_buff = snapshot_buff2;  // Buffer 2 is ready for processing
 8001184:	4b08      	ldr	r3, [pc, #32]	@ (80011a8 <main+0x128>)
 8001186:	4a09      	ldr	r2, [pc, #36]	@ (80011ac <main+0x12c>)
 8001188:	601a      	str	r2, [r3, #0]
		current_buff = snapshot_buff1;  // Switch to buffer 1 for the next frame
 800118a:	4b05      	ldr	r3, [pc, #20]	@ (80011a0 <main+0x120>)
 800118c:	4a05      	ldr	r2, [pc, #20]	@ (80011a4 <main+0x124>)
 800118e:	601a      	str	r2, [r3, #0]
	  }

	  HAL_Delay(200);
 8001190:	20c8      	movs	r0, #200	@ 0xc8
 8001192:	f001 fa35 	bl	8002600 <HAL_Delay>
	  HAL_DCMI_Stop(&hdcmi);  // Stop DCMI to reconfigure DMA
 8001196:	e7b5      	b.n	8001104 <main+0x84>
 8001198:	2001ed6c 	.word	0x2001ed6c
 800119c:	2001ed24 	.word	0x2001ed24
 80011a0:	200189b4 	.word	0x200189b4
 80011a4:	20000234 	.word	0x20000234
 80011a8:	200189b8 	.word	0x200189b8
 80011ac:	2000c5f4 	.word	0x2000c5f4
 80011b0:	2001eba0 	.word	0x2001eba0
 80011b4:	2001ec20 	.word	0x2001ec20
 80011b8:	40020400 	.word	0x40020400
 80011bc:	2001ebb4 	.word	0x2001ebb4
 80011c0:	2001ebb8 	.word	0x2001ebb8

080011c4 <print_buf>:
  }
}

void print_buf(uint16_t *snapshot_buff) {
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  // Create a new buffer from the snapshot_buffer than the DCMI copied the 16-bit pixel values into.
  uint8_t *buffer = (uint8_t *) snapshot_buff;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	60bb      	str	r3, [r7, #8]

  tx_buff_len = 0;
 80011d0:	4b16      	ldr	r3, [pc, #88]	@ (800122c <print_buf+0x68>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]


  for(int i = 1; i < IMG_COLS * IMG_ROWS * 2; i+= 2){
 80011d6:	2301      	movs	r3, #1
 80011d8:	60fb      	str	r3, [r7, #12]
 80011da:	e00d      	b.n	80011f8 <print_buf+0x34>
	  currentImage[tx_buff_len ++] = buffer[i];
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	68ba      	ldr	r2, [r7, #8]
 80011e0:	441a      	add	r2, r3
 80011e2:	4b12      	ldr	r3, [pc, #72]	@ (800122c <print_buf+0x68>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	1c59      	adds	r1, r3, #1
 80011e8:	4810      	ldr	r0, [pc, #64]	@ (800122c <print_buf+0x68>)
 80011ea:	6001      	str	r1, [r0, #0]
 80011ec:	7811      	ldrb	r1, [r2, #0]
 80011ee:	4a10      	ldr	r2, [pc, #64]	@ (8001230 <print_buf+0x6c>)
 80011f0:	54d1      	strb	r1, [r2, r3]
  for(int i = 1; i < IMG_COLS * IMG_ROWS * 2; i+= 2){
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	3302      	adds	r3, #2
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	f24c 32bf 	movw	r2, #50111	@ 0xc3bf
 80011fe:	4293      	cmp	r3, r2
 8001200:	ddec      	ble.n	80011dc <print_buf+0x18>
  }

  calculateCenter(currentImage, IMG_ROWS, IMG_COLS, THRESHOLD);
 8001202:	2380      	movs	r3, #128	@ 0x80
 8001204:	22ae      	movs	r2, #174	@ 0xae
 8001206:	2190      	movs	r1, #144	@ 0x90
 8001208:	4809      	ldr	r0, [pc, #36]	@ (8001230 <print_buf+0x6c>)
 800120a:	f7ff fe65 	bl	8000ed8 <calculateCenter>


  sprintf(msg, "X coord %d, Y coord %d\n\r",BALL_NEW_Y,BALL_NEW_X);
 800120e:	4b09      	ldr	r3, [pc, #36]	@ (8001234 <print_buf+0x70>)
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	4b09      	ldr	r3, [pc, #36]	@ (8001238 <print_buf+0x74>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4909      	ldr	r1, [pc, #36]	@ (800123c <print_buf+0x78>)
 8001218:	4809      	ldr	r0, [pc, #36]	@ (8001240 <print_buf+0x7c>)
 800121a:	f008 fe19 	bl	8009e50 <siprintf>
  print_msg(msg);
 800121e:	4808      	ldr	r0, [pc, #32]	@ (8001240 <print_buf+0x7c>)
 8001220:	f7ff ff02 	bl	8001028 <print_msg>
  //sprintf(msg, "X coord %f, Y coord %f\n\r",ballX,ballY);

}
 8001224:	bf00      	nop
 8001226:	3710      	adds	r7, #16
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	2001eb9c 	.word	0x2001eb9c
 8001230:	200189bc 	.word	0x200189bc
 8001234:	2001eba8 	.word	0x2001eba8
 8001238:	2001eba4 	.word	0x2001eba4
 800123c:	0800c2e0 	.word	0x0800c2e0
 8001240:	2001ebbc 	.word	0x2001ebbc

08001244 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b094      	sub	sp, #80	@ 0x50
 8001248:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800124a:	f107 031c 	add.w	r3, r7, #28
 800124e:	2234      	movs	r2, #52	@ 0x34
 8001250:	2100      	movs	r1, #0
 8001252:	4618      	mov	r0, r3
 8001254:	f008 fede 	bl	800a014 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001258:	f107 0308 	add.w	r3, r7, #8
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
 8001266:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001268:	2300      	movs	r3, #0
 800126a:	607b      	str	r3, [r7, #4]
 800126c:	4b29      	ldr	r3, [pc, #164]	@ (8001314 <SystemClock_Config+0xd0>)
 800126e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001270:	4a28      	ldr	r2, [pc, #160]	@ (8001314 <SystemClock_Config+0xd0>)
 8001272:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001276:	6413      	str	r3, [r2, #64]	@ 0x40
 8001278:	4b26      	ldr	r3, [pc, #152]	@ (8001314 <SystemClock_Config+0xd0>)
 800127a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800127c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001280:	607b      	str	r3, [r7, #4]
 8001282:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001284:	2300      	movs	r3, #0
 8001286:	603b      	str	r3, [r7, #0]
 8001288:	4b23      	ldr	r3, [pc, #140]	@ (8001318 <SystemClock_Config+0xd4>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a22      	ldr	r2, [pc, #136]	@ (8001318 <SystemClock_Config+0xd4>)
 800128e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001292:	6013      	str	r3, [r2, #0]
 8001294:	4b20      	ldr	r3, [pc, #128]	@ (8001318 <SystemClock_Config+0xd4>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800129c:	603b      	str	r3, [r7, #0]
 800129e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012a0:	2301      	movs	r3, #1
 80012a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80012a4:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80012a8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012aa:	2302      	movs	r3, #2
 80012ac:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012ae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80012b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80012b4:	2304      	movs	r3, #4
 80012b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80012b8:	23a8      	movs	r3, #168	@ 0xa8
 80012ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012bc:	2302      	movs	r3, #2
 80012be:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80012c0:	2307      	movs	r3, #7
 80012c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80012c4:	2302      	movs	r3, #2
 80012c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012c8:	f107 031c 	add.w	r3, r7, #28
 80012cc:	4618      	mov	r0, r3
 80012ce:	f005 fc5d 	bl	8006b8c <HAL_RCC_OscConfig>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80012d8:	f000 fb3a 	bl	8001950 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012dc:	230f      	movs	r3, #15
 80012de:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012e0:	2302      	movs	r3, #2
 80012e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012e4:	2300      	movs	r3, #0
 80012e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012e8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80012ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012f2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012f4:	f107 0308 	add.w	r3, r7, #8
 80012f8:	2105      	movs	r1, #5
 80012fa:	4618      	mov	r0, r3
 80012fc:	f004 fdd2 	bl	8005ea4 <HAL_RCC_ClockConfig>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001306:	f000 fb23 	bl	8001950 <Error_Handler>
  }
}
 800130a:	bf00      	nop
 800130c:	3750      	adds	r7, #80	@ 0x50
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40023800 	.word	0x40023800
 8001318:	40007000 	.word	0x40007000

0800131c <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8001320:	4b16      	ldr	r3, [pc, #88]	@ (800137c <MX_DCMI_Init+0x60>)
 8001322:	4a17      	ldr	r2, [pc, #92]	@ (8001380 <MX_DCMI_Init+0x64>)
 8001324:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8001326:	4b15      	ldr	r3, [pc, #84]	@ (800137c <MX_DCMI_Init+0x60>)
 8001328:	2200      	movs	r2, #0
 800132a:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 800132c:	4b13      	ldr	r3, [pc, #76]	@ (800137c <MX_DCMI_Init+0x60>)
 800132e:	2220      	movs	r2, #32
 8001330:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 8001332:	4b12      	ldr	r3, [pc, #72]	@ (800137c <MX_DCMI_Init+0x60>)
 8001334:	2280      	movs	r2, #128	@ 0x80
 8001336:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8001338:	4b10      	ldr	r3, [pc, #64]	@ (800137c <MX_DCMI_Init+0x60>)
 800133a:	2200      	movs	r2, #0
 800133c:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800133e:	4b0f      	ldr	r3, [pc, #60]	@ (800137c <MX_DCMI_Init+0x60>)
 8001340:	2200      	movs	r2, #0
 8001342:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8001344:	4b0d      	ldr	r3, [pc, #52]	@ (800137c <MX_DCMI_Init+0x60>)
 8001346:	2200      	movs	r2, #0
 8001348:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800134a:	4b0c      	ldr	r3, [pc, #48]	@ (800137c <MX_DCMI_Init+0x60>)
 800134c:	2200      	movs	r2, #0
 800134e:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8001350:	4b0a      	ldr	r3, [pc, #40]	@ (800137c <MX_DCMI_Init+0x60>)
 8001352:	2200      	movs	r2, #0
 8001354:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8001356:	4b09      	ldr	r3, [pc, #36]	@ (800137c <MX_DCMI_Init+0x60>)
 8001358:	2200      	movs	r2, #0
 800135a:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 800135c:	4b07      	ldr	r3, [pc, #28]	@ (800137c <MX_DCMI_Init+0x60>)
 800135e:	2200      	movs	r2, #0
 8001360:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8001362:	4b06      	ldr	r3, [pc, #24]	@ (800137c <MX_DCMI_Init+0x60>)
 8001364:	2200      	movs	r2, #0
 8001366:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8001368:	4804      	ldr	r0, [pc, #16]	@ (800137c <MX_DCMI_Init+0x60>)
 800136a:	f001 fccd 	bl	8002d08 <HAL_DCMI_Init>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8001374:	f000 faec 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8001378:	bf00      	nop
 800137a:	bd80      	pop	{r7, pc}
 800137c:	2001ec20 	.word	0x2001ec20
 8001380:	50050000 	.word	0x50050000

08001384 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001388:	4b12      	ldr	r3, [pc, #72]	@ (80013d4 <MX_I2C2_Init+0x50>)
 800138a:	4a13      	ldr	r2, [pc, #76]	@ (80013d8 <MX_I2C2_Init+0x54>)
 800138c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800138e:	4b11      	ldr	r3, [pc, #68]	@ (80013d4 <MX_I2C2_Init+0x50>)
 8001390:	4a12      	ldr	r2, [pc, #72]	@ (80013dc <MX_I2C2_Init+0x58>)
 8001392:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001394:	4b0f      	ldr	r3, [pc, #60]	@ (80013d4 <MX_I2C2_Init+0x50>)
 8001396:	2200      	movs	r2, #0
 8001398:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800139a:	4b0e      	ldr	r3, [pc, #56]	@ (80013d4 <MX_I2C2_Init+0x50>)
 800139c:	2200      	movs	r2, #0
 800139e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013a0:	4b0c      	ldr	r3, [pc, #48]	@ (80013d4 <MX_I2C2_Init+0x50>)
 80013a2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80013a6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013a8:	4b0a      	ldr	r3, [pc, #40]	@ (80013d4 <MX_I2C2_Init+0x50>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80013ae:	4b09      	ldr	r3, [pc, #36]	@ (80013d4 <MX_I2C2_Init+0x50>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013b4:	4b07      	ldr	r3, [pc, #28]	@ (80013d4 <MX_I2C2_Init+0x50>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013ba:	4b06      	ldr	r3, [pc, #24]	@ (80013d4 <MX_I2C2_Init+0x50>)
 80013bc:	2200      	movs	r2, #0
 80013be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80013c0:	4804      	ldr	r0, [pc, #16]	@ (80013d4 <MX_I2C2_Init+0x50>)
 80013c2:	f003 fc91 	bl	8004ce8 <HAL_I2C_Init>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80013cc:	f000 fac0 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80013d0:	bf00      	nop
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	2001ecd0 	.word	0x2001ecd0
 80013d8:	40005800 	.word	0x40005800
 80013dc:	000186a0 	.word	0x000186a0

080013e0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b092      	sub	sp, #72	@ 0x48
 80013e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013e6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80013ea:	2200      	movs	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	60da      	str	r2, [r3, #12]
 80013fe:	611a      	str	r2, [r3, #16]
 8001400:	615a      	str	r2, [r3, #20]
 8001402:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001404:	1d3b      	adds	r3, r7, #4
 8001406:	2220      	movs	r2, #32
 8001408:	2100      	movs	r1, #0
 800140a:	4618      	mov	r0, r3
 800140c:	f008 fe02 	bl	800a014 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001410:	4b32      	ldr	r3, [pc, #200]	@ (80014dc <MX_TIM1_Init+0xfc>)
 8001412:	4a33      	ldr	r2, [pc, #204]	@ (80014e0 <MX_TIM1_Init+0x100>)
 8001414:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001416:	4b31      	ldr	r3, [pc, #196]	@ (80014dc <MX_TIM1_Init+0xfc>)
 8001418:	2200      	movs	r2, #0
 800141a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800141c:	4b2f      	ldr	r3, [pc, #188]	@ (80014dc <MX_TIM1_Init+0xfc>)
 800141e:	2200      	movs	r2, #0
 8001420:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20;
 8001422:	4b2e      	ldr	r3, [pc, #184]	@ (80014dc <MX_TIM1_Init+0xfc>)
 8001424:	2214      	movs	r2, #20
 8001426:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001428:	4b2c      	ldr	r3, [pc, #176]	@ (80014dc <MX_TIM1_Init+0xfc>)
 800142a:	2200      	movs	r2, #0
 800142c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800142e:	4b2b      	ldr	r3, [pc, #172]	@ (80014dc <MX_TIM1_Init+0xfc>)
 8001430:	2200      	movs	r2, #0
 8001432:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001434:	4b29      	ldr	r3, [pc, #164]	@ (80014dc <MX_TIM1_Init+0xfc>)
 8001436:	2280      	movs	r2, #128	@ 0x80
 8001438:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800143a:	4828      	ldr	r0, [pc, #160]	@ (80014dc <MX_TIM1_Init+0xfc>)
 800143c:	f005 fe93 	bl	8007166 <HAL_TIM_PWM_Init>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8001446:	f000 fa83 	bl	8001950 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800144a:	2300      	movs	r3, #0
 800144c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800144e:	2300      	movs	r3, #0
 8001450:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001452:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001456:	4619      	mov	r1, r3
 8001458:	4820      	ldr	r0, [pc, #128]	@ (80014dc <MX_TIM1_Init+0xfc>)
 800145a:	f006 fc0d 	bl	8007c78 <HAL_TIMEx_MasterConfigSynchronization>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8001464:	f000 fa74 	bl	8001950 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001468:	2360      	movs	r3, #96	@ 0x60
 800146a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 10;
 800146c:	230a      	movs	r3, #10
 800146e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001470:	2300      	movs	r3, #0
 8001472:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001474:	2300      	movs	r3, #0
 8001476:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001478:	2300      	movs	r3, #0
 800147a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800147c:	2300      	movs	r3, #0
 800147e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001480:	2300      	movs	r3, #0
 8001482:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001484:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001488:	2200      	movs	r2, #0
 800148a:	4619      	mov	r1, r3
 800148c:	4813      	ldr	r0, [pc, #76]	@ (80014dc <MX_TIM1_Init+0xfc>)
 800148e:	f006 f889 	bl	80075a4 <HAL_TIM_PWM_ConfigChannel>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8001498:	f000 fa5a 	bl	8001950 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800149c:	2300      	movs	r3, #0
 800149e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014a0:	2300      	movs	r3, #0
 80014a2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014a4:	2300      	movs	r3, #0
 80014a6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014a8:	2300      	movs	r3, #0
 80014aa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014ac:	2300      	movs	r3, #0
 80014ae:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014b4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014b6:	2300      	movs	r3, #0
 80014b8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014ba:	1d3b      	adds	r3, r7, #4
 80014bc:	4619      	mov	r1, r3
 80014be:	4807      	ldr	r0, [pc, #28]	@ (80014dc <MX_TIM1_Init+0xfc>)
 80014c0:	f006 fc56 	bl	8007d70 <HAL_TIMEx_ConfigBreakDeadTime>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 80014ca:	f000 fa41 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80014ce:	4803      	ldr	r0, [pc, #12]	@ (80014dc <MX_TIM1_Init+0xfc>)
 80014d0:	f000 fe0a 	bl	80020e8 <HAL_TIM_MspPostInit>

}
 80014d4:	bf00      	nop
 80014d6:	3748      	adds	r7, #72	@ 0x48
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	2001ed24 	.word	0x2001ed24
 80014e0:	40010000 	.word	0x40010000

080014e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b08a      	sub	sp, #40	@ 0x28
 80014e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014ea:	f107 0320 	add.w	r3, r7, #32
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014f4:	1d3b      	adds	r3, r7, #4
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	605a      	str	r2, [r3, #4]
 80014fc:	609a      	str	r2, [r3, #8]
 80014fe:	60da      	str	r2, [r3, #12]
 8001500:	611a      	str	r2, [r3, #16]
 8001502:	615a      	str	r2, [r3, #20]
 8001504:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001506:	4b28      	ldr	r3, [pc, #160]	@ (80015a8 <MX_TIM2_Init+0xc4>)
 8001508:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800150c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3;
 800150e:	4b26      	ldr	r3, [pc, #152]	@ (80015a8 <MX_TIM2_Init+0xc4>)
 8001510:	2203      	movs	r2, #3
 8001512:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001514:	4b24      	ldr	r3, [pc, #144]	@ (80015a8 <MX_TIM2_Init+0xc4>)
 8001516:	2200      	movs	r2, #0
 8001518:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 800151a:	4b23      	ldr	r3, [pc, #140]	@ (80015a8 <MX_TIM2_Init+0xc4>)
 800151c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001520:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001522:	4b21      	ldr	r3, [pc, #132]	@ (80015a8 <MX_TIM2_Init+0xc4>)
 8001524:	2200      	movs	r2, #0
 8001526:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001528:	4b1f      	ldr	r3, [pc, #124]	@ (80015a8 <MX_TIM2_Init+0xc4>)
 800152a:	2200      	movs	r2, #0
 800152c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800152e:	481e      	ldr	r0, [pc, #120]	@ (80015a8 <MX_TIM2_Init+0xc4>)
 8001530:	f005 fe19 	bl	8007166 <HAL_TIM_PWM_Init>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800153a:	f000 fa09 	bl	8001950 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800153e:	2300      	movs	r3, #0
 8001540:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001542:	2300      	movs	r3, #0
 8001544:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001546:	f107 0320 	add.w	r3, r7, #32
 800154a:	4619      	mov	r1, r3
 800154c:	4816      	ldr	r0, [pc, #88]	@ (80015a8 <MX_TIM2_Init+0xc4>)
 800154e:	f006 fb93 	bl	8007c78 <HAL_TIMEx_MasterConfigSynchronization>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001558:	f000 f9fa 	bl	8001950 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800155c:	2360      	movs	r3, #96	@ 0x60
 800155e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001560:	2300      	movs	r3, #0
 8001562:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001564:	2300      	movs	r3, #0
 8001566:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001568:	2300      	movs	r3, #0
 800156a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800156c:	1d3b      	adds	r3, r7, #4
 800156e:	2208      	movs	r2, #8
 8001570:	4619      	mov	r1, r3
 8001572:	480d      	ldr	r0, [pc, #52]	@ (80015a8 <MX_TIM2_Init+0xc4>)
 8001574:	f006 f816 	bl	80075a4 <HAL_TIM_PWM_ConfigChannel>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800157e:	f000 f9e7 	bl	8001950 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001582:	1d3b      	adds	r3, r7, #4
 8001584:	220c      	movs	r2, #12
 8001586:	4619      	mov	r1, r3
 8001588:	4807      	ldr	r0, [pc, #28]	@ (80015a8 <MX_TIM2_Init+0xc4>)
 800158a:	f006 f80b 	bl	80075a4 <HAL_TIM_PWM_ConfigChannel>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001594:	f000 f9dc 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001598:	4803      	ldr	r0, [pc, #12]	@ (80015a8 <MX_TIM2_Init+0xc4>)
 800159a:	f000 fda5 	bl	80020e8 <HAL_TIM_MspPostInit>

}
 800159e:	bf00      	nop
 80015a0:	3728      	adds	r7, #40	@ 0x28
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	2001ed6c 	.word	0x2001ed6c

080015ac <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015b2:	463b      	mov	r3, r7
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80015ba:	4b15      	ldr	r3, [pc, #84]	@ (8001610 <MX_TIM6_Init+0x64>)
 80015bc:	4a15      	ldr	r2, [pc, #84]	@ (8001614 <MX_TIM6_Init+0x68>)
 80015be:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80015c0:	4b13      	ldr	r3, [pc, #76]	@ (8001610 <MX_TIM6_Init+0x64>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015c6:	4b12      	ldr	r3, [pc, #72]	@ (8001610 <MX_TIM6_Init+0x64>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80015cc:	4b10      	ldr	r3, [pc, #64]	@ (8001610 <MX_TIM6_Init+0x64>)
 80015ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015d2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001610 <MX_TIM6_Init+0x64>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80015da:	480d      	ldr	r0, [pc, #52]	@ (8001610 <MX_TIM6_Init+0x64>)
 80015dc:	f005 fd74 	bl	80070c8 <HAL_TIM_Base_Init>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80015e6:	f000 f9b3 	bl	8001950 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ea:	2300      	movs	r3, #0
 80015ec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ee:	2300      	movs	r3, #0
 80015f0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80015f2:	463b      	mov	r3, r7
 80015f4:	4619      	mov	r1, r3
 80015f6:	4806      	ldr	r0, [pc, #24]	@ (8001610 <MX_TIM6_Init+0x64>)
 80015f8:	f006 fb3e 	bl	8007c78 <HAL_TIMEx_MasterConfigSynchronization>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001602:	f000 f9a5 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001606:	bf00      	nop
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	2001edb4 	.word	0x2001edb4
 8001614:	40001000 	.word	0x40001000

08001618 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800161c:	4b11      	ldr	r3, [pc, #68]	@ (8001664 <MX_USART3_UART_Init+0x4c>)
 800161e:	4a12      	ldr	r2, [pc, #72]	@ (8001668 <MX_USART3_UART_Init+0x50>)
 8001620:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001622:	4b10      	ldr	r3, [pc, #64]	@ (8001664 <MX_USART3_UART_Init+0x4c>)
 8001624:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001628:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800162a:	4b0e      	ldr	r3, [pc, #56]	@ (8001664 <MX_USART3_UART_Init+0x4c>)
 800162c:	2200      	movs	r2, #0
 800162e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001630:	4b0c      	ldr	r3, [pc, #48]	@ (8001664 <MX_USART3_UART_Init+0x4c>)
 8001632:	2200      	movs	r2, #0
 8001634:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001636:	4b0b      	ldr	r3, [pc, #44]	@ (8001664 <MX_USART3_UART_Init+0x4c>)
 8001638:	2200      	movs	r2, #0
 800163a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800163c:	4b09      	ldr	r3, [pc, #36]	@ (8001664 <MX_USART3_UART_Init+0x4c>)
 800163e:	220c      	movs	r2, #12
 8001640:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001642:	4b08      	ldr	r3, [pc, #32]	@ (8001664 <MX_USART3_UART_Init+0x4c>)
 8001644:	2200      	movs	r2, #0
 8001646:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001648:	4b06      	ldr	r3, [pc, #24]	@ (8001664 <MX_USART3_UART_Init+0x4c>)
 800164a:	2200      	movs	r2, #0
 800164c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800164e:	4805      	ldr	r0, [pc, #20]	@ (8001664 <MX_USART3_UART_Init+0x4c>)
 8001650:	f006 fbf4 	bl	8007e3c <HAL_UART_Init>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800165a:	f000 f979 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	200001f0 	.word	0x200001f0
 8001668:	40004800 	.word	0x40004800

0800166c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001670:	4b14      	ldr	r3, [pc, #80]	@ (80016c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001672:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001676:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001678:	4b12      	ldr	r3, [pc, #72]	@ (80016c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800167a:	2206      	movs	r2, #6
 800167c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800167e:	4b11      	ldr	r3, [pc, #68]	@ (80016c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001680:	2202      	movs	r2, #2
 8001682:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001684:	4b0f      	ldr	r3, [pc, #60]	@ (80016c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001686:	2200      	movs	r2, #0
 8001688:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800168a:	4b0e      	ldr	r3, [pc, #56]	@ (80016c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800168c:	2202      	movs	r2, #2
 800168e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001690:	4b0c      	ldr	r3, [pc, #48]	@ (80016c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001692:	2201      	movs	r2, #1
 8001694:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001696:	4b0b      	ldr	r3, [pc, #44]	@ (80016c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001698:	2200      	movs	r2, #0
 800169a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800169c:	4b09      	ldr	r3, [pc, #36]	@ (80016c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800169e:	2200      	movs	r2, #0
 80016a0:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80016a2:	4b08      	ldr	r3, [pc, #32]	@ (80016c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016a4:	2201      	movs	r2, #1
 80016a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80016a8:	4b06      	ldr	r3, [pc, #24]	@ (80016c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80016ae:	4805      	ldr	r0, [pc, #20]	@ (80016c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016b0:	f004 faaf 	bl	8005c12 <HAL_PCD_Init>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80016ba:	f000 f949 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	2001ee5c 	.word	0x2001ee5c

080016c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	607b      	str	r3, [r7, #4]
 80016d2:	4b17      	ldr	r3, [pc, #92]	@ (8001730 <MX_DMA_Init+0x68>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d6:	4a16      	ldr	r2, [pc, #88]	@ (8001730 <MX_DMA_Init+0x68>)
 80016d8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80016dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80016de:	4b14      	ldr	r3, [pc, #80]	@ (8001730 <MX_DMA_Init+0x68>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016e6:	607b      	str	r3, [r7, #4]
 80016e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	603b      	str	r3, [r7, #0]
 80016ee:	4b10      	ldr	r3, [pc, #64]	@ (8001730 <MX_DMA_Init+0x68>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f2:	4a0f      	ldr	r2, [pc, #60]	@ (8001730 <MX_DMA_Init+0x68>)
 80016f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001730 <MX_DMA_Init+0x68>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001702:	603b      	str	r3, [r7, #0]
 8001704:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001706:	2200      	movs	r2, #0
 8001708:	2100      	movs	r1, #0
 800170a:	200e      	movs	r0, #14
 800170c:	f001 f877 	bl	80027fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001710:	200e      	movs	r0, #14
 8001712:	f001 f890 	bl	8002836 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001716:	2200      	movs	r2, #0
 8001718:	2100      	movs	r1, #0
 800171a:	2039      	movs	r0, #57	@ 0x39
 800171c:	f001 f86f 	bl	80027fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001720:	2039      	movs	r0, #57	@ 0x39
 8001722:	f001 f888 	bl	8002836 <HAL_NVIC_EnableIRQ>

}
 8001726:	bf00      	nop
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40023800 	.word	0x40023800

08001734 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b08e      	sub	sp, #56	@ 0x38
 8001738:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800173a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	605a      	str	r2, [r3, #4]
 8001744:	609a      	str	r2, [r3, #8]
 8001746:	60da      	str	r2, [r3, #12]
 8001748:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	623b      	str	r3, [r7, #32]
 800174e:	4b7a      	ldr	r3, [pc, #488]	@ (8001938 <MX_GPIO_Init+0x204>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001752:	4a79      	ldr	r2, [pc, #484]	@ (8001938 <MX_GPIO_Init+0x204>)
 8001754:	f043 0310 	orr.w	r3, r3, #16
 8001758:	6313      	str	r3, [r2, #48]	@ 0x30
 800175a:	4b77      	ldr	r3, [pc, #476]	@ (8001938 <MX_GPIO_Init+0x204>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175e:	f003 0310 	and.w	r3, r3, #16
 8001762:	623b      	str	r3, [r7, #32]
 8001764:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	61fb      	str	r3, [r7, #28]
 800176a:	4b73      	ldr	r3, [pc, #460]	@ (8001938 <MX_GPIO_Init+0x204>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176e:	4a72      	ldr	r2, [pc, #456]	@ (8001938 <MX_GPIO_Init+0x204>)
 8001770:	f043 0304 	orr.w	r3, r3, #4
 8001774:	6313      	str	r3, [r2, #48]	@ 0x30
 8001776:	4b70      	ldr	r3, [pc, #448]	@ (8001938 <MX_GPIO_Init+0x204>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177a:	f003 0304 	and.w	r3, r3, #4
 800177e:	61fb      	str	r3, [r7, #28]
 8001780:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	61bb      	str	r3, [r7, #24]
 8001786:	4b6c      	ldr	r3, [pc, #432]	@ (8001938 <MX_GPIO_Init+0x204>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178a:	4a6b      	ldr	r2, [pc, #428]	@ (8001938 <MX_GPIO_Init+0x204>)
 800178c:	f043 0320 	orr.w	r3, r3, #32
 8001790:	6313      	str	r3, [r2, #48]	@ 0x30
 8001792:	4b69      	ldr	r3, [pc, #420]	@ (8001938 <MX_GPIO_Init+0x204>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001796:	f003 0320 	and.w	r3, r3, #32
 800179a:	61bb      	str	r3, [r7, #24]
 800179c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	617b      	str	r3, [r7, #20]
 80017a2:	4b65      	ldr	r3, [pc, #404]	@ (8001938 <MX_GPIO_Init+0x204>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a6:	4a64      	ldr	r2, [pc, #400]	@ (8001938 <MX_GPIO_Init+0x204>)
 80017a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ae:	4b62      	ldr	r3, [pc, #392]	@ (8001938 <MX_GPIO_Init+0x204>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017b6:	617b      	str	r3, [r7, #20]
 80017b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	613b      	str	r3, [r7, #16]
 80017be:	4b5e      	ldr	r3, [pc, #376]	@ (8001938 <MX_GPIO_Init+0x204>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c2:	4a5d      	ldr	r2, [pc, #372]	@ (8001938 <MX_GPIO_Init+0x204>)
 80017c4:	f043 0301 	orr.w	r3, r3, #1
 80017c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ca:	4b5b      	ldr	r3, [pc, #364]	@ (8001938 <MX_GPIO_Init+0x204>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	613b      	str	r3, [r7, #16]
 80017d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	60fb      	str	r3, [r7, #12]
 80017da:	4b57      	ldr	r3, [pc, #348]	@ (8001938 <MX_GPIO_Init+0x204>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017de:	4a56      	ldr	r2, [pc, #344]	@ (8001938 <MX_GPIO_Init+0x204>)
 80017e0:	f043 0302 	orr.w	r3, r3, #2
 80017e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017e6:	4b54      	ldr	r3, [pc, #336]	@ (8001938 <MX_GPIO_Init+0x204>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	60fb      	str	r3, [r7, #12]
 80017f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	60bb      	str	r3, [r7, #8]
 80017f6:	4b50      	ldr	r3, [pc, #320]	@ (8001938 <MX_GPIO_Init+0x204>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fa:	4a4f      	ldr	r2, [pc, #316]	@ (8001938 <MX_GPIO_Init+0x204>)
 80017fc:	f043 0308 	orr.w	r3, r3, #8
 8001800:	6313      	str	r3, [r2, #48]	@ 0x30
 8001802:	4b4d      	ldr	r3, [pc, #308]	@ (8001938 <MX_GPIO_Init+0x204>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001806:	f003 0308 	and.w	r3, r3, #8
 800180a:	60bb      	str	r3, [r7, #8]
 800180c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	607b      	str	r3, [r7, #4]
 8001812:	4b49      	ldr	r3, [pc, #292]	@ (8001938 <MX_GPIO_Init+0x204>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001816:	4a48      	ldr	r2, [pc, #288]	@ (8001938 <MX_GPIO_Init+0x204>)
 8001818:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800181c:	6313      	str	r3, [r2, #48]	@ 0x30
 800181e:	4b46      	ldr	r3, [pc, #280]	@ (8001938 <MX_GPIO_Init+0x204>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001822:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001826:	607b      	str	r3, [r7, #4]
 8001828:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_RESET);
 800182a:	2200      	movs	r2, #0
 800182c:	2108      	movs	r1, #8
 800182e:	4843      	ldr	r0, [pc, #268]	@ (800193c <MX_GPIO_Init+0x208>)
 8001830:	f003 fa02 	bl	8004c38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IN3_GPIO_Port, IN2_Pin | IN3_Pin, GPIO_PIN_RESET);
 8001834:	2200      	movs	r2, #0
 8001836:	2109      	movs	r1, #9
 8001838:	4841      	ldr	r0, [pc, #260]	@ (8001940 <MX_GPIO_Init+0x20c>)
 800183a:	f003 f9fd 	bl	8004c38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 800183e:	2200      	movs	r2, #0
 8001840:	2108      	movs	r1, #8
 8001842:	4840      	ldr	r0, [pc, #256]	@ (8001944 <MX_GPIO_Init+0x210>)
 8001844:	f003 f9f8 	bl	8004c38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001848:	2200      	movs	r2, #0
 800184a:	f244 0181 	movw	r1, #16513	@ 0x4081
 800184e:	483e      	ldr	r0, [pc, #248]	@ (8001948 <MX_GPIO_Init+0x214>)
 8001850:	f003 f9f2 	bl	8004c38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001854:	2200      	movs	r2, #0
 8001856:	2140      	movs	r1, #64	@ 0x40
 8001858:	483c      	ldr	r0, [pc, #240]	@ (800194c <MX_GPIO_Init+0x218>)
 800185a:	f003 f9ed 	bl	8004c38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800185e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001862:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001864:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001868:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186a:	2300      	movs	r3, #0
 800186c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800186e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001872:	4619      	mov	r1, r3
 8001874:	4832      	ldr	r0, [pc, #200]	@ (8001940 <MX_GPIO_Init+0x20c>)
 8001876:	f003 f84b 	bl	8004910 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN4_Pin */
   GPIO_InitStruct.Pin = IN4_Pin;
 800187a:	2308      	movs	r3, #8
 800187c:	627b      	str	r3, [r7, #36]	@ 0x24
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800187e:	2301      	movs	r3, #1
 8001880:	62bb      	str	r3, [r7, #40]	@ 0x28
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001882:	2300      	movs	r3, #0
 8001884:	62fb      	str	r3, [r7, #44]	@ 0x2c
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001886:	2300      	movs	r3, #0
 8001888:	633b      	str	r3, [r7, #48]	@ 0x30
   HAL_GPIO_Init(IN4_GPIO_Port, &GPIO_InitStruct);
 800188a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800188e:	4619      	mov	r1, r3
 8001890:	482a      	ldr	r0, [pc, #168]	@ (800193c <MX_GPIO_Init+0x208>)
 8001892:	f003 f83d 	bl	8004910 <HAL_GPIO_Init>

   /*Configure GPIO pins : IN2_Pin IN3_Pin */
   GPIO_InitStruct.Pin = IN2_Pin|IN3_Pin;
 8001896:	2309      	movs	r3, #9
 8001898:	627b      	str	r3, [r7, #36]	@ 0x24
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800189a:	2301      	movs	r3, #1
 800189c:	62bb      	str	r3, [r7, #40]	@ 0x28
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189e:	2300      	movs	r3, #0
 80018a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a2:	2300      	movs	r3, #0
 80018a4:	633b      	str	r3, [r7, #48]	@ 0x30
   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018aa:	4619      	mov	r1, r3
 80018ac:	4824      	ldr	r0, [pc, #144]	@ (8001940 <MX_GPIO_Init+0x20c>)
 80018ae:	f003 f82f 	bl	8004910 <HAL_GPIO_Init>

   /*Configure GPIO pin : IN1_Pin */
   GPIO_InitStruct.Pin = IN1_Pin;
 80018b2:	2308      	movs	r3, #8
 80018b4:	627b      	str	r3, [r7, #36]	@ 0x24
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b6:	2301      	movs	r3, #1
 80018b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ba:	2300      	movs	r3, #0
 80018bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018be:	2300      	movs	r3, #0
 80018c0:	633b      	str	r3, [r7, #48]	@ 0x30
   HAL_GPIO_Init(IN1_GPIO_Port, &GPIO_InitStruct);
 80018c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018c6:	4619      	mov	r1, r3
 80018c8:	481e      	ldr	r0, [pc, #120]	@ (8001944 <MX_GPIO_Init+0x210>)
 80018ca:	f003 f821 	bl	8004910 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80018ce:	f244 0381 	movw	r3, #16513	@ 0x4081
 80018d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d4:	2301      	movs	r3, #1
 80018d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d8:	2300      	movs	r3, #0
 80018da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018dc:	2300      	movs	r3, #0
 80018de:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018e4:	4619      	mov	r1, r3
 80018e6:	4818      	ldr	r0, [pc, #96]	@ (8001948 <MX_GPIO_Init+0x214>)
 80018e8:	f003 f812 	bl	8004910 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80018ec:	2340      	movs	r3, #64	@ 0x40
 80018ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f0:	2301      	movs	r3, #1
 80018f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f4:	2300      	movs	r3, #0
 80018f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f8:	2300      	movs	r3, #0
 80018fa:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80018fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001900:	4619      	mov	r1, r3
 8001902:	4812      	ldr	r0, [pc, #72]	@ (800194c <MX_GPIO_Init+0x218>)
 8001904:	f003 f804 	bl	8004910 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001908:	2380      	movs	r3, #128	@ 0x80
 800190a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800190c:	2300      	movs	r3, #0
 800190e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001910:	2300      	movs	r3, #0
 8001912:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001914:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001918:	4619      	mov	r1, r3
 800191a:	480c      	ldr	r0, [pc, #48]	@ (800194c <MX_GPIO_Init+0x218>)
 800191c:	f002 fff8 	bl	8004910 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001920:	2200      	movs	r2, #0
 8001922:	2100      	movs	r1, #0
 8001924:	2028      	movs	r0, #40	@ 0x28
 8001926:	f000 ff6a 	bl	80027fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800192a:	2028      	movs	r0, #40	@ 0x28
 800192c:	f000 ff83 	bl	8002836 <HAL_NVIC_EnableIRQ>

}
 8001930:	bf00      	nop
 8001932:	3738      	adds	r7, #56	@ 0x38
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	40023800 	.word	0x40023800
 800193c:	40021400 	.word	0x40021400
 8001940:	40020800 	.word	0x40020800
 8001944:	40020000 	.word	0x40020000
 8001948:	40020400 	.word	0x40020400
 800194c:	40021800 	.word	0x40021800

08001950 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001954:	b672      	cpsid	i
}
 8001956:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001958:	bf00      	nop
 800195a:	e7fd      	b.n	8001958 <Error_Handler+0x8>

0800195c <reset_motor>:
extern TIM_HandleTypeDef htim2;

// Test sequence completion flag (declare in main.c)
extern uint8_t motor_test_complete;

void reset_motor(){
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
	char msg[2];
	while(1){
		receive_msg(msg);
 8001962:	1d3b      	adds	r3, r7, #4
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff fb75 	bl	8001054 <receive_msg>

		if(msg[0] == 's'){
 800196a:	793b      	ldrb	r3, [r7, #4]
 800196c:	2b73      	cmp	r3, #115	@ 0x73
 800196e:	d105      	bne.n	800197c <reset_motor+0x20>
			set_motor_direction(-7, 0);
 8001970:	2100      	movs	r1, #0
 8001972:	f06f 0006 	mvn.w	r0, #6
 8001976:	f000 f859 	bl	8001a2c <set_motor_direction>
 800197a:	e7f2      	b.n	8001962 <reset_motor+0x6>
//			HAL_Delay(100);
//			set_motor_direction(0, 0);
//			msg[0] = 'g';
		}
		else if(msg[0] == 'w'){
 800197c:	793b      	ldrb	r3, [r7, #4]
 800197e:	2b77      	cmp	r3, #119	@ 0x77
 8001980:	d104      	bne.n	800198c <reset_motor+0x30>
			set_motor_direction(7, 0);
 8001982:	2100      	movs	r1, #0
 8001984:	2007      	movs	r0, #7
 8001986:	f000 f851 	bl	8001a2c <set_motor_direction>
 800198a:	e7ea      	b.n	8001962 <reset_motor+0x6>
//			HAL_Delay(100);
//			set_motor_direction(0, 0);
//			msg[0] = 'g';

		}
		else if(msg[0] == 'd'){
 800198c:	793b      	ldrb	r3, [r7, #4]
 800198e:	2b64      	cmp	r3, #100	@ 0x64
 8001990:	d104      	bne.n	800199c <reset_motor+0x40>
			set_motor_direction(0, 7);
 8001992:	2107      	movs	r1, #7
 8001994:	2000      	movs	r0, #0
 8001996:	f000 f849 	bl	8001a2c <set_motor_direction>
 800199a:	e7e2      	b.n	8001962 <reset_motor+0x6>
//			HAL_Delay(100);
//			set_motor_direction(0, 0);
//			msg[0] = 'g';
		}
		else if(msg[0] == 'a'){
 800199c:	793b      	ldrb	r3, [r7, #4]
 800199e:	2b61      	cmp	r3, #97	@ 0x61
 80019a0:	d105      	bne.n	80019ae <reset_motor+0x52>
			set_motor_direction(0, -7);
 80019a2:	f06f 0106 	mvn.w	r1, #6
 80019a6:	2000      	movs	r0, #0
 80019a8:	f000 f840 	bl	8001a2c <set_motor_direction>
 80019ac:	e7d9      	b.n	8001962 <reset_motor+0x6>
//			HAL_Delay(100);
//			set_motor_direction(0, 0);
//			msg[0] = 'g';
		}
		else if(msg[0] == 'k'){
 80019ae:	793b      	ldrb	r3, [r7, #4]
 80019b0:	2b6b      	cmp	r3, #107	@ 0x6b
 80019b2:	d106      	bne.n	80019c2 <reset_motor+0x66>
					set_motor_direction(0, 0);
 80019b4:	2100      	movs	r1, #0
 80019b6:	2000      	movs	r0, #0
 80019b8:	f000 f838 	bl	8001a2c <set_motor_direction>
					msg[0] = 'g';
 80019bc:	2367      	movs	r3, #103	@ 0x67
 80019be:	713b      	strb	r3, [r7, #4]
 80019c0:	e7cf      	b.n	8001962 <reset_motor+0x6>
				}
		else if(msg[0] == 'q'){
 80019c2:	793b      	ldrb	r3, [r7, #4]
 80019c4:	2b71      	cmp	r3, #113	@ 0x71
 80019c6:	d1cc      	bne.n	8001962 <reset_motor+0x6>
			msg[0] = 'g';
 80019c8:	2367      	movs	r3, #103	@ 0x67
 80019ca:	713b      	strb	r3, [r7, #4]
			HAL_Delay(1000);
 80019cc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019d0:	f000 fe16 	bl	8002600 <HAL_Delay>
			return;
 80019d4:	bf00      	nop
		}
	}


}
 80019d6:	3708      	adds	r7, #8
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <convert_to_speed>:


static uint16_t convert_to_speed(int input)
{
 80019dc:	b480      	push	{r7}
 80019de:	b087      	sub	sp, #28
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
    const int input_max = 5;
 80019e4:	2305      	movs	r3, #5
 80019e6:	613b      	str	r3, [r7, #16]
    int abs_input = abs(input);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	bfb8      	it	lt
 80019ee:	425b      	neglt	r3, r3
 80019f0:	60fb      	str	r3, [r7, #12]
    uint16_t speed = (uint16_t)((abs_input * PWM_MAX) / input_max);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80019f8:	fb03 f202 	mul.w	r2, r3, r2
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8001a02:	82fb      	strh	r3, [r7, #22]

    if (speed < PWM_MIN) speed = PWM_MIN;
 8001a04:	8afb      	ldrh	r3, [r7, #22]
 8001a06:	2b31      	cmp	r3, #49	@ 0x31
 8001a08:	d802      	bhi.n	8001a10 <convert_to_speed+0x34>
 8001a0a:	2332      	movs	r3, #50	@ 0x32
 8001a0c:	82fb      	strh	r3, [r7, #22]
 8001a0e:	e006      	b.n	8001a1e <convert_to_speed+0x42>
    else if (speed > PWM_MAX) speed = PWM_MAX;
 8001a10:	8afb      	ldrh	r3, [r7, #22]
 8001a12:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001a16:	d902      	bls.n	8001a1e <convert_to_speed+0x42>
 8001a18:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a1c:	82fb      	strh	r3, [r7, #22]


    return speed;
 8001a1e:	8afb      	ldrh	r3, [r7, #22]
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	371c      	adds	r7, #28
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <set_motor_direction>:

void set_motor_direction(int Dx, int Dy)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]

	uint16_t x_speed = convert_to_speed(Dx);
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f7ff ffd0 	bl	80019dc <convert_to_speed>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	81bb      	strh	r3, [r7, #12]
	uint16_t y_speed = convert_to_speed(Dy);
 8001a40:	6838      	ldr	r0, [r7, #0]
 8001a42:	f7ff ffcb 	bl	80019dc <convert_to_speed>
 8001a46:	4603      	mov	r3, r0
 8001a48:	81fb      	strh	r3, [r7, #14]

	x_speed -= 150;
 8001a4a:	89bb      	ldrh	r3, [r7, #12]
 8001a4c:	3b96      	subs	r3, #150	@ 0x96
 8001a4e:	81bb      	strh	r3, [r7, #12]

    // Control X-axis motor (TIM1_CH2)
    if (Dx > 0) {
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	dd0a      	ble.n	8001a6c <set_motor_direction+0x40>
        // Clockwise
        HAL_GPIO_WritePin(MOTOR_X_IN1_PORT, MOTOR_X_IN1_PIN, GPIO_PIN_SET);
 8001a56:	2201      	movs	r2, #1
 8001a58:	2108      	movs	r1, #8
 8001a5a:	482b      	ldr	r0, [pc, #172]	@ (8001b08 <set_motor_direction+0xdc>)
 8001a5c:	f003 f8ec 	bl	8004c38 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_X_IN2_PORT, MOTOR_X_IN2_PIN, GPIO_PIN_RESET);
 8001a60:	2200      	movs	r2, #0
 8001a62:	2101      	movs	r1, #1
 8001a64:	4829      	ldr	r0, [pc, #164]	@ (8001b0c <set_motor_direction+0xe0>)
 8001a66:	f003 f8e7 	bl	8004c38 <HAL_GPIO_WritePin>
 8001a6a:	e017      	b.n	8001a9c <set_motor_direction+0x70>
    } else if (Dx < 0) {
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	da0a      	bge.n	8001a88 <set_motor_direction+0x5c>
        // Counter-Clockwise
        HAL_GPIO_WritePin(MOTOR_X_IN1_PORT, MOTOR_X_IN1_PIN, GPIO_PIN_RESET);
 8001a72:	2200      	movs	r2, #0
 8001a74:	2108      	movs	r1, #8
 8001a76:	4824      	ldr	r0, [pc, #144]	@ (8001b08 <set_motor_direction+0xdc>)
 8001a78:	f003 f8de 	bl	8004c38 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_X_IN2_PORT, MOTOR_X_IN2_PIN, GPIO_PIN_SET);
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	2101      	movs	r1, #1
 8001a80:	4822      	ldr	r0, [pc, #136]	@ (8001b0c <set_motor_direction+0xe0>)
 8001a82:	f003 f8d9 	bl	8004c38 <HAL_GPIO_WritePin>
 8001a86:	e009      	b.n	8001a9c <set_motor_direction+0x70>
    } else {
        // Stop
        HAL_GPIO_WritePin(MOTOR_X_IN1_PORT, MOTOR_X_IN1_PIN, GPIO_PIN_RESET);
 8001a88:	2200      	movs	r2, #0
 8001a8a:	2108      	movs	r1, #8
 8001a8c:	481e      	ldr	r0, [pc, #120]	@ (8001b08 <set_motor_direction+0xdc>)
 8001a8e:	f003 f8d3 	bl	8004c38 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_X_IN2_PORT, MOTOR_X_IN2_PIN, GPIO_PIN_RESET);
 8001a92:	2200      	movs	r2, #0
 8001a94:	2101      	movs	r1, #1
 8001a96:	481d      	ldr	r0, [pc, #116]	@ (8001b0c <set_motor_direction+0xe0>)
 8001a98:	f003 f8ce 	bl	8004c38 <HAL_GPIO_WritePin>
    }

    // Control Y-axis motor (TIM1_CH3)
    if (Dy > 0) {
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	dd0a      	ble.n	8001ab8 <set_motor_direction+0x8c>
        // Clockwise
        HAL_GPIO_WritePin(MOTOR_Y_IN1_PORT, MOTOR_Y_IN1_PIN, GPIO_PIN_SET);
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	2108      	movs	r1, #8
 8001aa6:	4819      	ldr	r0, [pc, #100]	@ (8001b0c <set_motor_direction+0xe0>)
 8001aa8:	f003 f8c6 	bl	8004c38 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_Y_IN2_PORT, MOTOR_Y_IN2_PIN, GPIO_PIN_RESET);
 8001aac:	2200      	movs	r2, #0
 8001aae:	2108      	movs	r1, #8
 8001ab0:	4817      	ldr	r0, [pc, #92]	@ (8001b10 <set_motor_direction+0xe4>)
 8001ab2:	f003 f8c1 	bl	8004c38 <HAL_GPIO_WritePin>
 8001ab6:	e01a      	b.n	8001aee <set_motor_direction+0xc2>

    } else if (Dy < 0) {
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	da0d      	bge.n	8001ada <set_motor_direction+0xae>

    	y_speed -= 100;
 8001abe:	89fb      	ldrh	r3, [r7, #14]
 8001ac0:	3b64      	subs	r3, #100	@ 0x64
 8001ac2:	81fb      	strh	r3, [r7, #14]
        // Counter-Clockwise
        HAL_GPIO_WritePin(MOTOR_Y_IN1_PORT, MOTOR_Y_IN1_PIN, GPIO_PIN_RESET);
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	2108      	movs	r1, #8
 8001ac8:	4810      	ldr	r0, [pc, #64]	@ (8001b0c <set_motor_direction+0xe0>)
 8001aca:	f003 f8b5 	bl	8004c38 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_Y_IN2_PORT, MOTOR_Y_IN2_PIN, GPIO_PIN_SET);
 8001ace:	2201      	movs	r2, #1
 8001ad0:	2108      	movs	r1, #8
 8001ad2:	480f      	ldr	r0, [pc, #60]	@ (8001b10 <set_motor_direction+0xe4>)
 8001ad4:	f003 f8b0 	bl	8004c38 <HAL_GPIO_WritePin>
 8001ad8:	e009      	b.n	8001aee <set_motor_direction+0xc2>
    } else {
        // Stop
        HAL_GPIO_WritePin(MOTOR_Y_IN1_PORT, MOTOR_Y_IN1_PIN, GPIO_PIN_RESET);
 8001ada:	2200      	movs	r2, #0
 8001adc:	2108      	movs	r1, #8
 8001ade:	480b      	ldr	r0, [pc, #44]	@ (8001b0c <set_motor_direction+0xe0>)
 8001ae0:	f003 f8aa 	bl	8004c38 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_Y_IN2_PORT, MOTOR_Y_IN2_PIN, GPIO_PIN_RESET);
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	2108      	movs	r1, #8
 8001ae8:	4809      	ldr	r0, [pc, #36]	@ (8001b10 <set_motor_direction+0xe4>)
 8001aea:	f003 f8a5 	bl	8004c38 <HAL_GPIO_WritePin>
    }

    // Set PWM duty cycles
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_X, x_speed);
 8001aee:	4b09      	ldr	r3, [pc, #36]	@ (8001b14 <set_motor_direction+0xe8>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	89ba      	ldrh	r2, [r7, #12]
 8001af4:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_Y, y_speed);
 8001af6:	4b07      	ldr	r3, [pc, #28]	@ (8001b14 <set_motor_direction+0xe8>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	89fa      	ldrh	r2, [r7, #14]
 8001afc:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001afe:	bf00      	nop
 8001b00:	3710      	adds	r7, #16
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	40020000 	.word	0x40020000
 8001b0c:	40020800 	.word	0x40020800
 8001b10:	40021400 	.word	0x40021400
 8001b14:	2001ed6c 	.word	0x2001ed6c

08001b18 <ov7670_init>:
  { 0xb3, 0x82 }, //
  { 0x4b, 0x01 },
};


uint8_t ov7670_init(void){
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b09c      	sub	sp, #112	@ 0x70
 8001b1c:	af00      	add	r7, sp, #0
  uint8_t val;
  char msg[100];
  
  print_msg("init_test\r\n");
 8001b1e:	481c      	ldr	r0, [pc, #112]	@ (8001b90 <ov7670_init+0x78>)
 8001b20:	f7ff fa82 	bl	8001028 <print_msg>
  val = ov7670_read(0x0A);
 8001b24:	200a      	movs	r0, #10
 8001b26:	f000 f839 	bl	8001b9c <ov7670_read>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
  
  if (val != 0x76) {
 8001b30:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8001b34:	2b76      	cmp	r3, #118	@ 0x76
 8001b36:	d00c      	beq.n	8001b52 <ov7670_init+0x3a>
    sprintf(msg, "Wrong product id (0x%x)\r\n", val);
 8001b38:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 8001b3c:	1d3b      	adds	r3, r7, #4
 8001b3e:	4915      	ldr	r1, [pc, #84]	@ (8001b94 <ov7670_init+0x7c>)
 8001b40:	4618      	mov	r0, r3
 8001b42:	f008 f985 	bl	8009e50 <siprintf>
    print_msg(msg);
 8001b46:	1d3b      	adds	r3, r7, #4
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff fa6d 	bl	8001028 <print_msg>
    return 1;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e019      	b.n	8001b86 <ov7670_init+0x6e>
  }
  
  // Re-use the same code from Lab 5 here. 


  for(int i = 0; i < OV7670_REG_NUM;i++){
 8001b52:	2300      	movs	r3, #0
 8001b54:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001b56:	e012      	b.n	8001b7e <ov7670_init+0x66>
	  ov7670_write(OV7670_reg[i][0],OV7670_reg[i][1]);
 8001b58:	4a0f      	ldr	r2, [pc, #60]	@ (8001b98 <ov7670_init+0x80>)
 8001b5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001b5c:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8001b60:	490d      	ldr	r1, [pc, #52]	@ (8001b98 <ov7670_init+0x80>)
 8001b62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	440b      	add	r3, r1
 8001b68:	785b      	ldrb	r3, [r3, #1]
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4610      	mov	r0, r2
 8001b6e:	f000 f877 	bl	8001c60 <ov7670_write>
	  HAL_Delay(10);
 8001b72:	200a      	movs	r0, #10
 8001b74:	f000 fd44 	bl	8002600 <HAL_Delay>
  for(int i = 0; i < OV7670_REG_NUM;i++){
 8001b78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001b7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001b80:	2b79      	cmp	r3, #121	@ 0x79
 8001b82:	dde9      	ble.n	8001b58 <ov7670_init+0x40>
  }


  return 0;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3770      	adds	r7, #112	@ 0x70
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	0800c2fc 	.word	0x0800c2fc
 8001b94:	0800c308 	.word	0x0800c308
 8001b98:	0800c354 	.word	0x0800c354

08001b9c <ov7670_read>:

uint8_t ov7670_read(uint8_t reg){
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b0a0      	sub	sp, #128	@ 0x80
 8001ba0:	af02      	add	r7, sp, #8
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	71fb      	strb	r3, [r7, #7]

  // 

	char msg[100];

    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&hi2c2, ADDR_OV7670, &reg, 1, 10000);
 8001ba6:	1dfa      	adds	r2, r7, #7
 8001ba8:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001bac:	9300      	str	r3, [sp, #0]
 8001bae:	2301      	movs	r3, #1
 8001bb0:	2142      	movs	r1, #66	@ 0x42
 8001bb2:	4828      	ldr	r0, [pc, #160]	@ (8001c54 <ov7670_read+0xb8>)
 8001bb4:	f003 f9dc 	bl	8004f70 <HAL_I2C_Master_Transmit>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    while(status != HAL_OK)
 8001bbe:	e016      	b.n	8001bee <ov7670_read+0x52>
    {

    	status = HAL_I2C_Master_Transmit(&hi2c2, ADDR_OV7670, &reg, 1, 10000);
 8001bc0:	1dfa      	adds	r2, r7, #7
 8001bc2:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001bc6:	9300      	str	r3, [sp, #0]
 8001bc8:	2301      	movs	r3, #1
 8001bca:	2142      	movs	r1, #66	@ 0x42
 8001bcc:	4821      	ldr	r0, [pc, #132]	@ (8001c54 <ov7670_read+0xb8>)
 8001bce:	f003 f9cf 	bl	8004f70 <HAL_I2C_Master_Transmit>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    	sprintf(msg,"\r\nRetrying\r\n");
 8001bd8:	f107 0310 	add.w	r3, r7, #16
 8001bdc:	491e      	ldr	r1, [pc, #120]	@ (8001c58 <ov7670_read+0xbc>)
 8001bde:	4618      	mov	r0, r3
 8001be0:	f008 f936 	bl	8009e50 <siprintf>
    	print_msg(msg);
 8001be4:	f107 0310 	add.w	r3, r7, #16
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff fa1d 	bl	8001028 <print_msg>
    while(status != HAL_OK)
 8001bee:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d1e4      	bne.n	8001bc0 <ov7670_read+0x24>
    }

    uint8_t data;

    status = HAL_I2C_Master_Receive(&hi2c2, ADDR_OV7670, &data, 1, 10000);
 8001bf6:	f107 020f 	add.w	r2, r7, #15
 8001bfa:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001bfe:	9300      	str	r3, [sp, #0]
 8001c00:	2301      	movs	r3, #1
 8001c02:	2142      	movs	r1, #66	@ 0x42
 8001c04:	4813      	ldr	r0, [pc, #76]	@ (8001c54 <ov7670_read+0xb8>)
 8001c06:	f003 fab1 	bl	800516c <HAL_I2C_Master_Receive>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    while(status != HAL_OK)
 8001c10:	e017      	b.n	8001c42 <ov7670_read+0xa6>
    {
    	status = HAL_I2C_Master_Receive(&hi2c2, ADDR_OV7670, &data, 1, 10000);
 8001c12:	f107 020f 	add.w	r2, r7, #15
 8001c16:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001c1a:	9300      	str	r3, [sp, #0]
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	2142      	movs	r1, #66	@ 0x42
 8001c20:	480c      	ldr	r0, [pc, #48]	@ (8001c54 <ov7670_read+0xb8>)
 8001c22:	f003 faa3 	bl	800516c <HAL_I2C_Master_Receive>
 8001c26:	4603      	mov	r3, r0
 8001c28:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    	sprintf(msg,"\r\nRetrying2\r\n");
 8001c2c:	f107 0310 	add.w	r3, r7, #16
 8001c30:	490a      	ldr	r1, [pc, #40]	@ (8001c5c <ov7670_read+0xc0>)
 8001c32:	4618      	mov	r0, r3
 8001c34:	f008 f90c 	bl	8009e50 <siprintf>
    	print_msg(msg);
 8001c38:	f107 0310 	add.w	r3, r7, #16
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7ff f9f3 	bl	8001028 <print_msg>
    while(status != HAL_OK)
 8001c42:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1e3      	bne.n	8001c12 <ov7670_read+0x76>
    }
    return data;
 8001c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3778      	adds	r7, #120	@ 0x78
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	2001ecd0 	.word	0x2001ecd0
 8001c58:	0800c324 	.word	0x0800c324
 8001c5c:	0800c334 	.word	0x0800c334

08001c60 <ov7670_write>:

HAL_StatusTypeDef ov7670_write(uint8_t reg,uint8_t val){
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b0a0      	sub	sp, #128	@ 0x80
 8001c64:	af02      	add	r7, sp, #8
 8001c66:	4603      	mov	r3, r0
 8001c68:	460a      	mov	r2, r1
 8001c6a:	71fb      	strb	r3, [r7, #7]
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	71bb      	strb	r3, [r7, #6]
  // Re-use the same code from Lab 5 here.

	char msg[100];


	uint8_t data[2] = {reg, val};
 8001c70:	79fb      	ldrb	r3, [r7, #7]
 8001c72:	733b      	strb	r3, [r7, #12]
 8001c74:	79bb      	ldrb	r3, [r7, #6]
 8001c76:	737b      	strb	r3, [r7, #13]
	HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&hi2c2, ADDR_OV7670, data, 2, 10000);
 8001c78:	f107 020c 	add.w	r2, r7, #12
 8001c7c:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001c80:	9300      	str	r3, [sp, #0]
 8001c82:	2302      	movs	r3, #2
 8001c84:	2142      	movs	r1, #66	@ 0x42
 8001c86:	4814      	ldr	r0, [pc, #80]	@ (8001cd8 <ov7670_write+0x78>)
 8001c88:	f003 f972 	bl	8004f70 <HAL_I2C_Master_Transmit>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77


    while(status != HAL_OK)
 8001c92:	e017      	b.n	8001cc4 <ov7670_write+0x64>
    {
    	status = HAL_I2C_Master_Transmit(&hi2c2, ADDR_OV7670, data, 2, 10000);
 8001c94:	f107 020c 	add.w	r2, r7, #12
 8001c98:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001c9c:	9300      	str	r3, [sp, #0]
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	2142      	movs	r1, #66	@ 0x42
 8001ca2:	480d      	ldr	r0, [pc, #52]	@ (8001cd8 <ov7670_write+0x78>)
 8001ca4:	f003 f964 	bl	8004f70 <HAL_I2C_Master_Transmit>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    	sprintf(msg,"\r\nRetrying3\r\n");
 8001cae:	f107 0310 	add.w	r3, r7, #16
 8001cb2:	490a      	ldr	r1, [pc, #40]	@ (8001cdc <ov7670_write+0x7c>)
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f008 f8cb 	bl	8009e50 <siprintf>
    	print_msg(msg);
 8001cba:	f107 0310 	add.w	r3, r7, #16
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff f9b2 	bl	8001028 <print_msg>
    while(status != HAL_OK)
 8001cc4:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d1e3      	bne.n	8001c94 <ov7670_write+0x34>
    }
    return status;
 8001ccc:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77

  //
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3778      	adds	r7, #120	@ 0x78
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	2001ecd0 	.word	0x2001ecd0
 8001cdc:	0800c344 	.word	0x0800c344

08001ce0 <ov7670_snapshot>:

void ov7670_snapshot(uint16_t *buff){
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  // Re-use the same code from Lab 5 here.

	HAL_DCMI_Start_DMA(&hdcmi,DCMI_MODE_SNAPSHOT,(uint32_t)buff,IMG_ROWS * IMG_COLS / 2);
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	f243 03f0 	movw	r3, #12528	@ 0x30f0
 8001cee:	2102      	movs	r1, #2
 8001cf0:	4803      	ldr	r0, [pc, #12]	@ (8001d00 <ov7670_snapshot+0x20>)
 8001cf2:	f000 fdbb 	bl	800286c <HAL_DCMI_Start_DMA>


  //
}
 8001cf6:	bf00      	nop
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	2001ec20 	.word	0x2001ec20

08001d04 <ov7670_capture>:

void ov7670_capture(uint16_t *buff){
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  // Re-use the same code from Lab 5 here.

	  HAL_DCMI_Start_DMA(&hdcmi,DCMI_MODE_CONTINUOUS,(uint32_t)buff,IMG_ROWS * IMG_COLS /2);
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	f243 03f0 	movw	r3, #12528	@ 0x30f0
 8001d12:	2100      	movs	r1, #0
 8001d14:	4803      	ldr	r0, [pc, #12]	@ (8001d24 <ov7670_capture+0x20>)
 8001d16:	f000 fda9 	bl	800286c <HAL_DCMI_Start_DMA>


  //
}
 8001d1a:	bf00      	nop
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	2001ec20 	.word	0x2001ec20

08001d28 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	607b      	str	r3, [r7, #4]
 8001d32:	4b10      	ldr	r3, [pc, #64]	@ (8001d74 <HAL_MspInit+0x4c>)
 8001d34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d36:	4a0f      	ldr	r2, [pc, #60]	@ (8001d74 <HAL_MspInit+0x4c>)
 8001d38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8001d74 <HAL_MspInit+0x4c>)
 8001d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d46:	607b      	str	r3, [r7, #4]
 8001d48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	603b      	str	r3, [r7, #0]
 8001d4e:	4b09      	ldr	r3, [pc, #36]	@ (8001d74 <HAL_MspInit+0x4c>)
 8001d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d52:	4a08      	ldr	r2, [pc, #32]	@ (8001d74 <HAL_MspInit+0x4c>)
 8001d54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d58:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d5a:	4b06      	ldr	r3, [pc, #24]	@ (8001d74 <HAL_MspInit+0x4c>)
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d62:	603b      	str	r3, [r7, #0]
 8001d64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d66:	bf00      	nop
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	40023800 	.word	0x40023800

08001d78 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b08e      	sub	sp, #56	@ 0x38
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	605a      	str	r2, [r3, #4]
 8001d8a:	609a      	str	r2, [r3, #8]
 8001d8c:	60da      	str	r2, [r3, #12]
 8001d8e:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a78      	ldr	r2, [pc, #480]	@ (8001f78 <HAL_DCMI_MspInit+0x200>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	f040 80e9 	bne.w	8001f6e <HAL_DCMI_MspInit+0x1f6>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	623b      	str	r3, [r7, #32]
 8001da0:	4b76      	ldr	r3, [pc, #472]	@ (8001f7c <HAL_DCMI_MspInit+0x204>)
 8001da2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001da4:	4a75      	ldr	r2, [pc, #468]	@ (8001f7c <HAL_DCMI_MspInit+0x204>)
 8001da6:	f043 0301 	orr.w	r3, r3, #1
 8001daa:	6353      	str	r3, [r2, #52]	@ 0x34
 8001dac:	4b73      	ldr	r3, [pc, #460]	@ (8001f7c <HAL_DCMI_MspInit+0x204>)
 8001dae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001db0:	f003 0301 	and.w	r3, r3, #1
 8001db4:	623b      	str	r3, [r7, #32]
 8001db6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001db8:	2300      	movs	r3, #0
 8001dba:	61fb      	str	r3, [r7, #28]
 8001dbc:	4b6f      	ldr	r3, [pc, #444]	@ (8001f7c <HAL_DCMI_MspInit+0x204>)
 8001dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc0:	4a6e      	ldr	r2, [pc, #440]	@ (8001f7c <HAL_DCMI_MspInit+0x204>)
 8001dc2:	f043 0310 	orr.w	r3, r3, #16
 8001dc6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dc8:	4b6c      	ldr	r3, [pc, #432]	@ (8001f7c <HAL_DCMI_MspInit+0x204>)
 8001dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dcc:	f003 0310 	and.w	r3, r3, #16
 8001dd0:	61fb      	str	r3, [r7, #28]
 8001dd2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	61bb      	str	r3, [r7, #24]
 8001dd8:	4b68      	ldr	r3, [pc, #416]	@ (8001f7c <HAL_DCMI_MspInit+0x204>)
 8001dda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ddc:	4a67      	ldr	r2, [pc, #412]	@ (8001f7c <HAL_DCMI_MspInit+0x204>)
 8001dde:	f043 0301 	orr.w	r3, r3, #1
 8001de2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001de4:	4b65      	ldr	r3, [pc, #404]	@ (8001f7c <HAL_DCMI_MspInit+0x204>)
 8001de6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de8:	f003 0301 	and.w	r3, r3, #1
 8001dec:	61bb      	str	r3, [r7, #24]
 8001dee:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001df0:	2300      	movs	r3, #0
 8001df2:	617b      	str	r3, [r7, #20]
 8001df4:	4b61      	ldr	r3, [pc, #388]	@ (8001f7c <HAL_DCMI_MspInit+0x204>)
 8001df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df8:	4a60      	ldr	r2, [pc, #384]	@ (8001f7c <HAL_DCMI_MspInit+0x204>)
 8001dfa:	f043 0304 	orr.w	r3, r3, #4
 8001dfe:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e00:	4b5e      	ldr	r3, [pc, #376]	@ (8001f7c <HAL_DCMI_MspInit+0x204>)
 8001e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e04:	f003 0304 	and.w	r3, r3, #4
 8001e08:	617b      	str	r3, [r7, #20]
 8001e0a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	613b      	str	r3, [r7, #16]
 8001e10:	4b5a      	ldr	r3, [pc, #360]	@ (8001f7c <HAL_DCMI_MspInit+0x204>)
 8001e12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e14:	4a59      	ldr	r2, [pc, #356]	@ (8001f7c <HAL_DCMI_MspInit+0x204>)
 8001e16:	f043 0308 	orr.w	r3, r3, #8
 8001e1a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e1c:	4b57      	ldr	r3, [pc, #348]	@ (8001f7c <HAL_DCMI_MspInit+0x204>)
 8001e1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e20:	f003 0308 	and.w	r3, r3, #8
 8001e24:	613b      	str	r3, [r7, #16]
 8001e26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e28:	2300      	movs	r3, #0
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	4b53      	ldr	r3, [pc, #332]	@ (8001f7c <HAL_DCMI_MspInit+0x204>)
 8001e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e30:	4a52      	ldr	r2, [pc, #328]	@ (8001f7c <HAL_DCMI_MspInit+0x204>)
 8001e32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e36:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e38:	4b50      	ldr	r3, [pc, #320]	@ (8001f7c <HAL_DCMI_MspInit+0x204>)
 8001e3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e40:	60fb      	str	r3, [r7, #12]
 8001e42:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> DCMI_D2
    PC9     ------> DCMI_D3
    PD3     ------> DCMI_D5
    PG9     ------> DCMI_VSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001e44:	2370      	movs	r3, #112	@ 0x70
 8001e46:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e48:	2302      	movs	r3, #2
 8001e4a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e50:	2300      	movs	r3, #0
 8001e52:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001e54:	230d      	movs	r3, #13
 8001e56:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	4848      	ldr	r0, [pc, #288]	@ (8001f80 <HAL_DCMI_MspInit+0x208>)
 8001e60:	f002 fd56 	bl	8004910 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001e64:	2350      	movs	r3, #80	@ 0x50
 8001e66:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e68:	2302      	movs	r3, #2
 8001e6a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e70:	2300      	movs	r3, #0
 8001e72:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001e74:	230d      	movs	r3, #13
 8001e76:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	4841      	ldr	r0, [pc, #260]	@ (8001f84 <HAL_DCMI_MspInit+0x20c>)
 8001e80:	f002 fd46 	bl	8004910 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001e84:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001e88:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e92:	2300      	movs	r3, #0
 8001e94:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001e96:	230d      	movs	r3, #13
 8001e98:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	4839      	ldr	r0, [pc, #228]	@ (8001f88 <HAL_DCMI_MspInit+0x210>)
 8001ea2:	f002 fd35 	bl	8004910 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ea6:	2308      	movs	r3, #8
 8001ea8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eaa:	2302      	movs	r3, #2
 8001eac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001eb6:	230d      	movs	r3, #13
 8001eb8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001eba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	4832      	ldr	r0, [pc, #200]	@ (8001f8c <HAL_DCMI_MspInit+0x214>)
 8001ec2:	f002 fd25 	bl	8004910 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ec6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001eca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ecc:	2302      	movs	r3, #2
 8001ece:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001ed8:	230d      	movs	r3, #13
 8001eda:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001edc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	482b      	ldr	r0, [pc, #172]	@ (8001f90 <HAL_DCMI_MspInit+0x218>)
 8001ee4:	f002 fd14 	bl	8004910 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 8001ee8:	4b2a      	ldr	r3, [pc, #168]	@ (8001f94 <HAL_DCMI_MspInit+0x21c>)
 8001eea:	4a2b      	ldr	r2, [pc, #172]	@ (8001f98 <HAL_DCMI_MspInit+0x220>)
 8001eec:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 8001eee:	4b29      	ldr	r3, [pc, #164]	@ (8001f94 <HAL_DCMI_MspInit+0x21c>)
 8001ef0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ef4:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ef6:	4b27      	ldr	r3, [pc, #156]	@ (8001f94 <HAL_DCMI_MspInit+0x21c>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8001efc:	4b25      	ldr	r3, [pc, #148]	@ (8001f94 <HAL_DCMI_MspInit+0x21c>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8001f02:	4b24      	ldr	r3, [pc, #144]	@ (8001f94 <HAL_DCMI_MspInit+0x21c>)
 8001f04:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f08:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001f0a:	4b22      	ldr	r3, [pc, #136]	@ (8001f94 <HAL_DCMI_MspInit+0x21c>)
 8001f0c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001f10:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001f12:	4b20      	ldr	r3, [pc, #128]	@ (8001f94 <HAL_DCMI_MspInit+0x21c>)
 8001f14:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001f18:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 8001f1a:	4b1e      	ldr	r3, [pc, #120]	@ (8001f94 <HAL_DCMI_MspInit+0x21c>)
 8001f1c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f20:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_HIGH;
 8001f22:	4b1c      	ldr	r3, [pc, #112]	@ (8001f94 <HAL_DCMI_MspInit+0x21c>)
 8001f24:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001f28:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001f2a:	4b1a      	ldr	r3, [pc, #104]	@ (8001f94 <HAL_DCMI_MspInit+0x21c>)
 8001f2c:	2204      	movs	r2, #4
 8001f2e:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001f30:	4b18      	ldr	r3, [pc, #96]	@ (8001f94 <HAL_DCMI_MspInit+0x21c>)
 8001f32:	2203      	movs	r2, #3
 8001f34:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 8001f36:	4b17      	ldr	r3, [pc, #92]	@ (8001f94 <HAL_DCMI_MspInit+0x21c>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001f3c:	4b15      	ldr	r3, [pc, #84]	@ (8001f94 <HAL_DCMI_MspInit+0x21c>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8001f42:	4814      	ldr	r0, [pc, #80]	@ (8001f94 <HAL_DCMI_MspInit+0x21c>)
 8001f44:	f000 ff5a 	bl	8002dfc <HAL_DMA_Init>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <HAL_DCMI_MspInit+0x1da>
    {
      Error_Handler();
 8001f4e:	f7ff fcff 	bl	8001950 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a0f      	ldr	r2, [pc, #60]	@ (8001f94 <HAL_DCMI_MspInit+0x21c>)
 8001f56:	649a      	str	r2, [r3, #72]	@ 0x48
 8001f58:	4a0e      	ldr	r2, [pc, #56]	@ (8001f94 <HAL_DCMI_MspInit+0x21c>)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 8001f5e:	2200      	movs	r2, #0
 8001f60:	2100      	movs	r1, #0
 8001f62:	204e      	movs	r0, #78	@ 0x4e
 8001f64:	f000 fc4b 	bl	80027fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8001f68:	204e      	movs	r0, #78	@ 0x4e
 8001f6a:	f000 fc64 	bl	8002836 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8001f6e:	bf00      	nop
 8001f70:	3738      	adds	r7, #56	@ 0x38
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	50050000 	.word	0x50050000
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	40021000 	.word	0x40021000
 8001f84:	40020000 	.word	0x40020000
 8001f88:	40020800 	.word	0x40020800
 8001f8c:	40020c00 	.word	0x40020c00
 8001f90:	40021800 	.word	0x40021800
 8001f94:	2001ec70 	.word	0x2001ec70
 8001f98:	40026428 	.word	0x40026428

08001f9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b08a      	sub	sp, #40	@ 0x28
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa4:	f107 0314 	add.w	r3, r7, #20
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	605a      	str	r2, [r3, #4]
 8001fae:	609a      	str	r2, [r3, #8]
 8001fb0:	60da      	str	r2, [r3, #12]
 8001fb2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a19      	ldr	r2, [pc, #100]	@ (8002020 <HAL_I2C_MspInit+0x84>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d12b      	bne.n	8002016 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	613b      	str	r3, [r7, #16]
 8001fc2:	4b18      	ldr	r3, [pc, #96]	@ (8002024 <HAL_I2C_MspInit+0x88>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc6:	4a17      	ldr	r2, [pc, #92]	@ (8002024 <HAL_I2C_MspInit+0x88>)
 8001fc8:	f043 0320 	orr.w	r3, r3, #32
 8001fcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fce:	4b15      	ldr	r3, [pc, #84]	@ (8002024 <HAL_I2C_MspInit+0x88>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd2:	f003 0320 	and.w	r3, r3, #32
 8001fd6:	613b      	str	r3, [r7, #16]
 8001fd8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fde:	2312      	movs	r3, #18
 8001fe0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001fea:	2304      	movs	r3, #4
 8001fec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001fee:	f107 0314 	add.w	r3, r7, #20
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	480c      	ldr	r0, [pc, #48]	@ (8002028 <HAL_I2C_MspInit+0x8c>)
 8001ff6:	f002 fc8b 	bl	8004910 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	60fb      	str	r3, [r7, #12]
 8001ffe:	4b09      	ldr	r3, [pc, #36]	@ (8002024 <HAL_I2C_MspInit+0x88>)
 8002000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002002:	4a08      	ldr	r2, [pc, #32]	@ (8002024 <HAL_I2C_MspInit+0x88>)
 8002004:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002008:	6413      	str	r3, [r2, #64]	@ 0x40
 800200a:	4b06      	ldr	r3, [pc, #24]	@ (8002024 <HAL_I2C_MspInit+0x88>)
 800200c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800200e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002012:	60fb      	str	r3, [r7, #12]
 8002014:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002016:	bf00      	nop
 8002018:	3728      	adds	r7, #40	@ 0x28
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	40005800 	.word	0x40005800
 8002024:	40023800 	.word	0x40023800
 8002028:	40021400 	.word	0x40021400

0800202c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800202c:	b480      	push	{r7}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a15      	ldr	r2, [pc, #84]	@ (8002090 <HAL_TIM_PWM_MspInit+0x64>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d10e      	bne.n	800205c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800203e:	2300      	movs	r3, #0
 8002040:	60fb      	str	r3, [r7, #12]
 8002042:	4b14      	ldr	r3, [pc, #80]	@ (8002094 <HAL_TIM_PWM_MspInit+0x68>)
 8002044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002046:	4a13      	ldr	r2, [pc, #76]	@ (8002094 <HAL_TIM_PWM_MspInit+0x68>)
 8002048:	f043 0301 	orr.w	r3, r3, #1
 800204c:	6453      	str	r3, [r2, #68]	@ 0x44
 800204e:	4b11      	ldr	r3, [pc, #68]	@ (8002094 <HAL_TIM_PWM_MspInit+0x68>)
 8002050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	60fb      	str	r3, [r7, #12]
 8002058:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800205a:	e012      	b.n	8002082 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM2)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002064:	d10d      	bne.n	8002082 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002066:	2300      	movs	r3, #0
 8002068:	60bb      	str	r3, [r7, #8]
 800206a:	4b0a      	ldr	r3, [pc, #40]	@ (8002094 <HAL_TIM_PWM_MspInit+0x68>)
 800206c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800206e:	4a09      	ldr	r2, [pc, #36]	@ (8002094 <HAL_TIM_PWM_MspInit+0x68>)
 8002070:	f043 0301 	orr.w	r3, r3, #1
 8002074:	6413      	str	r3, [r2, #64]	@ 0x40
 8002076:	4b07      	ldr	r3, [pc, #28]	@ (8002094 <HAL_TIM_PWM_MspInit+0x68>)
 8002078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	60bb      	str	r3, [r7, #8]
 8002080:	68bb      	ldr	r3, [r7, #8]
}
 8002082:	bf00      	nop
 8002084:	3714      	adds	r7, #20
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	40010000 	.word	0x40010000
 8002094:	40023800 	.word	0x40023800

08002098 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a0e      	ldr	r2, [pc, #56]	@ (80020e0 <HAL_TIM_Base_MspInit+0x48>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d115      	bne.n	80020d6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80020aa:	2300      	movs	r3, #0
 80020ac:	60fb      	str	r3, [r7, #12]
 80020ae:	4b0d      	ldr	r3, [pc, #52]	@ (80020e4 <HAL_TIM_Base_MspInit+0x4c>)
 80020b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b2:	4a0c      	ldr	r2, [pc, #48]	@ (80020e4 <HAL_TIM_Base_MspInit+0x4c>)
 80020b4:	f043 0310 	orr.w	r3, r3, #16
 80020b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80020ba:	4b0a      	ldr	r3, [pc, #40]	@ (80020e4 <HAL_TIM_Base_MspInit+0x4c>)
 80020bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020be:	f003 0310 	and.w	r3, r3, #16
 80020c2:	60fb      	str	r3, [r7, #12]
 80020c4:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80020c6:	2200      	movs	r2, #0
 80020c8:	2100      	movs	r1, #0
 80020ca:	2036      	movs	r0, #54	@ 0x36
 80020cc:	f000 fb97 	bl	80027fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80020d0:	2036      	movs	r0, #54	@ 0x36
 80020d2:	f000 fbb0 	bl	8002836 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80020d6:	bf00      	nop
 80020d8:	3710      	adds	r7, #16
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	40001000 	.word	0x40001000
 80020e4:	40023800 	.word	0x40023800

080020e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b08a      	sub	sp, #40	@ 0x28
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f0:	f107 0314 	add.w	r3, r7, #20
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]
 80020f8:	605a      	str	r2, [r3, #4]
 80020fa:	609a      	str	r2, [r3, #8]
 80020fc:	60da      	str	r2, [r3, #12]
 80020fe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a25      	ldr	r2, [pc, #148]	@ (800219c <HAL_TIM_MspPostInit+0xb4>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d11f      	bne.n	800214a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800210a:	2300      	movs	r3, #0
 800210c:	613b      	str	r3, [r7, #16]
 800210e:	4b24      	ldr	r3, [pc, #144]	@ (80021a0 <HAL_TIM_MspPostInit+0xb8>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002112:	4a23      	ldr	r2, [pc, #140]	@ (80021a0 <HAL_TIM_MspPostInit+0xb8>)
 8002114:	f043 0310 	orr.w	r3, r3, #16
 8002118:	6313      	str	r3, [r2, #48]	@ 0x30
 800211a:	4b21      	ldr	r3, [pc, #132]	@ (80021a0 <HAL_TIM_MspPostInit+0xb8>)
 800211c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800211e:	f003 0310 	and.w	r3, r3, #16
 8002122:	613b      	str	r3, [r7, #16]
 8002124:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002126:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800212a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800212c:	2302      	movs	r3, #2
 800212e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002130:	2300      	movs	r3, #0
 8002132:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002134:	2300      	movs	r3, #0
 8002136:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002138:	2301      	movs	r3, #1
 800213a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800213c:	f107 0314 	add.w	r3, r7, #20
 8002140:	4619      	mov	r1, r3
 8002142:	4818      	ldr	r0, [pc, #96]	@ (80021a4 <HAL_TIM_MspPostInit+0xbc>)
 8002144:	f002 fbe4 	bl	8004910 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002148:	e023      	b.n	8002192 <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM2)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002152:	d11e      	bne.n	8002192 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002154:	2300      	movs	r3, #0
 8002156:	60fb      	str	r3, [r7, #12]
 8002158:	4b11      	ldr	r3, [pc, #68]	@ (80021a0 <HAL_TIM_MspPostInit+0xb8>)
 800215a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800215c:	4a10      	ldr	r2, [pc, #64]	@ (80021a0 <HAL_TIM_MspPostInit+0xb8>)
 800215e:	f043 0302 	orr.w	r3, r3, #2
 8002162:	6313      	str	r3, [r2, #48]	@ 0x30
 8002164:	4b0e      	ldr	r3, [pc, #56]	@ (80021a0 <HAL_TIM_MspPostInit+0xb8>)
 8002166:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002168:	f003 0302 	and.w	r3, r3, #2
 800216c:	60fb      	str	r3, [r7, #12]
 800216e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENBA_Pin|ENBN_Pin;
 8002170:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002174:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002176:	2302      	movs	r3, #2
 8002178:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217a:	2300      	movs	r3, #0
 800217c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800217e:	2300      	movs	r3, #0
 8002180:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002182:	2301      	movs	r3, #1
 8002184:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002186:	f107 0314 	add.w	r3, r7, #20
 800218a:	4619      	mov	r1, r3
 800218c:	4806      	ldr	r0, [pc, #24]	@ (80021a8 <HAL_TIM_MspPostInit+0xc0>)
 800218e:	f002 fbbf 	bl	8004910 <HAL_GPIO_Init>
}
 8002192:	bf00      	nop
 8002194:	3728      	adds	r7, #40	@ 0x28
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	40010000 	.word	0x40010000
 80021a0:	40023800 	.word	0x40023800
 80021a4:	40021000 	.word	0x40021000
 80021a8:	40020400 	.word	0x40020400

080021ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b08a      	sub	sp, #40	@ 0x28
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b4:	f107 0314 	add.w	r3, r7, #20
 80021b8:	2200      	movs	r2, #0
 80021ba:	601a      	str	r2, [r3, #0]
 80021bc:	605a      	str	r2, [r3, #4]
 80021be:	609a      	str	r2, [r3, #8]
 80021c0:	60da      	str	r2, [r3, #12]
 80021c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a39      	ldr	r2, [pc, #228]	@ (80022b0 <HAL_UART_MspInit+0x104>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d16b      	bne.n	80022a6 <HAL_UART_MspInit+0xfa>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80021ce:	2300      	movs	r3, #0
 80021d0:	613b      	str	r3, [r7, #16]
 80021d2:	4b38      	ldr	r3, [pc, #224]	@ (80022b4 <HAL_UART_MspInit+0x108>)
 80021d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d6:	4a37      	ldr	r2, [pc, #220]	@ (80022b4 <HAL_UART_MspInit+0x108>)
 80021d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80021de:	4b35      	ldr	r3, [pc, #212]	@ (80022b4 <HAL_UART_MspInit+0x108>)
 80021e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80021e6:	613b      	str	r3, [r7, #16]
 80021e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021ea:	2300      	movs	r3, #0
 80021ec:	60fb      	str	r3, [r7, #12]
 80021ee:	4b31      	ldr	r3, [pc, #196]	@ (80022b4 <HAL_UART_MspInit+0x108>)
 80021f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f2:	4a30      	ldr	r2, [pc, #192]	@ (80022b4 <HAL_UART_MspInit+0x108>)
 80021f4:	f043 0308 	orr.w	r3, r3, #8
 80021f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80021fa:	4b2e      	ldr	r3, [pc, #184]	@ (80022b4 <HAL_UART_MspInit+0x108>)
 80021fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021fe:	f003 0308 	and.w	r3, r3, #8
 8002202:	60fb      	str	r3, [r7, #12]
 8002204:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002206:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800220a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800220c:	2302      	movs	r3, #2
 800220e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002210:	2300      	movs	r3, #0
 8002212:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002214:	2303      	movs	r3, #3
 8002216:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002218:	2307      	movs	r3, #7
 800221a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800221c:	f107 0314 	add.w	r3, r7, #20
 8002220:	4619      	mov	r1, r3
 8002222:	4825      	ldr	r0, [pc, #148]	@ (80022b8 <HAL_UART_MspInit+0x10c>)
 8002224:	f002 fb74 	bl	8004910 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8002228:	4b24      	ldr	r3, [pc, #144]	@ (80022bc <HAL_UART_MspInit+0x110>)
 800222a:	4a25      	ldr	r2, [pc, #148]	@ (80022c0 <HAL_UART_MspInit+0x114>)
 800222c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 800222e:	4b23      	ldr	r3, [pc, #140]	@ (80022bc <HAL_UART_MspInit+0x110>)
 8002230:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002234:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002236:	4b21      	ldr	r3, [pc, #132]	@ (80022bc <HAL_UART_MspInit+0x110>)
 8002238:	2240      	movs	r2, #64	@ 0x40
 800223a:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800223c:	4b1f      	ldr	r3, [pc, #124]	@ (80022bc <HAL_UART_MspInit+0x110>)
 800223e:	2200      	movs	r2, #0
 8002240:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002242:	4b1e      	ldr	r3, [pc, #120]	@ (80022bc <HAL_UART_MspInit+0x110>)
 8002244:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002248:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800224a:	4b1c      	ldr	r3, [pc, #112]	@ (80022bc <HAL_UART_MspInit+0x110>)
 800224c:	2200      	movs	r2, #0
 800224e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002250:	4b1a      	ldr	r3, [pc, #104]	@ (80022bc <HAL_UART_MspInit+0x110>)
 8002252:	2200      	movs	r2, #0
 8002254:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002256:	4b19      	ldr	r3, [pc, #100]	@ (80022bc <HAL_UART_MspInit+0x110>)
 8002258:	2200      	movs	r2, #0
 800225a:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800225c:	4b17      	ldr	r3, [pc, #92]	@ (80022bc <HAL_UART_MspInit+0x110>)
 800225e:	2200      	movs	r2, #0
 8002260:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002262:	4b16      	ldr	r3, [pc, #88]	@ (80022bc <HAL_UART_MspInit+0x110>)
 8002264:	2204      	movs	r2, #4
 8002266:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_usart3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002268:	4b14      	ldr	r3, [pc, #80]	@ (80022bc <HAL_UART_MspInit+0x110>)
 800226a:	2203      	movs	r2, #3
 800226c:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800226e:	4b13      	ldr	r3, [pc, #76]	@ (80022bc <HAL_UART_MspInit+0x110>)
 8002270:	2200      	movs	r2, #0
 8002272:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_usart3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002274:	4b11      	ldr	r3, [pc, #68]	@ (80022bc <HAL_UART_MspInit+0x110>)
 8002276:	2200      	movs	r2, #0
 8002278:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800227a:	4810      	ldr	r0, [pc, #64]	@ (80022bc <HAL_UART_MspInit+0x110>)
 800227c:	f000 fdbe 	bl	8002dfc <HAL_DMA_Init>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <HAL_UART_MspInit+0xde>
    {
      Error_Handler();
 8002286:	f7ff fb63 	bl	8001950 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a0b      	ldr	r2, [pc, #44]	@ (80022bc <HAL_UART_MspInit+0x110>)
 800228e:	635a      	str	r2, [r3, #52]	@ 0x34
 8002290:	4a0a      	ldr	r2, [pc, #40]	@ (80022bc <HAL_UART_MspInit+0x110>)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002296:	2200      	movs	r2, #0
 8002298:	2100      	movs	r1, #0
 800229a:	2027      	movs	r0, #39	@ 0x27
 800229c:	f000 faaf 	bl	80027fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80022a0:	2027      	movs	r0, #39	@ 0x27
 80022a2:	f000 fac8 	bl	8002836 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80022a6:	bf00      	nop
 80022a8:	3728      	adds	r7, #40	@ 0x28
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	40004800 	.word	0x40004800
 80022b4:	40023800 	.word	0x40023800
 80022b8:	40020c00 	.word	0x40020c00
 80022bc:	2001edfc 	.word	0x2001edfc
 80022c0:	40026058 	.word	0x40026058

080022c4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b0a0      	sub	sp, #128	@ 0x80
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022cc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80022d0:	2200      	movs	r2, #0
 80022d2:	601a      	str	r2, [r3, #0]
 80022d4:	605a      	str	r2, [r3, #4]
 80022d6:	609a      	str	r2, [r3, #8]
 80022d8:	60da      	str	r2, [r3, #12]
 80022da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022dc:	f107 0310 	add.w	r3, r7, #16
 80022e0:	225c      	movs	r2, #92	@ 0x5c
 80022e2:	2100      	movs	r1, #0
 80022e4:	4618      	mov	r0, r3
 80022e6:	f007 fe95 	bl	800a014 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80022f2:	d14e      	bne.n	8002392 <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80022f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80022f8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80022fa:	2300      	movs	r3, #0
 80022fc:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022fe:	f107 0310 	add.w	r3, r7, #16
 8002302:	4618      	mov	r0, r3
 8002304:	f003 fee8 	bl	80060d8 <HAL_RCCEx_PeriphCLKConfig>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800230e:	f7ff fb1f 	bl	8001950 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002312:	2300      	movs	r3, #0
 8002314:	60fb      	str	r3, [r7, #12]
 8002316:	4b21      	ldr	r3, [pc, #132]	@ (800239c <HAL_PCD_MspInit+0xd8>)
 8002318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800231a:	4a20      	ldr	r2, [pc, #128]	@ (800239c <HAL_PCD_MspInit+0xd8>)
 800231c:	f043 0301 	orr.w	r3, r3, #1
 8002320:	6313      	str	r3, [r2, #48]	@ 0x30
 8002322:	4b1e      	ldr	r3, [pc, #120]	@ (800239c <HAL_PCD_MspInit+0xd8>)
 8002324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	60fb      	str	r3, [r7, #12]
 800232c:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800232e:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8002332:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002334:	2302      	movs	r3, #2
 8002336:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002338:	2300      	movs	r3, #0
 800233a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800233c:	2303      	movs	r3, #3
 800233e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002340:	230a      	movs	r3, #10
 8002342:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002344:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002348:	4619      	mov	r1, r3
 800234a:	4815      	ldr	r0, [pc, #84]	@ (80023a0 <HAL_PCD_MspInit+0xdc>)
 800234c:	f002 fae0 	bl	8004910 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002350:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002354:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002356:	2300      	movs	r3, #0
 8002358:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235a:	2300      	movs	r3, #0
 800235c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800235e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002362:	4619      	mov	r1, r3
 8002364:	480e      	ldr	r0, [pc, #56]	@ (80023a0 <HAL_PCD_MspInit+0xdc>)
 8002366:	f002 fad3 	bl	8004910 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800236a:	4b0c      	ldr	r3, [pc, #48]	@ (800239c <HAL_PCD_MspInit+0xd8>)
 800236c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800236e:	4a0b      	ldr	r2, [pc, #44]	@ (800239c <HAL_PCD_MspInit+0xd8>)
 8002370:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002374:	6353      	str	r3, [r2, #52]	@ 0x34
 8002376:	2300      	movs	r3, #0
 8002378:	60bb      	str	r3, [r7, #8]
 800237a:	4b08      	ldr	r3, [pc, #32]	@ (800239c <HAL_PCD_MspInit+0xd8>)
 800237c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800237e:	4a07      	ldr	r2, [pc, #28]	@ (800239c <HAL_PCD_MspInit+0xd8>)
 8002380:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002384:	6453      	str	r3, [r2, #68]	@ 0x44
 8002386:	4b05      	ldr	r3, [pc, #20]	@ (800239c <HAL_PCD_MspInit+0xd8>)
 8002388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800238a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800238e:	60bb      	str	r3, [r7, #8]
 8002390:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002392:	bf00      	nop
 8002394:	3780      	adds	r7, #128	@ 0x80
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	40023800 	.word	0x40023800
 80023a0:	40020000 	.word	0x40020000

080023a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023a8:	bf00      	nop
 80023aa:	e7fd      	b.n	80023a8 <NMI_Handler+0x4>

080023ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023b0:	bf00      	nop
 80023b2:	e7fd      	b.n	80023b0 <HardFault_Handler+0x4>

080023b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023b8:	bf00      	nop
 80023ba:	e7fd      	b.n	80023b8 <MemManage_Handler+0x4>

080023bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023c0:	bf00      	nop
 80023c2:	e7fd      	b.n	80023c0 <BusFault_Handler+0x4>

080023c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023c8:	bf00      	nop
 80023ca:	e7fd      	b.n	80023c8 <UsageFault_Handler+0x4>

080023cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023d0:	bf00      	nop
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr

080023da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023da:	b480      	push	{r7}
 80023dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023de:	bf00      	nop
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023ec:	bf00      	nop
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr

080023f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023fa:	f000 f8e1 	bl	80025c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023fe:	bf00      	nop
 8002400:	bd80      	pop	{r7, pc}
	...

08002404 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002408:	4802      	ldr	r0, [pc, #8]	@ (8002414 <DMA1_Stream3_IRQHandler+0x10>)
 800240a:	f000 fe8f 	bl	800312c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800240e:	bf00      	nop
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	2001edfc 	.word	0x2001edfc

08002418 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	if (__HAL_UART_GET_IT_SOURCE(&huart3, UART_IT_TC)) {
 800241c:	4b08      	ldr	r3, [pc, #32]	@ (8002440 <USART3_IRQHandler+0x28>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002426:	2b00      	cmp	r3, #0
 8002428:	d004      	beq.n	8002434 <USART3_IRQHandler+0x1c>
    HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800242a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800242e:	4805      	ldr	r0, [pc, #20]	@ (8002444 <USART3_IRQHandler+0x2c>)
 8002430:	f002 fc1b 	bl	8004c6a <HAL_GPIO_TogglePin>
  }
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002434:	4802      	ldr	r0, [pc, #8]	@ (8002440 <USART3_IRQHandler+0x28>)
 8002436:	f005 fe83 	bl	8008140 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800243a:	bf00      	nop
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	200001f0 	.word	0x200001f0
 8002444:	40020400 	.word	0x40020400

08002448 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 800244c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002450:	f002 fc26 	bl	8004ca0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002454:	bf00      	nop
 8002456:	bd80      	pop	{r7, pc}

08002458 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800245c:	4802      	ldr	r0, [pc, #8]	@ (8002468 <TIM6_DAC_IRQHandler+0x10>)
 800245e:	f004 ff99 	bl	8007394 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002462:	bf00      	nop
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	2001edb4 	.word	0x2001edb4

0800246c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */
	dma_flag = 1;
 8002470:	4b05      	ldr	r3, [pc, #20]	@ (8002488 <DMA2_Stream1_IRQHandler+0x1c>)
 8002472:	2201      	movs	r2, #1
 8002474:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8002476:	4805      	ldr	r0, [pc, #20]	@ (800248c <DMA2_Stream1_IRQHandler+0x20>)
 8002478:	f000 fe58 	bl	800312c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */
  dma_flag = 1;
 800247c:	4b02      	ldr	r3, [pc, #8]	@ (8002488 <DMA2_Stream1_IRQHandler+0x1c>)
 800247e:	2201      	movs	r2, #1
 8002480:	701a      	strb	r2, [r3, #0]

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002482:	bf00      	nop
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	2001eba0 	.word	0x2001eba0
 800248c:	2001ec70 	.word	0x2001ec70

08002490 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */
//	  dma_flag = 1;

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8002494:	4802      	ldr	r0, [pc, #8]	@ (80024a0 <DCMI_IRQHandler+0x10>)
 8002496:	f000 fae5 	bl	8002a64 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */
  // Additional code if needed
  /* USER CODE END DCMI_IRQn 1 */
}
 800249a:	bf00      	nop
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	2001ec20 	.word	0x2001ec20

080024a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024a8:	4b06      	ldr	r3, [pc, #24]	@ (80024c4 <SystemInit+0x20>)
 80024aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024ae:	4a05      	ldr	r2, [pc, #20]	@ (80024c4 <SystemInit+0x20>)
 80024b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80024b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024b8:	bf00      	nop
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	e000ed00 	.word	0xe000ed00

080024c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80024c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002500 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024cc:	480d      	ldr	r0, [pc, #52]	@ (8002504 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80024ce:	490e      	ldr	r1, [pc, #56]	@ (8002508 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80024d0:	4a0e      	ldr	r2, [pc, #56]	@ (800250c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80024d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024d4:	e002      	b.n	80024dc <LoopCopyDataInit>

080024d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024da:	3304      	adds	r3, #4

080024dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024e0:	d3f9      	bcc.n	80024d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024e2:	4a0b      	ldr	r2, [pc, #44]	@ (8002510 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80024e4:	4c0b      	ldr	r4, [pc, #44]	@ (8002514 <LoopFillZerobss+0x26>)
  movs r3, #0
 80024e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024e8:	e001      	b.n	80024ee <LoopFillZerobss>

080024ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024ec:	3204      	adds	r2, #4

080024ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024f0:	d3fb      	bcc.n	80024ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80024f2:	f7ff ffd7 	bl	80024a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024f6:	f007 fd99 	bl	800a02c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024fa:	f7fe fdc1 	bl	8001080 <main>
  bx  lr    
 80024fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002500:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002504:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002508:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800250c:	0800c7e8 	.word	0x0800c7e8
  ldr r2, =_sbss
 8002510:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002514:	2001f4bc 	.word	0x2001f4bc

08002518 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002518:	e7fe      	b.n	8002518 <ADC_IRQHandler>
	...

0800251c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002520:	4b0e      	ldr	r3, [pc, #56]	@ (800255c <HAL_Init+0x40>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a0d      	ldr	r2, [pc, #52]	@ (800255c <HAL_Init+0x40>)
 8002526:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800252a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800252c:	4b0b      	ldr	r3, [pc, #44]	@ (800255c <HAL_Init+0x40>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a0a      	ldr	r2, [pc, #40]	@ (800255c <HAL_Init+0x40>)
 8002532:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002536:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002538:	4b08      	ldr	r3, [pc, #32]	@ (800255c <HAL_Init+0x40>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a07      	ldr	r2, [pc, #28]	@ (800255c <HAL_Init+0x40>)
 800253e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002542:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002544:	2003      	movs	r0, #3
 8002546:	f000 f94f 	bl	80027e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800254a:	2000      	movs	r0, #0
 800254c:	f000 f808 	bl	8002560 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002550:	f7ff fbea 	bl	8001d28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	40023c00 	.word	0x40023c00

08002560 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002568:	4b12      	ldr	r3, [pc, #72]	@ (80025b4 <HAL_InitTick+0x54>)
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	4b12      	ldr	r3, [pc, #72]	@ (80025b8 <HAL_InitTick+0x58>)
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	4619      	mov	r1, r3
 8002572:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002576:	fbb3 f3f1 	udiv	r3, r3, r1
 800257a:	fbb2 f3f3 	udiv	r3, r2, r3
 800257e:	4618      	mov	r0, r3
 8002580:	f000 f967 	bl	8002852 <HAL_SYSTICK_Config>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d001      	beq.n	800258e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e00e      	b.n	80025ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2b0f      	cmp	r3, #15
 8002592:	d80a      	bhi.n	80025aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002594:	2200      	movs	r2, #0
 8002596:	6879      	ldr	r1, [r7, #4]
 8002598:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800259c:	f000 f92f 	bl	80027fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025a0:	4a06      	ldr	r2, [pc, #24]	@ (80025bc <HAL_InitTick+0x5c>)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025a6:	2300      	movs	r3, #0
 80025a8:	e000      	b.n	80025ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3708      	adds	r7, #8
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	20000000 	.word	0x20000000
 80025b8:	20000008 	.word	0x20000008
 80025bc:	20000004 	.word	0x20000004

080025c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025c4:	4b06      	ldr	r3, [pc, #24]	@ (80025e0 <HAL_IncTick+0x20>)
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	461a      	mov	r2, r3
 80025ca:	4b06      	ldr	r3, [pc, #24]	@ (80025e4 <HAL_IncTick+0x24>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4413      	add	r3, r2
 80025d0:	4a04      	ldr	r2, [pc, #16]	@ (80025e4 <HAL_IncTick+0x24>)
 80025d2:	6013      	str	r3, [r2, #0]
}
 80025d4:	bf00      	nop
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	20000008 	.word	0x20000008
 80025e4:	2001f368 	.word	0x2001f368

080025e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  return uwTick;
 80025ec:	4b03      	ldr	r3, [pc, #12]	@ (80025fc <HAL_GetTick+0x14>)
 80025ee:	681b      	ldr	r3, [r3, #0]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	2001f368 	.word	0x2001f368

08002600 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002608:	f7ff ffee 	bl	80025e8 <HAL_GetTick>
 800260c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002618:	d005      	beq.n	8002626 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800261a:	4b0a      	ldr	r3, [pc, #40]	@ (8002644 <HAL_Delay+0x44>)
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	461a      	mov	r2, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	4413      	add	r3, r2
 8002624:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002626:	bf00      	nop
 8002628:	f7ff ffde 	bl	80025e8 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	429a      	cmp	r2, r3
 8002636:	d8f7      	bhi.n	8002628 <HAL_Delay+0x28>
  {
  }
}
 8002638:	bf00      	nop
 800263a:	bf00      	nop
 800263c:	3710      	adds	r7, #16
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	20000008 	.word	0x20000008

08002648 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002648:	b480      	push	{r7}
 800264a:	b085      	sub	sp, #20
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f003 0307 	and.w	r3, r3, #7
 8002656:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002658:	4b0c      	ldr	r3, [pc, #48]	@ (800268c <__NVIC_SetPriorityGrouping+0x44>)
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800265e:	68ba      	ldr	r2, [r7, #8]
 8002660:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002664:	4013      	ands	r3, r2
 8002666:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002670:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002674:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002678:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800267a:	4a04      	ldr	r2, [pc, #16]	@ (800268c <__NVIC_SetPriorityGrouping+0x44>)
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	60d3      	str	r3, [r2, #12]
}
 8002680:	bf00      	nop
 8002682:	3714      	adds	r7, #20
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr
 800268c:	e000ed00 	.word	0xe000ed00

08002690 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002694:	4b04      	ldr	r3, [pc, #16]	@ (80026a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	0a1b      	lsrs	r3, r3, #8
 800269a:	f003 0307 	and.w	r3, r3, #7
}
 800269e:	4618      	mov	r0, r3
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr
 80026a8:	e000ed00 	.word	0xe000ed00

080026ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	4603      	mov	r3, r0
 80026b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	db0b      	blt.n	80026d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026be:	79fb      	ldrb	r3, [r7, #7]
 80026c0:	f003 021f 	and.w	r2, r3, #31
 80026c4:	4907      	ldr	r1, [pc, #28]	@ (80026e4 <__NVIC_EnableIRQ+0x38>)
 80026c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ca:	095b      	lsrs	r3, r3, #5
 80026cc:	2001      	movs	r0, #1
 80026ce:	fa00 f202 	lsl.w	r2, r0, r2
 80026d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026d6:	bf00      	nop
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	e000e100 	.word	0xe000e100

080026e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	4603      	mov	r3, r0
 80026f0:	6039      	str	r1, [r7, #0]
 80026f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	db0a      	blt.n	8002712 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	b2da      	uxtb	r2, r3
 8002700:	490c      	ldr	r1, [pc, #48]	@ (8002734 <__NVIC_SetPriority+0x4c>)
 8002702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002706:	0112      	lsls	r2, r2, #4
 8002708:	b2d2      	uxtb	r2, r2
 800270a:	440b      	add	r3, r1
 800270c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002710:	e00a      	b.n	8002728 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	b2da      	uxtb	r2, r3
 8002716:	4908      	ldr	r1, [pc, #32]	@ (8002738 <__NVIC_SetPriority+0x50>)
 8002718:	79fb      	ldrb	r3, [r7, #7]
 800271a:	f003 030f 	and.w	r3, r3, #15
 800271e:	3b04      	subs	r3, #4
 8002720:	0112      	lsls	r2, r2, #4
 8002722:	b2d2      	uxtb	r2, r2
 8002724:	440b      	add	r3, r1
 8002726:	761a      	strb	r2, [r3, #24]
}
 8002728:	bf00      	nop
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr
 8002734:	e000e100 	.word	0xe000e100
 8002738:	e000ed00 	.word	0xe000ed00

0800273c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800273c:	b480      	push	{r7}
 800273e:	b089      	sub	sp, #36	@ 0x24
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f003 0307 	and.w	r3, r3, #7
 800274e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	f1c3 0307 	rsb	r3, r3, #7
 8002756:	2b04      	cmp	r3, #4
 8002758:	bf28      	it	cs
 800275a:	2304      	movcs	r3, #4
 800275c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	3304      	adds	r3, #4
 8002762:	2b06      	cmp	r3, #6
 8002764:	d902      	bls.n	800276c <NVIC_EncodePriority+0x30>
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	3b03      	subs	r3, #3
 800276a:	e000      	b.n	800276e <NVIC_EncodePriority+0x32>
 800276c:	2300      	movs	r3, #0
 800276e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002770:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	fa02 f303 	lsl.w	r3, r2, r3
 800277a:	43da      	mvns	r2, r3
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	401a      	ands	r2, r3
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002784:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	fa01 f303 	lsl.w	r3, r1, r3
 800278e:	43d9      	mvns	r1, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002794:	4313      	orrs	r3, r2
         );
}
 8002796:	4618      	mov	r0, r3
 8002798:	3724      	adds	r7, #36	@ 0x24
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
	...

080027a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	3b01      	subs	r3, #1
 80027b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027b4:	d301      	bcc.n	80027ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027b6:	2301      	movs	r3, #1
 80027b8:	e00f      	b.n	80027da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027ba:	4a0a      	ldr	r2, [pc, #40]	@ (80027e4 <SysTick_Config+0x40>)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	3b01      	subs	r3, #1
 80027c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027c2:	210f      	movs	r1, #15
 80027c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80027c8:	f7ff ff8e 	bl	80026e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027cc:	4b05      	ldr	r3, [pc, #20]	@ (80027e4 <SysTick_Config+0x40>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027d2:	4b04      	ldr	r3, [pc, #16]	@ (80027e4 <SysTick_Config+0x40>)
 80027d4:	2207      	movs	r2, #7
 80027d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	e000e010 	.word	0xe000e010

080027e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f7ff ff29 	bl	8002648 <__NVIC_SetPriorityGrouping>
}
 80027f6:	bf00      	nop
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027fe:	b580      	push	{r7, lr}
 8002800:	b086      	sub	sp, #24
 8002802:	af00      	add	r7, sp, #0
 8002804:	4603      	mov	r3, r0
 8002806:	60b9      	str	r1, [r7, #8]
 8002808:	607a      	str	r2, [r7, #4]
 800280a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800280c:	2300      	movs	r3, #0
 800280e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002810:	f7ff ff3e 	bl	8002690 <__NVIC_GetPriorityGrouping>
 8002814:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	68b9      	ldr	r1, [r7, #8]
 800281a:	6978      	ldr	r0, [r7, #20]
 800281c:	f7ff ff8e 	bl	800273c <NVIC_EncodePriority>
 8002820:	4602      	mov	r2, r0
 8002822:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002826:	4611      	mov	r1, r2
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff ff5d 	bl	80026e8 <__NVIC_SetPriority>
}
 800282e:	bf00      	nop
 8002830:	3718      	adds	r7, #24
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	b082      	sub	sp, #8
 800283a:	af00      	add	r7, sp, #0
 800283c:	4603      	mov	r3, r0
 800283e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002844:	4618      	mov	r0, r3
 8002846:	f7ff ff31 	bl	80026ac <__NVIC_EnableIRQ>
}
 800284a:	bf00      	nop
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002852:	b580      	push	{r7, lr}
 8002854:	b082      	sub	sp, #8
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f7ff ffa2 	bl	80027a4 <SysTick_Config>
 8002860:	4603      	mov	r3, r0
}
 8002862:	4618      	mov	r0, r3
 8002864:	3708      	adds	r7, #8
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
	...

0800286c <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef* hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b088      	sub	sp, #32
 8002870:	af02      	add	r7, sp, #8
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	607a      	str	r2, [r7, #4]
 8002878:	603b      	str	r3, [r7, #0]
  /* Initialize the second memory address */
  uint32_t SecondMemAddress = 0U;
 800287a:	2300      	movs	r3, #0
 800287c:	617b      	str	r3, [r7, #20]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002884:	2b01      	cmp	r3, #1
 8002886:	d101      	bne.n	800288c <HAL_DCMI_Start_DMA+0x20>
 8002888:	2302      	movs	r3, #2
 800288a:	e086      	b.n	800299a <HAL_DCMI_Start_DMA+0x12e>
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2202      	movs	r2, #2
 8002898:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80028aa:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f022 0202 	bic.w	r2, r2, #2
 80028ba:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |=  (uint32_t)(DCMI_Mode);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	6819      	ldr	r1, [r3, #0]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68ba      	ldr	r2, [r7, #8]
 80028c8:	430a      	orrs	r2, r1
 80028ca:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028d0:	4a34      	ldr	r2, [pc, #208]	@ (80029a4 <HAL_DCMI_Start_DMA+0x138>)
 80028d2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028d8:	4a33      	ldr	r2, [pc, #204]	@ (80029a8 <HAL_DCMI_Start_DMA+0x13c>)
 80028da:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028e0:	2200      	movs	r2, #0
 80028e2:	651a      	str	r2, [r3, #80]	@ 0x50
  
  /* Reset transfer counters value */ 
  hdcmi->XferCount = 0U;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2200      	movs	r2, #0
 80028e8:	639a      	str	r2, [r3, #56]	@ 0x38
  hdcmi->XferTransferNumber = 0U;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2200      	movs	r2, #0
 80028ee:	641a      	str	r2, [r3, #64]	@ 0x40

  if(Length <= 0xFFFFU)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028f6:	d20a      	bcs.n	800290e <HAL_DCMI_Start_DMA+0xa2>
  {
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	3328      	adds	r3, #40	@ 0x28
 8002902:	4619      	mov	r1, r3
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	f000 fb26 	bl	8002f58 <HAL_DMA_Start_IT>
 800290c:	e038      	b.n	8002980 <HAL_DCMI_Start_DMA+0x114>
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002912:	4a24      	ldr	r2, [pc, #144]	@ (80029a4 <HAL_DCMI_Start_DMA+0x138>)
 8002914:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1U;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2201      	movs	r2, #1
 800291a:	639a      	str	r2, [r3, #56]	@ 0x38
    hdcmi->XferSize = Length;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	683a      	ldr	r2, [r7, #0]
 8002920:	63da      	str	r2, [r3, #60]	@ 0x3c
    hdcmi->pBuffPtr = pData;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Get the number of buffer */
    while(hdcmi->XferSize > 0xFFFFU)
 8002928:	e009      	b.n	800293e <HAL_DCMI_Start_DMA+0xd2>
    {
      hdcmi->XferSize = (hdcmi->XferSize/2U);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800292e:	085a      	lsrs	r2, r3, #1
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	63da      	str	r2, [r3, #60]	@ 0x3c
      hdcmi->XferCount = hdcmi->XferCount*2U;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002938:	005a      	lsls	r2, r3, #1
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	639a      	str	r2, [r3, #56]	@ 0x38
    while(hdcmi->XferSize > 0xFFFFU)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002942:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002946:	d2f0      	bcs.n	800292a <HAL_DCMI_Start_DMA+0xbe>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800294c:	1e9a      	subs	r2, r3, #2
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	639a      	str	r2, [r3, #56]	@ 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U*hdcmi->XferSize));
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	4413      	add	r3, r2
 8002964:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	3328      	adds	r3, #40	@ 0x28
 8002970:	4619      	mov	r1, r3
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002976:	9300      	str	r3, [sp, #0]
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	f000 fe40 	bl	8003600 <HAL_DMAEx_MultiBufferStart_IT>
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f042 0201 	orr.w	r2, r2, #1
 800298e:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Return function status */
  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3718      	adds	r7, #24
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	08002bb1 	.word	0x08002bb1
 80029a8:	08002cdb 	.word	0x08002cdb

080029ac <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef* hdcmi)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = SystemCoreClock / HAL_TIMEOUT_DCMI_STOP;
 80029b4:	4b29      	ldr	r3, [pc, #164]	@ (8002a5c <HAL_DCMI_Stop+0xb0>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	085b      	lsrs	r3, r3, #1
 80029ba:	4a29      	ldr	r2, [pc, #164]	@ (8002a60 <HAL_DCMI_Stop+0xb4>)
 80029bc:	fba2 2303 	umull	r2, r3, r2, r3
 80029c0:	089b      	lsrs	r3, r3, #2
 80029c2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80029c4:	2300      	movs	r3, #0
 80029c6:	73fb      	strb	r3, [r7, #15]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d101      	bne.n	80029d6 <HAL_DCMI_Stop+0x2a>
 80029d2:	2302      	movs	r3, #2
 80029d4:	e03e      	b.n	8002a54 <HAL_DCMI_Stop+0xa8>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2201      	movs	r2, #1
 80029da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2202      	movs	r2, #2
 80029e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f022 0201 	bic.w	r2, r2, #1
 80029f4:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    if (count-- == 0U)
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	1e5a      	subs	r2, r3, #1
 80029fa:	60ba      	str	r2, [r7, #8]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d108      	bne.n	8002a12 <HAL_DCMI_Stop+0x66>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a04:	f043 0220 	orr.w	r2, r3, #32
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	64da      	str	r2, [r3, #76]	@ 0x4c

      status = HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	73fb      	strb	r3, [r7, #15]
      break;
 8002a10:	e006      	b.n	8002a20 <HAL_DCMI_Stop+0x74>
    }
  }
  while((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0301 	and.w	r3, r3, #1
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d1ea      	bne.n	80029f6 <HAL_DCMI_Stop+0x4a>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002a2e:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  HAL_DMA_Abort(hdcmi->DMA_Handle);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a34:	4618      	mov	r0, r3
 8002a36:	f000 fae7 	bl	8003008 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2201      	movs	r2, #1
 8002a46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Return function status */
  return status;
 8002a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3710      	adds	r7, #16
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	20000000 	.word	0x20000000
 8002a60:	92492493 	.word	0x92492493

08002a64 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f003 0304 	and.w	r3, r3, #4
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d016      	beq.n	8002aac <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2204      	movs	r2, #4
 8002a84:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a8a:	f043 0202 	orr.w	r2, r3, #2
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2204      	movs	r2, #4
 8002a96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a9e:	4a2f      	ldr	r2, [pc, #188]	@ (8002b5c <HAL_DCMI_IRQHandler+0xf8>)
 8002aa0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f000 fb1e 	bl	80030e8 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d016      	beq.n	8002ae4 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2202      	movs	r2, #2
 8002abc:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ac2:	f043 0201 	orr.w	r2, r3, #1
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2204      	movs	r2, #4
 8002ace:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ad6:	4a21      	ldr	r2, [pc, #132]	@ (8002b5c <HAL_DCMI_IRQHandler+0xf8>)
 8002ad8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f000 fb02 	bl	80030e8 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f003 0310 	and.w	r3, r3, #16
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d006      	beq.n	8002afc <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2210      	movs	r2, #16
 8002af4:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else  
    HAL_DCMI_LineEventCallback(hdcmi);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 f83c 	bl	8002b74 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */     
  }
  /* VSYNC interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f003 0308 	and.w	r3, r3, #8
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d006      	beq.n	8002b14 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2208      	movs	r2, #8
 8002b0c:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else  
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 f83a 	bl	8002b88 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */ 
  }
  /* FRAME interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d019      	beq.n	8002b52 <HAL_DCMI_IRQHandler+0xee>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0302 	and.w	r3, r3, #2
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d107      	bne.n	8002b3c <HAL_DCMI_IRQHandler+0xd8>
    { 
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68da      	ldr	r2, [r3, #12]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f022 021e 	bic.w	r2, r2, #30
 8002b3a:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	68da      	ldr	r2, [r3, #12]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f022 0201 	bic.w	r2, r2, #1
 8002b4a:	60da      	str	r2, [r3, #12]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else  
    HAL_DCMI_FrameEventCallback(hdcmi);
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f000 f825 	bl	8002b9c <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */      
  }
}
 8002b52:	bf00      	nop
 8002b54:	3710      	adds	r7, #16
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	08002cdb 	.word	0x08002cdb

08002b60 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8002b68:	bf00      	nop
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8002b7c:	bf00      	nop
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 8002b90:	bf00      	nop
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8002ba4:	bf00      	nop
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	60fb      	str	r3, [r7, #12]
 
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bc0:	60bb      	str	r3, [r7, #8]
  
  if(hdcmi->XferCount != 0U)
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d043      	beq.n	8002c52 <DCMI_DMAXferCplt+0xa2>
  {
    /* Update memory 0 address location */
    tmp = ((hdcmi->DMA_Handle->Instance->CR) & DMA_SxCR_CT);
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002bd6:	60fb      	str	r3, [r7, #12]
    if(((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bdc:	f003 0301 	and.w	r3, r3, #1
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d118      	bne.n	8002c16 <DCMI_DMAXferCplt+0x66>
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d015      	beq.n	8002c16 <DCMI_DMAXferCplt+0x66>
    {
      tmp = hdcmi->DMA_Handle->Instance->M0AR;
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY0);
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bfc:	00da      	lsls	r2, r3, #3
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	4413      	add	r3, r2
 8002c02:	2200      	movs	r2, #0
 8002c04:	4619      	mov	r1, r3
 8002c06:	f001 fe43 	bl	8004890 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c0e:	1e5a      	subs	r2, r3, #1
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	639a      	str	r2, [r3, #56]	@ 0x38
 8002c14:	e044      	b.n	8002ca0 <DCMI_DMAXferCplt+0xf0>
    }
    /* Update memory 1 address location */
    else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d13c      	bne.n	8002ca0 <DCMI_DMAXferCplt+0xf0>
    {
      tmp = hdcmi->DMA_Handle->Instance->M1AR;
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY1);
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c38:	00da      	lsls	r2, r3, #3
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	2201      	movs	r2, #1
 8002c40:	4619      	mov	r1, r3
 8002c42:	f001 fe25 	bl	8004890 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c4a:	1e5a      	subs	r2, r3, #1
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	639a      	str	r2, [r3, #56]	@ 0x38
 8002c50:	e026      	b.n	8002ca0 <DCMI_DMAXferCplt+0xf0>
    }
  }
  /* Update memory 0 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) != 0U)
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d006      	beq.n	8002c70 <DCMI_DMAXferCplt+0xc0>
  {
    hdcmi->DMA_Handle->Instance->M0AR = hdcmi->pBuffPtr;
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	68ba      	ldr	r2, [r7, #8]
 8002c6a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002c6c:	60da      	str	r2, [r3, #12]
 8002c6e:	e017      	b.n	8002ca0 <DCMI_DMAXferCplt+0xf0>
  }
  /* Update memory 1 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d10f      	bne.n	8002ca0 <DCMI_DMAXferCplt+0xf0>
  {
    tmp = hdcmi->pBuffPtr;
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c84:	60fb      	str	r3, [r7, #12]
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4U*hdcmi->XferSize));
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c8a:	0099      	lsls	r1, r3, #2
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	440a      	add	r2, r1
 8002c96:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  /* Check if the frame is transferred */
  if(hdcmi->XferCount == hdcmi->XferTransferNumber)
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d112      	bne.n	8002cd2 <DCMI_DMAXferCplt+0x122>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	68da      	ldr	r2, [r3, #12]
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f042 0201 	orr.w	r2, r2, #1
 8002cba:	60da      	str	r2, [r3, #12]
    
    /* When snapshot mode, set dcmi state to ready */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d103      	bne.n	8002cd2 <DCMI_DMAXferCplt+0x122>
    {  
      hdcmi->State= HAL_DCMI_STATE_READY;
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	2201      	movs	r2, #1
 8002cce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }
  }
}
 8002cd2:	bf00      	nop
 8002cd4:	3710      	adds	r7, #16
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b084      	sub	sp, #16
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ce6:	60fb      	str	r3, [r7, #12]
  
  if(hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d003      	beq.n	8002cfa <DCMI_DMAError+0x20>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI error callback*/
    hdcmi->ErrorCallback(hdcmi);
#else  
  HAL_DCMI_ErrorCallback(hdcmi);
 8002cfa:	68f8      	ldr	r0, [r7, #12]
 8002cfc:	f7ff ff30 	bl	8002b60 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */   

}
 8002d00:	bf00      	nop
 8002d02:	3710      	adds	r7, #16
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d101      	bne.n	8002d1a <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e069      	b.n	8002dee <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d109      	bne.n	8002d3a <HAL_DCMI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f7ff f822 	bl	8001d78 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
    HAL_DCMI_MspInit(hdcmi);
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f7ff f81f 	bl	8001d78 <HAL_DCMI_MspInit>
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2202      	movs	r2, #2
 8002d3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	6819      	ldr	r1, [r3, #0]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	4b2a      	ldr	r3, [pc, #168]	@ (8002df8 <HAL_DCMI_Init+0xf0>)
 8002d4e:	400b      	ands	r3, r1
 8002d50:	6013      	str	r3, [r2, #0]
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                           | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                           );
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	6819      	ldr	r1, [r3, #0]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685a      	ldr	r2, [r3, #4]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	695b      	ldr	r3, [r3, #20]
 8002d60:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8002d66:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8002d72:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	699b      	ldr	r3, [r3, #24]
 8002d78:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8002d7e:	431a      	orrs	r2, r3
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                                     | hdcmi->Init.ByteSelectMode |\
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d84:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                     | hdcmi->Init.ByteSelectMode |\
 8002d8a:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d90:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8002d96:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	430a      	orrs	r2, r1
 8002d9e:	601a      	str	r2, [r3, #0]
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                                     );
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	2b10      	cmp	r3, #16
 8002da6:	d112      	bne.n	8002dce <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	7f1b      	ldrb	r3, [r3, #28]
 8002dac:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	7f5b      	ldrb	r3, [r3, #29]
 8002db2:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8002db4:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	7f9b      	ldrb	r3, [r3, #30]
 8002dba:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8002dbc:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_POSITION_ESCR_FEC));
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	7fdb      	ldrb	r3, [r3, #31]
 8002dc4:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8002dca:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8002dcc:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	68da      	ldr	r2, [r3, #12]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f042 021e 	orr.w	r2, r2, #30
 8002ddc:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3708      	adds	r7, #8
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	ffe0f007 	.word	0xffe0f007

08002dfc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b086      	sub	sp, #24
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e04:	2300      	movs	r3, #0
 8002e06:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002e08:	f7ff fbee 	bl	80025e8 <HAL_GetTick>
 8002e0c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d101      	bne.n	8002e18 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e099      	b.n	8002f4c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2202      	movs	r2, #2
 8002e1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f022 0201 	bic.w	r2, r2, #1
 8002e36:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e38:	e00f      	b.n	8002e5a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e3a:	f7ff fbd5 	bl	80025e8 <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	2b05      	cmp	r3, #5
 8002e46:	d908      	bls.n	8002e5a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2220      	movs	r2, #32
 8002e4c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2203      	movs	r2, #3
 8002e52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e078      	b.n	8002f4c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0301 	and.w	r3, r3, #1
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d1e8      	bne.n	8002e3a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e70:	697a      	ldr	r2, [r7, #20]
 8002e72:	4b38      	ldr	r3, [pc, #224]	@ (8002f54 <HAL_DMA_Init+0x158>)
 8002e74:	4013      	ands	r3, r2
 8002e76:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685a      	ldr	r2, [r3, #4]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e86:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	691b      	ldr	r3, [r3, #16]
 8002e8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e92:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e9e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a1b      	ldr	r3, [r3, #32]
 8002ea4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ea6:	697a      	ldr	r2, [r7, #20]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb0:	2b04      	cmp	r3, #4
 8002eb2:	d107      	bne.n	8002ec4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	697a      	ldr	r2, [r7, #20]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	697a      	ldr	r2, [r7, #20]
 8002eca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	f023 0307 	bic.w	r3, r3, #7
 8002eda:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee0:	697a      	ldr	r2, [r7, #20]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eea:	2b04      	cmp	r3, #4
 8002eec:	d117      	bne.n	8002f1e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ef2:	697a      	ldr	r2, [r7, #20]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d00e      	beq.n	8002f1e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f000 fb01 	bl	8003508 <DMA_CheckFifoParam>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d008      	beq.n	8002f1e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2240      	movs	r2, #64	@ 0x40
 8002f10:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2201      	movs	r2, #1
 8002f16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e016      	b.n	8002f4c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	697a      	ldr	r2, [r7, #20]
 8002f24:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 fab8 	bl	800349c <DMA_CalcBaseAndBitshift>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f34:	223f      	movs	r2, #63	@ 0x3f
 8002f36:	409a      	lsls	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2201      	movs	r2, #1
 8002f46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3718      	adds	r7, #24
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	f010803f 	.word	0xf010803f

08002f58 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b086      	sub	sp, #24
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	607a      	str	r2, [r7, #4]
 8002f64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f66:	2300      	movs	r3, #0
 8002f68:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f6e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d101      	bne.n	8002f7e <HAL_DMA_Start_IT+0x26>
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	e040      	b.n	8003000 <HAL_DMA_Start_IT+0xa8>
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2201      	movs	r2, #1
 8002f82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d12f      	bne.n	8002ff2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2202      	movs	r2, #2
 8002f96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	68b9      	ldr	r1, [r7, #8]
 8002fa6:	68f8      	ldr	r0, [r7, #12]
 8002fa8:	f000 fa4a 	bl	8003440 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fb0:	223f      	movs	r2, #63	@ 0x3f
 8002fb2:	409a      	lsls	r2, r3
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f042 0216 	orr.w	r2, r2, #22
 8002fc6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d007      	beq.n	8002fe0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f042 0208 	orr.w	r2, r2, #8
 8002fde:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f042 0201 	orr.w	r2, r2, #1
 8002fee:	601a      	str	r2, [r3, #0]
 8002ff0:	e005      	b.n	8002ffe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002ffa:	2302      	movs	r3, #2
 8002ffc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002ffe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003000:	4618      	mov	r0, r3
 8003002:	3718      	adds	r7, #24
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003014:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003016:	f7ff fae7 	bl	80025e8 <HAL_GetTick>
 800301a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003022:	b2db      	uxtb	r3, r3
 8003024:	2b02      	cmp	r3, #2
 8003026:	d008      	beq.n	800303a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2280      	movs	r2, #128	@ 0x80
 800302c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e052      	b.n	80030e0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f022 0216 	bic.w	r2, r2, #22
 8003048:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	695a      	ldr	r2, [r3, #20]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003058:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800305e:	2b00      	cmp	r3, #0
 8003060:	d103      	bne.n	800306a <HAL_DMA_Abort+0x62>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003066:	2b00      	cmp	r3, #0
 8003068:	d007      	beq.n	800307a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f022 0208 	bic.w	r2, r2, #8
 8003078:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f022 0201 	bic.w	r2, r2, #1
 8003088:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800308a:	e013      	b.n	80030b4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800308c:	f7ff faac 	bl	80025e8 <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	2b05      	cmp	r3, #5
 8003098:	d90c      	bls.n	80030b4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2220      	movs	r2, #32
 800309e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2203      	movs	r2, #3
 80030a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e015      	b.n	80030e0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1e4      	bne.n	800308c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030c6:	223f      	movs	r2, #63	@ 0x3f
 80030c8:	409a      	lsls	r2, r3
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2201      	movs	r2, #1
 80030d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80030de:	2300      	movs	r3, #0
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3710      	adds	r7, #16
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d004      	beq.n	8003106 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2280      	movs	r2, #128	@ 0x80
 8003100:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e00c      	b.n	8003120 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2205      	movs	r2, #5
 800310a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f022 0201 	bic.w	r2, r2, #1
 800311c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800311e:	2300      	movs	r3, #0
}
 8003120:	4618      	mov	r0, r3
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b086      	sub	sp, #24
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003134:	2300      	movs	r3, #0
 8003136:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003138:	4b8e      	ldr	r3, [pc, #568]	@ (8003374 <HAL_DMA_IRQHandler+0x248>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a8e      	ldr	r2, [pc, #568]	@ (8003378 <HAL_DMA_IRQHandler+0x24c>)
 800313e:	fba2 2303 	umull	r2, r3, r2, r3
 8003142:	0a9b      	lsrs	r3, r3, #10
 8003144:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800314a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003156:	2208      	movs	r2, #8
 8003158:	409a      	lsls	r2, r3
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	4013      	ands	r3, r2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d01a      	beq.n	8003198 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0304 	and.w	r3, r3, #4
 800316c:	2b00      	cmp	r3, #0
 800316e:	d013      	beq.n	8003198 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f022 0204 	bic.w	r2, r2, #4
 800317e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003184:	2208      	movs	r2, #8
 8003186:	409a      	lsls	r2, r3
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003190:	f043 0201 	orr.w	r2, r3, #1
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800319c:	2201      	movs	r2, #1
 800319e:	409a      	lsls	r2, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	4013      	ands	r3, r2
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d012      	beq.n	80031ce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00b      	beq.n	80031ce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031ba:	2201      	movs	r2, #1
 80031bc:	409a      	lsls	r2, r3
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031c6:	f043 0202 	orr.w	r2, r3, #2
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031d2:	2204      	movs	r2, #4
 80031d4:	409a      	lsls	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	4013      	ands	r3, r2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d012      	beq.n	8003204 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0302 	and.w	r3, r3, #2
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d00b      	beq.n	8003204 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031f0:	2204      	movs	r2, #4
 80031f2:	409a      	lsls	r2, r3
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031fc:	f043 0204 	orr.w	r2, r3, #4
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003208:	2210      	movs	r2, #16
 800320a:	409a      	lsls	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	4013      	ands	r3, r2
 8003210:	2b00      	cmp	r3, #0
 8003212:	d043      	beq.n	800329c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0308 	and.w	r3, r3, #8
 800321e:	2b00      	cmp	r3, #0
 8003220:	d03c      	beq.n	800329c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003226:	2210      	movs	r2, #16
 8003228:	409a      	lsls	r2, r3
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d018      	beq.n	800326e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d108      	bne.n	800325c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800324e:	2b00      	cmp	r3, #0
 8003250:	d024      	beq.n	800329c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	4798      	blx	r3
 800325a:	e01f      	b.n	800329c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003260:	2b00      	cmp	r3, #0
 8003262:	d01b      	beq.n	800329c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	4798      	blx	r3
 800326c:	e016      	b.n	800329c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003278:	2b00      	cmp	r3, #0
 800327a:	d107      	bne.n	800328c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f022 0208 	bic.w	r2, r2, #8
 800328a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003290:	2b00      	cmp	r3, #0
 8003292:	d003      	beq.n	800329c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032a0:	2220      	movs	r2, #32
 80032a2:	409a      	lsls	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	4013      	ands	r3, r2
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	f000 808f 	beq.w	80033cc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0310 	and.w	r3, r3, #16
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	f000 8087 	beq.w	80033cc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032c2:	2220      	movs	r2, #32
 80032c4:	409a      	lsls	r2, r3
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b05      	cmp	r3, #5
 80032d4:	d136      	bne.n	8003344 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f022 0216 	bic.w	r2, r2, #22
 80032e4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	695a      	ldr	r2, [r3, #20]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80032f4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d103      	bne.n	8003306 <HAL_DMA_IRQHandler+0x1da>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003302:	2b00      	cmp	r3, #0
 8003304:	d007      	beq.n	8003316 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f022 0208 	bic.w	r2, r2, #8
 8003314:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800331a:	223f      	movs	r2, #63	@ 0x3f
 800331c:	409a      	lsls	r2, r3
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2201      	movs	r2, #1
 8003326:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003336:	2b00      	cmp	r3, #0
 8003338:	d07e      	beq.n	8003438 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	4798      	blx	r3
        }
        return;
 8003342:	e079      	b.n	8003438 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d01d      	beq.n	800338e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d10d      	bne.n	800337c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003364:	2b00      	cmp	r3, #0
 8003366:	d031      	beq.n	80033cc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	4798      	blx	r3
 8003370:	e02c      	b.n	80033cc <HAL_DMA_IRQHandler+0x2a0>
 8003372:	bf00      	nop
 8003374:	20000000 	.word	0x20000000
 8003378:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003380:	2b00      	cmp	r3, #0
 8003382:	d023      	beq.n	80033cc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	4798      	blx	r3
 800338c:	e01e      	b.n	80033cc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003398:	2b00      	cmp	r3, #0
 800339a:	d10f      	bne.n	80033bc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f022 0210 	bic.w	r2, r2, #16
 80033aa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d003      	beq.n	80033cc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d032      	beq.n	800343a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033d8:	f003 0301 	and.w	r3, r3, #1
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d022      	beq.n	8003426 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2205      	movs	r2, #5
 80033e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f022 0201 	bic.w	r2, r2, #1
 80033f6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	3301      	adds	r3, #1
 80033fc:	60bb      	str	r3, [r7, #8]
 80033fe:	697a      	ldr	r2, [r7, #20]
 8003400:	429a      	cmp	r2, r3
 8003402:	d307      	bcc.n	8003414 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1f2      	bne.n	80033f8 <HAL_DMA_IRQHandler+0x2cc>
 8003412:	e000      	b.n	8003416 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003414:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800342a:	2b00      	cmp	r3, #0
 800342c:	d005      	beq.n	800343a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	4798      	blx	r3
 8003436:	e000      	b.n	800343a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003438:	bf00      	nop
    }
  }
}
 800343a:	3718      	adds	r7, #24
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003440:	b480      	push	{r7}
 8003442:	b085      	sub	sp, #20
 8003444:	af00      	add	r7, sp, #0
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	60b9      	str	r1, [r7, #8]
 800344a:	607a      	str	r2, [r7, #4]
 800344c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800345c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	683a      	ldr	r2, [r7, #0]
 8003464:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	2b40      	cmp	r3, #64	@ 0x40
 800346c:	d108      	bne.n	8003480 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68ba      	ldr	r2, [r7, #8]
 800347c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800347e:	e007      	b.n	8003490 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	68ba      	ldr	r2, [r7, #8]
 8003486:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	60da      	str	r2, [r3, #12]
}
 8003490:	bf00      	nop
 8003492:	3714      	adds	r7, #20
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800349c:	b480      	push	{r7}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	3b10      	subs	r3, #16
 80034ac:	4a14      	ldr	r2, [pc, #80]	@ (8003500 <DMA_CalcBaseAndBitshift+0x64>)
 80034ae:	fba2 2303 	umull	r2, r3, r2, r3
 80034b2:	091b      	lsrs	r3, r3, #4
 80034b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80034b6:	4a13      	ldr	r2, [pc, #76]	@ (8003504 <DMA_CalcBaseAndBitshift+0x68>)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	4413      	add	r3, r2
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	461a      	mov	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2b03      	cmp	r3, #3
 80034c8:	d909      	bls.n	80034de <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80034d2:	f023 0303 	bic.w	r3, r3, #3
 80034d6:	1d1a      	adds	r2, r3, #4
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	659a      	str	r2, [r3, #88]	@ 0x58
 80034dc:	e007      	b.n	80034ee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80034e6:	f023 0303 	bic.w	r3, r3, #3
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3714      	adds	r7, #20
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	aaaaaaab 	.word	0xaaaaaaab
 8003504:	0800c460 	.word	0x0800c460

08003508 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003508:	b480      	push	{r7}
 800350a:	b085      	sub	sp, #20
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003510:	2300      	movs	r3, #0
 8003512:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003518:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d11f      	bne.n	8003562 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	2b03      	cmp	r3, #3
 8003526:	d856      	bhi.n	80035d6 <DMA_CheckFifoParam+0xce>
 8003528:	a201      	add	r2, pc, #4	@ (adr r2, 8003530 <DMA_CheckFifoParam+0x28>)
 800352a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800352e:	bf00      	nop
 8003530:	08003541 	.word	0x08003541
 8003534:	08003553 	.word	0x08003553
 8003538:	08003541 	.word	0x08003541
 800353c:	080035d7 	.word	0x080035d7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003544:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d046      	beq.n	80035da <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003550:	e043      	b.n	80035da <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003556:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800355a:	d140      	bne.n	80035de <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003560:	e03d      	b.n	80035de <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800356a:	d121      	bne.n	80035b0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	2b03      	cmp	r3, #3
 8003570:	d837      	bhi.n	80035e2 <DMA_CheckFifoParam+0xda>
 8003572:	a201      	add	r2, pc, #4	@ (adr r2, 8003578 <DMA_CheckFifoParam+0x70>)
 8003574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003578:	08003589 	.word	0x08003589
 800357c:	0800358f 	.word	0x0800358f
 8003580:	08003589 	.word	0x08003589
 8003584:	080035a1 	.word	0x080035a1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	73fb      	strb	r3, [r7, #15]
      break;
 800358c:	e030      	b.n	80035f0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003592:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d025      	beq.n	80035e6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800359e:	e022      	b.n	80035e6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035a4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80035a8:	d11f      	bne.n	80035ea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80035ae:	e01c      	b.n	80035ea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d903      	bls.n	80035be <DMA_CheckFifoParam+0xb6>
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	2b03      	cmp	r3, #3
 80035ba:	d003      	beq.n	80035c4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80035bc:	e018      	b.n	80035f0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	73fb      	strb	r3, [r7, #15]
      break;
 80035c2:	e015      	b.n	80035f0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d00e      	beq.n	80035ee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	73fb      	strb	r3, [r7, #15]
      break;
 80035d4:	e00b      	b.n	80035ee <DMA_CheckFifoParam+0xe6>
      break;
 80035d6:	bf00      	nop
 80035d8:	e00a      	b.n	80035f0 <DMA_CheckFifoParam+0xe8>
      break;
 80035da:	bf00      	nop
 80035dc:	e008      	b.n	80035f0 <DMA_CheckFifoParam+0xe8>
      break;
 80035de:	bf00      	nop
 80035e0:	e006      	b.n	80035f0 <DMA_CheckFifoParam+0xe8>
      break;
 80035e2:	bf00      	nop
 80035e4:	e004      	b.n	80035f0 <DMA_CheckFifoParam+0xe8>
      break;
 80035e6:	bf00      	nop
 80035e8:	e002      	b.n	80035f0 <DMA_CheckFifoParam+0xe8>
      break;   
 80035ea:	bf00      	nop
 80035ec:	e000      	b.n	80035f0 <DMA_CheckFifoParam+0xe8>
      break;
 80035ee:	bf00      	nop
    }
  } 
  
  return status; 
 80035f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3714      	adds	r7, #20
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop

08003600 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b086      	sub	sp, #24
 8003604:	af00      	add	r7, sp, #0
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	607a      	str	r2, [r7, #4]
 800360c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800360e:	2300      	movs	r3, #0
 8003610:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	2b80      	cmp	r3, #128	@ 0x80
 8003618:	d106      	bne.n	8003628 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003620:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	f001 b911 	b.w	800484a <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800362c:	2b00      	cmp	r3, #0
 800362e:	d007      	beq.n	8003640 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003634:	2b00      	cmp	r3, #0
 8003636:	d003      	beq.n	8003640 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800363c:	2b00      	cmp	r3, #0
 800363e:	d105      	bne.n	800364c <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2240      	movs	r2, #64	@ 0x40
 8003644:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	f001 b8ff 	b.w	800484a <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003652:	2b01      	cmp	r3, #1
 8003654:	d102      	bne.n	800365c <HAL_DMAEx_MultiBufferStart_IT+0x5c>
 8003656:	2302      	movs	r3, #2
 8003658:	f001 b8f7 	b.w	800484a <HAL_DMAEx_MultiBufferStart_IT+0x124a>
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800366a:	b2db      	uxtb	r3, r3
 800366c:	2b01      	cmp	r3, #1
 800366e:	f041 80e5 	bne.w	800483c <HAL_DMAEx_MultiBufferStart_IT+0x123c>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2202      	movs	r2, #2
 8003676:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800368e:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	683a      	ldr	r2, [r7, #0]
 8003696:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 8003698:	6a3b      	ldr	r3, [r7, #32]
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	68b9      	ldr	r1, [r7, #8]
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	f001 f910 	bl	80048c4 <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	461a      	mov	r2, r3
 80036aa:	4b8d      	ldr	r3, [pc, #564]	@ (80038e0 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d960      	bls.n	8003772 <HAL_DMAEx_MultiBufferStart_IT+0x172>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a8b      	ldr	r2, [pc, #556]	@ (80038e4 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d057      	beq.n	800376a <HAL_DMAEx_MultiBufferStart_IT+0x16a>
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a8a      	ldr	r2, [pc, #552]	@ (80038e8 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d050      	beq.n	8003766 <HAL_DMAEx_MultiBufferStart_IT+0x166>
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a88      	ldr	r2, [pc, #544]	@ (80038ec <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d049      	beq.n	8003762 <HAL_DMAEx_MultiBufferStart_IT+0x162>
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a87      	ldr	r2, [pc, #540]	@ (80038f0 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d042      	beq.n	800375e <HAL_DMAEx_MultiBufferStart_IT+0x15e>
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a85      	ldr	r2, [pc, #532]	@ (80038f4 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d03a      	beq.n	8003758 <HAL_DMAEx_MultiBufferStart_IT+0x158>
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a84      	ldr	r2, [pc, #528]	@ (80038f8 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d032      	beq.n	8003752 <HAL_DMAEx_MultiBufferStart_IT+0x152>
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a82      	ldr	r2, [pc, #520]	@ (80038fc <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d02a      	beq.n	800374c <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a81      	ldr	r2, [pc, #516]	@ (8003900 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d022      	beq.n	8003746 <HAL_DMAEx_MultiBufferStart_IT+0x146>
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a7f      	ldr	r2, [pc, #508]	@ (8003904 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d01a      	beq.n	8003740 <HAL_DMAEx_MultiBufferStart_IT+0x140>
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a7e      	ldr	r2, [pc, #504]	@ (8003908 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d012      	beq.n	800373a <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a7c      	ldr	r2, [pc, #496]	@ (800390c <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d00a      	beq.n	8003734 <HAL_DMAEx_MultiBufferStart_IT+0x134>
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a7b      	ldr	r2, [pc, #492]	@ (8003910 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d102      	bne.n	800372e <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 8003728:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800372c:	e01e      	b.n	800376c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800372e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003732:	e01b      	b.n	800376c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003734:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003738:	e018      	b.n	800376c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800373a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800373e:	e015      	b.n	800376c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003740:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003744:	e012      	b.n	800376c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003746:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800374a:	e00f      	b.n	800376c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800374c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003750:	e00c      	b.n	800376c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003752:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003756:	e009      	b.n	800376c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003758:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800375c:	e006      	b.n	800376c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800375e:	2320      	movs	r3, #32
 8003760:	e004      	b.n	800376c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003762:	2320      	movs	r3, #32
 8003764:	e002      	b.n	800376c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003766:	2320      	movs	r3, #32
 8003768:	e000      	b.n	800376c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800376a:	2320      	movs	r3, #32
 800376c:	4a69      	ldr	r2, [pc, #420]	@ (8003914 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 800376e:	60d3      	str	r3, [r2, #12]
 8003770:	e14f      	b.n	8003a12 <HAL_DMAEx_MultiBufferStart_IT+0x412>
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	461a      	mov	r2, r3
 8003778:	4b67      	ldr	r3, [pc, #412]	@ (8003918 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 800377a:	429a      	cmp	r2, r3
 800377c:	d960      	bls.n	8003840 <HAL_DMAEx_MultiBufferStart_IT+0x240>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a58      	ldr	r2, [pc, #352]	@ (80038e4 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d057      	beq.n	8003838 <HAL_DMAEx_MultiBufferStart_IT+0x238>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a56      	ldr	r2, [pc, #344]	@ (80038e8 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d050      	beq.n	8003834 <HAL_DMAEx_MultiBufferStart_IT+0x234>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a55      	ldr	r2, [pc, #340]	@ (80038ec <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d049      	beq.n	8003830 <HAL_DMAEx_MultiBufferStart_IT+0x230>
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a53      	ldr	r2, [pc, #332]	@ (80038f0 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d042      	beq.n	800382c <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a52      	ldr	r2, [pc, #328]	@ (80038f4 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d03a      	beq.n	8003826 <HAL_DMAEx_MultiBufferStart_IT+0x226>
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a50      	ldr	r2, [pc, #320]	@ (80038f8 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d032      	beq.n	8003820 <HAL_DMAEx_MultiBufferStart_IT+0x220>
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a4f      	ldr	r2, [pc, #316]	@ (80038fc <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d02a      	beq.n	800381a <HAL_DMAEx_MultiBufferStart_IT+0x21a>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a4d      	ldr	r2, [pc, #308]	@ (8003900 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d022      	beq.n	8003814 <HAL_DMAEx_MultiBufferStart_IT+0x214>
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a4c      	ldr	r2, [pc, #304]	@ (8003904 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d01a      	beq.n	800380e <HAL_DMAEx_MultiBufferStart_IT+0x20e>
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a4a      	ldr	r2, [pc, #296]	@ (8003908 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d012      	beq.n	8003808 <HAL_DMAEx_MultiBufferStart_IT+0x208>
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a49      	ldr	r2, [pc, #292]	@ (800390c <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d00a      	beq.n	8003802 <HAL_DMAEx_MultiBufferStart_IT+0x202>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a47      	ldr	r2, [pc, #284]	@ (8003910 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d102      	bne.n	80037fc <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 80037f6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80037fa:	e01e      	b.n	800383a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80037fc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003800:	e01b      	b.n	800383a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003802:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003806:	e018      	b.n	800383a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003808:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800380c:	e015      	b.n	800383a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800380e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003812:	e012      	b.n	800383a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003814:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003818:	e00f      	b.n	800383a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800381a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800381e:	e00c      	b.n	800383a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003820:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003824:	e009      	b.n	800383a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003826:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800382a:	e006      	b.n	800383a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800382c:	2320      	movs	r3, #32
 800382e:	e004      	b.n	800383a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003830:	2320      	movs	r3, #32
 8003832:	e002      	b.n	800383a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003834:	2320      	movs	r3, #32
 8003836:	e000      	b.n	800383a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003838:	2320      	movs	r3, #32
 800383a:	4a36      	ldr	r2, [pc, #216]	@ (8003914 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 800383c:	6093      	str	r3, [r2, #8]
 800383e:	e0e8      	b.n	8003a12 <HAL_DMAEx_MultiBufferStart_IT+0x412>
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	461a      	mov	r2, r3
 8003846:	4b35      	ldr	r3, [pc, #212]	@ (800391c <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8003848:	429a      	cmp	r2, r3
 800384a:	f240 8082 	bls.w	8003952 <HAL_DMAEx_MultiBufferStart_IT+0x352>
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a24      	ldr	r2, [pc, #144]	@ (80038e4 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d078      	beq.n	800394a <HAL_DMAEx_MultiBufferStart_IT+0x34a>
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a22      	ldr	r2, [pc, #136]	@ (80038e8 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d071      	beq.n	8003946 <HAL_DMAEx_MultiBufferStart_IT+0x346>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a21      	ldr	r2, [pc, #132]	@ (80038ec <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d06a      	beq.n	8003942 <HAL_DMAEx_MultiBufferStart_IT+0x342>
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a1f      	ldr	r2, [pc, #124]	@ (80038f0 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d063      	beq.n	800393e <HAL_DMAEx_MultiBufferStart_IT+0x33e>
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a1e      	ldr	r2, [pc, #120]	@ (80038f4 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d05b      	beq.n	8003938 <HAL_DMAEx_MultiBufferStart_IT+0x338>
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a1c      	ldr	r2, [pc, #112]	@ (80038f8 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d053      	beq.n	8003932 <HAL_DMAEx_MultiBufferStart_IT+0x332>
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a1b      	ldr	r2, [pc, #108]	@ (80038fc <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d04b      	beq.n	800392c <HAL_DMAEx_MultiBufferStart_IT+0x32c>
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a19      	ldr	r2, [pc, #100]	@ (8003900 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d043      	beq.n	8003926 <HAL_DMAEx_MultiBufferStart_IT+0x326>
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a18      	ldr	r2, [pc, #96]	@ (8003904 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d03b      	beq.n	8003920 <HAL_DMAEx_MultiBufferStart_IT+0x320>
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a16      	ldr	r2, [pc, #88]	@ (8003908 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d012      	beq.n	80038d8 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a15      	ldr	r2, [pc, #84]	@ (800390c <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d00a      	beq.n	80038d2 <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a13      	ldr	r2, [pc, #76]	@ (8003910 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d102      	bne.n	80038cc <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 80038c6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80038ca:	e03f      	b.n	800394c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80038cc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80038d0:	e03c      	b.n	800394c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80038d2:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80038d6:	e039      	b.n	800394c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80038d8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80038dc:	e036      	b.n	800394c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80038de:	bf00      	nop
 80038e0:	40026458 	.word	0x40026458
 80038e4:	40026010 	.word	0x40026010
 80038e8:	40026410 	.word	0x40026410
 80038ec:	40026070 	.word	0x40026070
 80038f0:	40026470 	.word	0x40026470
 80038f4:	40026028 	.word	0x40026028
 80038f8:	40026428 	.word	0x40026428
 80038fc:	40026088 	.word	0x40026088
 8003900:	40026488 	.word	0x40026488
 8003904:	40026040 	.word	0x40026040
 8003908:	40026440 	.word	0x40026440
 800390c:	400260a0 	.word	0x400260a0
 8003910:	400264a0 	.word	0x400264a0
 8003914:	40026400 	.word	0x40026400
 8003918:	400260b8 	.word	0x400260b8
 800391c:	40026058 	.word	0x40026058
 8003920:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003924:	e012      	b.n	800394c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8003926:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800392a:	e00f      	b.n	800394c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800392c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003930:	e00c      	b.n	800394c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8003932:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003936:	e009      	b.n	800394c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8003938:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800393c:	e006      	b.n	800394c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800393e:	2320      	movs	r3, #32
 8003940:	e004      	b.n	800394c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8003942:	2320      	movs	r3, #32
 8003944:	e002      	b.n	800394c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8003946:	2320      	movs	r3, #32
 8003948:	e000      	b.n	800394c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800394a:	2320      	movs	r3, #32
 800394c:	4a8c      	ldr	r2, [pc, #560]	@ (8003b80 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 800394e:	60d3      	str	r3, [r2, #12]
 8003950:	e05f      	b.n	8003a12 <HAL_DMAEx_MultiBufferStart_IT+0x412>
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a8b      	ldr	r2, [pc, #556]	@ (8003b84 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d057      	beq.n	8003a0c <HAL_DMAEx_MultiBufferStart_IT+0x40c>
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a89      	ldr	r2, [pc, #548]	@ (8003b88 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d050      	beq.n	8003a08 <HAL_DMAEx_MultiBufferStart_IT+0x408>
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a88      	ldr	r2, [pc, #544]	@ (8003b8c <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d049      	beq.n	8003a04 <HAL_DMAEx_MultiBufferStart_IT+0x404>
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a86      	ldr	r2, [pc, #536]	@ (8003b90 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d042      	beq.n	8003a00 <HAL_DMAEx_MultiBufferStart_IT+0x400>
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a85      	ldr	r2, [pc, #532]	@ (8003b94 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d03a      	beq.n	80039fa <HAL_DMAEx_MultiBufferStart_IT+0x3fa>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a83      	ldr	r2, [pc, #524]	@ (8003b98 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d032      	beq.n	80039f4 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a82      	ldr	r2, [pc, #520]	@ (8003b9c <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d02a      	beq.n	80039ee <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a80      	ldr	r2, [pc, #512]	@ (8003ba0 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d022      	beq.n	80039e8 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a7f      	ldr	r2, [pc, #508]	@ (8003ba4 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d01a      	beq.n	80039e2 <HAL_DMAEx_MultiBufferStart_IT+0x3e2>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a7d      	ldr	r2, [pc, #500]	@ (8003ba8 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d012      	beq.n	80039dc <HAL_DMAEx_MultiBufferStart_IT+0x3dc>
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a7c      	ldr	r2, [pc, #496]	@ (8003bac <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d00a      	beq.n	80039d6 <HAL_DMAEx_MultiBufferStart_IT+0x3d6>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a7a      	ldr	r2, [pc, #488]	@ (8003bb0 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d102      	bne.n	80039d0 <HAL_DMAEx_MultiBufferStart_IT+0x3d0>
 80039ca:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80039ce:	e01e      	b.n	8003a0e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80039d0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80039d4:	e01b      	b.n	8003a0e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80039d6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80039da:	e018      	b.n	8003a0e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80039dc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80039e0:	e015      	b.n	8003a0e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80039e2:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80039e6:	e012      	b.n	8003a0e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80039e8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80039ec:	e00f      	b.n	8003a0e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80039ee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80039f2:	e00c      	b.n	8003a0e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80039f4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80039f8:	e009      	b.n	8003a0e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80039fa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80039fe:	e006      	b.n	8003a0e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003a00:	2320      	movs	r3, #32
 8003a02:	e004      	b.n	8003a0e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003a04:	2320      	movs	r3, #32
 8003a06:	e002      	b.n	8003a0e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003a08:	2320      	movs	r3, #32
 8003a0a:	e000      	b.n	8003a0e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003a0c:	2320      	movs	r3, #32
 8003a0e:	4a5c      	ldr	r2, [pc, #368]	@ (8003b80 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 8003a10:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	461a      	mov	r2, r3
 8003a18:	4b66      	ldr	r3, [pc, #408]	@ (8003bb4 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d960      	bls.n	8003ae0 <HAL_DMAEx_MultiBufferStart_IT+0x4e0>
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a58      	ldr	r2, [pc, #352]	@ (8003b84 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d057      	beq.n	8003ad8 <HAL_DMAEx_MultiBufferStart_IT+0x4d8>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a56      	ldr	r2, [pc, #344]	@ (8003b88 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d050      	beq.n	8003ad4 <HAL_DMAEx_MultiBufferStart_IT+0x4d4>
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a55      	ldr	r2, [pc, #340]	@ (8003b8c <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d049      	beq.n	8003ad0 <HAL_DMAEx_MultiBufferStart_IT+0x4d0>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a53      	ldr	r2, [pc, #332]	@ (8003b90 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d042      	beq.n	8003acc <HAL_DMAEx_MultiBufferStart_IT+0x4cc>
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a52      	ldr	r2, [pc, #328]	@ (8003b94 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d03a      	beq.n	8003ac6 <HAL_DMAEx_MultiBufferStart_IT+0x4c6>
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a50      	ldr	r2, [pc, #320]	@ (8003b98 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d032      	beq.n	8003ac0 <HAL_DMAEx_MultiBufferStart_IT+0x4c0>
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a4f      	ldr	r2, [pc, #316]	@ (8003b9c <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d02a      	beq.n	8003aba <HAL_DMAEx_MultiBufferStart_IT+0x4ba>
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a4d      	ldr	r2, [pc, #308]	@ (8003ba0 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d022      	beq.n	8003ab4 <HAL_DMAEx_MultiBufferStart_IT+0x4b4>
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a4c      	ldr	r2, [pc, #304]	@ (8003ba4 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d01a      	beq.n	8003aae <HAL_DMAEx_MultiBufferStart_IT+0x4ae>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a4a      	ldr	r2, [pc, #296]	@ (8003ba8 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d012      	beq.n	8003aa8 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a49      	ldr	r2, [pc, #292]	@ (8003bac <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d00a      	beq.n	8003aa2 <HAL_DMAEx_MultiBufferStart_IT+0x4a2>
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a47      	ldr	r2, [pc, #284]	@ (8003bb0 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d102      	bne.n	8003a9c <HAL_DMAEx_MultiBufferStart_IT+0x49c>
 8003a96:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003a9a:	e01e      	b.n	8003ada <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003a9c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003aa0:	e01b      	b.n	8003ada <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003aa2:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003aa6:	e018      	b.n	8003ada <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003aa8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003aac:	e015      	b.n	8003ada <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003aae:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003ab2:	e012      	b.n	8003ada <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003ab4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003ab8:	e00f      	b.n	8003ada <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003aba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003abe:	e00c      	b.n	8003ada <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003ac0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003ac4:	e009      	b.n	8003ada <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003ac6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003aca:	e006      	b.n	8003ada <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003acc:	2310      	movs	r3, #16
 8003ace:	e004      	b.n	8003ada <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003ad0:	2310      	movs	r3, #16
 8003ad2:	e002      	b.n	8003ada <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003ad4:	2310      	movs	r3, #16
 8003ad6:	e000      	b.n	8003ada <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003ad8:	2310      	movs	r3, #16
 8003ada:	4a37      	ldr	r2, [pc, #220]	@ (8003bb8 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8003adc:	60d3      	str	r3, [r2, #12]
 8003ade:	e14f      	b.n	8003d80 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	4b35      	ldr	r3, [pc, #212]	@ (8003bbc <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	f240 8082 	bls.w	8003bf2 <HAL_DMAEx_MultiBufferStart_IT+0x5f2>
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a24      	ldr	r2, [pc, #144]	@ (8003b84 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d078      	beq.n	8003bea <HAL_DMAEx_MultiBufferStart_IT+0x5ea>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a22      	ldr	r2, [pc, #136]	@ (8003b88 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d071      	beq.n	8003be6 <HAL_DMAEx_MultiBufferStart_IT+0x5e6>
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a21      	ldr	r2, [pc, #132]	@ (8003b8c <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d06a      	beq.n	8003be2 <HAL_DMAEx_MultiBufferStart_IT+0x5e2>
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a1f      	ldr	r2, [pc, #124]	@ (8003b90 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d063      	beq.n	8003bde <HAL_DMAEx_MultiBufferStart_IT+0x5de>
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a1e      	ldr	r2, [pc, #120]	@ (8003b94 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d05b      	beq.n	8003bd8 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a1c      	ldr	r2, [pc, #112]	@ (8003b98 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d053      	beq.n	8003bd2 <HAL_DMAEx_MultiBufferStart_IT+0x5d2>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a1b      	ldr	r2, [pc, #108]	@ (8003b9c <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d04b      	beq.n	8003bcc <HAL_DMAEx_MultiBufferStart_IT+0x5cc>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a19      	ldr	r2, [pc, #100]	@ (8003ba0 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d043      	beq.n	8003bc6 <HAL_DMAEx_MultiBufferStart_IT+0x5c6>
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a18      	ldr	r2, [pc, #96]	@ (8003ba4 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d03b      	beq.n	8003bc0 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a16      	ldr	r2, [pc, #88]	@ (8003ba8 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d012      	beq.n	8003b78 <HAL_DMAEx_MultiBufferStart_IT+0x578>
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a15      	ldr	r2, [pc, #84]	@ (8003bac <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d00a      	beq.n	8003b72 <HAL_DMAEx_MultiBufferStart_IT+0x572>
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a13      	ldr	r2, [pc, #76]	@ (8003bb0 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d102      	bne.n	8003b6c <HAL_DMAEx_MultiBufferStart_IT+0x56c>
 8003b66:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003b6a:	e03f      	b.n	8003bec <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003b6c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003b70:	e03c      	b.n	8003bec <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003b72:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003b76:	e039      	b.n	8003bec <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003b78:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003b7c:	e036      	b.n	8003bec <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003b7e:	bf00      	nop
 8003b80:	40026000 	.word	0x40026000
 8003b84:	40026010 	.word	0x40026010
 8003b88:	40026410 	.word	0x40026410
 8003b8c:	40026070 	.word	0x40026070
 8003b90:	40026470 	.word	0x40026470
 8003b94:	40026028 	.word	0x40026028
 8003b98:	40026428 	.word	0x40026428
 8003b9c:	40026088 	.word	0x40026088
 8003ba0:	40026488 	.word	0x40026488
 8003ba4:	40026040 	.word	0x40026040
 8003ba8:	40026440 	.word	0x40026440
 8003bac:	400260a0 	.word	0x400260a0
 8003bb0:	400264a0 	.word	0x400264a0
 8003bb4:	40026458 	.word	0x40026458
 8003bb8:	40026400 	.word	0x40026400
 8003bbc:	400260b8 	.word	0x400260b8
 8003bc0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003bc4:	e012      	b.n	8003bec <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003bc6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003bca:	e00f      	b.n	8003bec <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003bcc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003bd0:	e00c      	b.n	8003bec <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003bd2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003bd6:	e009      	b.n	8003bec <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003bd8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003bdc:	e006      	b.n	8003bec <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003bde:	2310      	movs	r3, #16
 8003be0:	e004      	b.n	8003bec <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003be2:	2310      	movs	r3, #16
 8003be4:	e002      	b.n	8003bec <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003be6:	2310      	movs	r3, #16
 8003be8:	e000      	b.n	8003bec <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003bea:	2310      	movs	r3, #16
 8003bec:	4a8c      	ldr	r2, [pc, #560]	@ (8003e20 <HAL_DMAEx_MultiBufferStart_IT+0x820>)
 8003bee:	6093      	str	r3, [r2, #8]
 8003bf0:	e0c6      	b.n	8003d80 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	4b8a      	ldr	r3, [pc, #552]	@ (8003e24 <HAL_DMAEx_MultiBufferStart_IT+0x824>)
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d960      	bls.n	8003cc0 <HAL_DMAEx_MultiBufferStart_IT+0x6c0>
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a89      	ldr	r2, [pc, #548]	@ (8003e28 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d057      	beq.n	8003cb8 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a87      	ldr	r2, [pc, #540]	@ (8003e2c <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d050      	beq.n	8003cb4 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a86      	ldr	r2, [pc, #536]	@ (8003e30 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d049      	beq.n	8003cb0 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a84      	ldr	r2, [pc, #528]	@ (8003e34 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d042      	beq.n	8003cac <HAL_DMAEx_MultiBufferStart_IT+0x6ac>
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a83      	ldr	r2, [pc, #524]	@ (8003e38 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d03a      	beq.n	8003ca6 <HAL_DMAEx_MultiBufferStart_IT+0x6a6>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a81      	ldr	r2, [pc, #516]	@ (8003e3c <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d032      	beq.n	8003ca0 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a80      	ldr	r2, [pc, #512]	@ (8003e40 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d02a      	beq.n	8003c9a <HAL_DMAEx_MultiBufferStart_IT+0x69a>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a7e      	ldr	r2, [pc, #504]	@ (8003e44 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d022      	beq.n	8003c94 <HAL_DMAEx_MultiBufferStart_IT+0x694>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a7d      	ldr	r2, [pc, #500]	@ (8003e48 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d01a      	beq.n	8003c8e <HAL_DMAEx_MultiBufferStart_IT+0x68e>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a7b      	ldr	r2, [pc, #492]	@ (8003e4c <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d012      	beq.n	8003c88 <HAL_DMAEx_MultiBufferStart_IT+0x688>
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a7a      	ldr	r2, [pc, #488]	@ (8003e50 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d00a      	beq.n	8003c82 <HAL_DMAEx_MultiBufferStart_IT+0x682>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a78      	ldr	r2, [pc, #480]	@ (8003e54 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d102      	bne.n	8003c7c <HAL_DMAEx_MultiBufferStart_IT+0x67c>
 8003c76:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003c7a:	e01e      	b.n	8003cba <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003c7c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003c80:	e01b      	b.n	8003cba <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003c82:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003c86:	e018      	b.n	8003cba <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003c88:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003c8c:	e015      	b.n	8003cba <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003c8e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003c92:	e012      	b.n	8003cba <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003c94:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003c98:	e00f      	b.n	8003cba <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003c9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003c9e:	e00c      	b.n	8003cba <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003ca0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003ca4:	e009      	b.n	8003cba <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003ca6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003caa:	e006      	b.n	8003cba <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003cac:	2310      	movs	r3, #16
 8003cae:	e004      	b.n	8003cba <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003cb0:	2310      	movs	r3, #16
 8003cb2:	e002      	b.n	8003cba <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003cb4:	2310      	movs	r3, #16
 8003cb6:	e000      	b.n	8003cba <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003cb8:	2310      	movs	r3, #16
 8003cba:	4a67      	ldr	r2, [pc, #412]	@ (8003e58 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8003cbc:	60d3      	str	r3, [r2, #12]
 8003cbe:	e05f      	b.n	8003d80 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a58      	ldr	r2, [pc, #352]	@ (8003e28 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d057      	beq.n	8003d7a <HAL_DMAEx_MultiBufferStart_IT+0x77a>
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a57      	ldr	r2, [pc, #348]	@ (8003e2c <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d050      	beq.n	8003d76 <HAL_DMAEx_MultiBufferStart_IT+0x776>
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a55      	ldr	r2, [pc, #340]	@ (8003e30 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d049      	beq.n	8003d72 <HAL_DMAEx_MultiBufferStart_IT+0x772>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a54      	ldr	r2, [pc, #336]	@ (8003e34 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d042      	beq.n	8003d6e <HAL_DMAEx_MultiBufferStart_IT+0x76e>
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a52      	ldr	r2, [pc, #328]	@ (8003e38 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d03a      	beq.n	8003d68 <HAL_DMAEx_MultiBufferStart_IT+0x768>
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a51      	ldr	r2, [pc, #324]	@ (8003e3c <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d032      	beq.n	8003d62 <HAL_DMAEx_MultiBufferStart_IT+0x762>
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a4f      	ldr	r2, [pc, #316]	@ (8003e40 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d02a      	beq.n	8003d5c <HAL_DMAEx_MultiBufferStart_IT+0x75c>
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a4e      	ldr	r2, [pc, #312]	@ (8003e44 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d022      	beq.n	8003d56 <HAL_DMAEx_MultiBufferStart_IT+0x756>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a4c      	ldr	r2, [pc, #304]	@ (8003e48 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d01a      	beq.n	8003d50 <HAL_DMAEx_MultiBufferStart_IT+0x750>
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a4b      	ldr	r2, [pc, #300]	@ (8003e4c <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d012      	beq.n	8003d4a <HAL_DMAEx_MultiBufferStart_IT+0x74a>
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a49      	ldr	r2, [pc, #292]	@ (8003e50 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d00a      	beq.n	8003d44 <HAL_DMAEx_MultiBufferStart_IT+0x744>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a48      	ldr	r2, [pc, #288]	@ (8003e54 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d102      	bne.n	8003d3e <HAL_DMAEx_MultiBufferStart_IT+0x73e>
 8003d38:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003d3c:	e01e      	b.n	8003d7c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003d3e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003d42:	e01b      	b.n	8003d7c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003d44:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003d48:	e018      	b.n	8003d7c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003d4a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003d4e:	e015      	b.n	8003d7c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003d50:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003d54:	e012      	b.n	8003d7c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003d56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003d5a:	e00f      	b.n	8003d7c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003d5c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003d60:	e00c      	b.n	8003d7c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003d62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003d66:	e009      	b.n	8003d7c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003d68:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003d6c:	e006      	b.n	8003d7c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003d6e:	2310      	movs	r3, #16
 8003d70:	e004      	b.n	8003d7c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003d72:	2310      	movs	r3, #16
 8003d74:	e002      	b.n	8003d7c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003d76:	2310      	movs	r3, #16
 8003d78:	e000      	b.n	8003d7c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003d7a:	2310      	movs	r3, #16
 8003d7c:	4a36      	ldr	r2, [pc, #216]	@ (8003e58 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8003d7e:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	461a      	mov	r2, r3
 8003d86:	4b35      	ldr	r3, [pc, #212]	@ (8003e5c <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	f240 8082 	bls.w	8003e92 <HAL_DMAEx_MultiBufferStart_IT+0x892>
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a25      	ldr	r2, [pc, #148]	@ (8003e28 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d078      	beq.n	8003e8a <HAL_DMAEx_MultiBufferStart_IT+0x88a>
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a23      	ldr	r2, [pc, #140]	@ (8003e2c <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d071      	beq.n	8003e86 <HAL_DMAEx_MultiBufferStart_IT+0x886>
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a22      	ldr	r2, [pc, #136]	@ (8003e30 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d06a      	beq.n	8003e82 <HAL_DMAEx_MultiBufferStart_IT+0x882>
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a20      	ldr	r2, [pc, #128]	@ (8003e34 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d063      	beq.n	8003e7e <HAL_DMAEx_MultiBufferStart_IT+0x87e>
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a1f      	ldr	r2, [pc, #124]	@ (8003e38 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d05b      	beq.n	8003e78 <HAL_DMAEx_MultiBufferStart_IT+0x878>
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a1d      	ldr	r2, [pc, #116]	@ (8003e3c <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d053      	beq.n	8003e72 <HAL_DMAEx_MultiBufferStart_IT+0x872>
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a1c      	ldr	r2, [pc, #112]	@ (8003e40 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d04b      	beq.n	8003e6c <HAL_DMAEx_MultiBufferStart_IT+0x86c>
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a1a      	ldr	r2, [pc, #104]	@ (8003e44 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d043      	beq.n	8003e66 <HAL_DMAEx_MultiBufferStart_IT+0x866>
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a19      	ldr	r2, [pc, #100]	@ (8003e48 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d03b      	beq.n	8003e60 <HAL_DMAEx_MultiBufferStart_IT+0x860>
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a17      	ldr	r2, [pc, #92]	@ (8003e4c <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d012      	beq.n	8003e18 <HAL_DMAEx_MultiBufferStart_IT+0x818>
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a16      	ldr	r2, [pc, #88]	@ (8003e50 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d00a      	beq.n	8003e12 <HAL_DMAEx_MultiBufferStart_IT+0x812>
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a14      	ldr	r2, [pc, #80]	@ (8003e54 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d102      	bne.n	8003e0c <HAL_DMAEx_MultiBufferStart_IT+0x80c>
 8003e06:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003e0a:	e03f      	b.n	8003e8c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003e0c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e10:	e03c      	b.n	8003e8c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003e12:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003e16:	e039      	b.n	8003e8c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003e18:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003e1c:	e036      	b.n	8003e8c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003e1e:	bf00      	nop
 8003e20:	40026400 	.word	0x40026400
 8003e24:	40026058 	.word	0x40026058
 8003e28:	40026010 	.word	0x40026010
 8003e2c:	40026410 	.word	0x40026410
 8003e30:	40026070 	.word	0x40026070
 8003e34:	40026470 	.word	0x40026470
 8003e38:	40026028 	.word	0x40026028
 8003e3c:	40026428 	.word	0x40026428
 8003e40:	40026088 	.word	0x40026088
 8003e44:	40026488 	.word	0x40026488
 8003e48:	40026040 	.word	0x40026040
 8003e4c:	40026440 	.word	0x40026440
 8003e50:	400260a0 	.word	0x400260a0
 8003e54:	400264a0 	.word	0x400264a0
 8003e58:	40026000 	.word	0x40026000
 8003e5c:	40026458 	.word	0x40026458
 8003e60:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003e64:	e012      	b.n	8003e8c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003e66:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003e6a:	e00f      	b.n	8003e8c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003e6c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003e70:	e00c      	b.n	8003e8c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003e72:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003e76:	e009      	b.n	8003e8c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003e78:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003e7c:	e006      	b.n	8003e8c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003e7e:	2308      	movs	r3, #8
 8003e80:	e004      	b.n	8003e8c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003e82:	2308      	movs	r3, #8
 8003e84:	e002      	b.n	8003e8c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003e86:	2308      	movs	r3, #8
 8003e88:	e000      	b.n	8003e8c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003e8a:	2308      	movs	r3, #8
 8003e8c:	4a8c      	ldr	r2, [pc, #560]	@ (80040c0 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 8003e8e:	60d3      	str	r3, [r2, #12]
 8003e90:	e14e      	b.n	8004130 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	461a      	mov	r2, r3
 8003e98:	4b8a      	ldr	r3, [pc, #552]	@ (80040c4 <HAL_DMAEx_MultiBufferStart_IT+0xac4>)
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d960      	bls.n	8003f60 <HAL_DMAEx_MultiBufferStart_IT+0x960>
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a89      	ldr	r2, [pc, #548]	@ (80040c8 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d057      	beq.n	8003f58 <HAL_DMAEx_MultiBufferStart_IT+0x958>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a87      	ldr	r2, [pc, #540]	@ (80040cc <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d050      	beq.n	8003f54 <HAL_DMAEx_MultiBufferStart_IT+0x954>
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a86      	ldr	r2, [pc, #536]	@ (80040d0 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d049      	beq.n	8003f50 <HAL_DMAEx_MultiBufferStart_IT+0x950>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a84      	ldr	r2, [pc, #528]	@ (80040d4 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d042      	beq.n	8003f4c <HAL_DMAEx_MultiBufferStart_IT+0x94c>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a83      	ldr	r2, [pc, #524]	@ (80040d8 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d03a      	beq.n	8003f46 <HAL_DMAEx_MultiBufferStart_IT+0x946>
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a81      	ldr	r2, [pc, #516]	@ (80040dc <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d032      	beq.n	8003f40 <HAL_DMAEx_MultiBufferStart_IT+0x940>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a80      	ldr	r2, [pc, #512]	@ (80040e0 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d02a      	beq.n	8003f3a <HAL_DMAEx_MultiBufferStart_IT+0x93a>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a7e      	ldr	r2, [pc, #504]	@ (80040e4 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d022      	beq.n	8003f34 <HAL_DMAEx_MultiBufferStart_IT+0x934>
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a7d      	ldr	r2, [pc, #500]	@ (80040e8 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d01a      	beq.n	8003f2e <HAL_DMAEx_MultiBufferStart_IT+0x92e>
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a7b      	ldr	r2, [pc, #492]	@ (80040ec <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d012      	beq.n	8003f28 <HAL_DMAEx_MultiBufferStart_IT+0x928>
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a7a      	ldr	r2, [pc, #488]	@ (80040f0 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d00a      	beq.n	8003f22 <HAL_DMAEx_MultiBufferStart_IT+0x922>
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a78      	ldr	r2, [pc, #480]	@ (80040f4 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d102      	bne.n	8003f1c <HAL_DMAEx_MultiBufferStart_IT+0x91c>
 8003f16:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003f1a:	e01e      	b.n	8003f5a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003f1c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f20:	e01b      	b.n	8003f5a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003f22:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003f26:	e018      	b.n	8003f5a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003f28:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003f2c:	e015      	b.n	8003f5a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003f2e:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003f32:	e012      	b.n	8003f5a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003f34:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003f38:	e00f      	b.n	8003f5a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003f3a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003f3e:	e00c      	b.n	8003f5a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003f40:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003f44:	e009      	b.n	8003f5a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003f46:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003f4a:	e006      	b.n	8003f5a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003f4c:	2308      	movs	r3, #8
 8003f4e:	e004      	b.n	8003f5a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003f50:	2308      	movs	r3, #8
 8003f52:	e002      	b.n	8003f5a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003f54:	2308      	movs	r3, #8
 8003f56:	e000      	b.n	8003f5a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003f58:	2308      	movs	r3, #8
 8003f5a:	4a59      	ldr	r2, [pc, #356]	@ (80040c0 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 8003f5c:	6093      	str	r3, [r2, #8]
 8003f5e:	e0e7      	b.n	8004130 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	461a      	mov	r2, r3
 8003f66:	4b64      	ldr	r3, [pc, #400]	@ (80040f8 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d960      	bls.n	800402e <HAL_DMAEx_MultiBufferStart_IT+0xa2e>
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a55      	ldr	r2, [pc, #340]	@ (80040c8 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d057      	beq.n	8004026 <HAL_DMAEx_MultiBufferStart_IT+0xa26>
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a54      	ldr	r2, [pc, #336]	@ (80040cc <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d050      	beq.n	8004022 <HAL_DMAEx_MultiBufferStart_IT+0xa22>
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a52      	ldr	r2, [pc, #328]	@ (80040d0 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d049      	beq.n	800401e <HAL_DMAEx_MultiBufferStart_IT+0xa1e>
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a51      	ldr	r2, [pc, #324]	@ (80040d4 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d042      	beq.n	800401a <HAL_DMAEx_MultiBufferStart_IT+0xa1a>
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a4f      	ldr	r2, [pc, #316]	@ (80040d8 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d03a      	beq.n	8004014 <HAL_DMAEx_MultiBufferStart_IT+0xa14>
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a4e      	ldr	r2, [pc, #312]	@ (80040dc <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d032      	beq.n	800400e <HAL_DMAEx_MultiBufferStart_IT+0xa0e>
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a4c      	ldr	r2, [pc, #304]	@ (80040e0 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d02a      	beq.n	8004008 <HAL_DMAEx_MultiBufferStart_IT+0xa08>
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a4b      	ldr	r2, [pc, #300]	@ (80040e4 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d022      	beq.n	8004002 <HAL_DMAEx_MultiBufferStart_IT+0xa02>
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a49      	ldr	r2, [pc, #292]	@ (80040e8 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d01a      	beq.n	8003ffc <HAL_DMAEx_MultiBufferStart_IT+0x9fc>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a48      	ldr	r2, [pc, #288]	@ (80040ec <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d012      	beq.n	8003ff6 <HAL_DMAEx_MultiBufferStart_IT+0x9f6>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a46      	ldr	r2, [pc, #280]	@ (80040f0 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d00a      	beq.n	8003ff0 <HAL_DMAEx_MultiBufferStart_IT+0x9f0>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a45      	ldr	r2, [pc, #276]	@ (80040f4 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d102      	bne.n	8003fea <HAL_DMAEx_MultiBufferStart_IT+0x9ea>
 8003fe4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003fe8:	e01e      	b.n	8004028 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003fea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003fee:	e01b      	b.n	8004028 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003ff0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003ff4:	e018      	b.n	8004028 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003ff6:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003ffa:	e015      	b.n	8004028 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003ffc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004000:	e012      	b.n	8004028 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8004002:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004006:	e00f      	b.n	8004028 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8004008:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800400c:	e00c      	b.n	8004028 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800400e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004012:	e009      	b.n	8004028 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8004014:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004018:	e006      	b.n	8004028 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800401a:	2308      	movs	r3, #8
 800401c:	e004      	b.n	8004028 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800401e:	2308      	movs	r3, #8
 8004020:	e002      	b.n	8004028 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8004022:	2308      	movs	r3, #8
 8004024:	e000      	b.n	8004028 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8004026:	2308      	movs	r3, #8
 8004028:	4a34      	ldr	r2, [pc, #208]	@ (80040fc <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 800402a:	60d3      	str	r3, [r2, #12]
 800402c:	e080      	b.n	8004130 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a25      	ldr	r2, [pc, #148]	@ (80040c8 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d078      	beq.n	800412a <HAL_DMAEx_MultiBufferStart_IT+0xb2a>
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a23      	ldr	r2, [pc, #140]	@ (80040cc <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d071      	beq.n	8004126 <HAL_DMAEx_MultiBufferStart_IT+0xb26>
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a22      	ldr	r2, [pc, #136]	@ (80040d0 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d06a      	beq.n	8004122 <HAL_DMAEx_MultiBufferStart_IT+0xb22>
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a20      	ldr	r2, [pc, #128]	@ (80040d4 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d063      	beq.n	800411e <HAL_DMAEx_MultiBufferStart_IT+0xb1e>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a1f      	ldr	r2, [pc, #124]	@ (80040d8 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d05b      	beq.n	8004118 <HAL_DMAEx_MultiBufferStart_IT+0xb18>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a1d      	ldr	r2, [pc, #116]	@ (80040dc <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d053      	beq.n	8004112 <HAL_DMAEx_MultiBufferStart_IT+0xb12>
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a1c      	ldr	r2, [pc, #112]	@ (80040e0 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d04b      	beq.n	800410c <HAL_DMAEx_MultiBufferStart_IT+0xb0c>
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a1a      	ldr	r2, [pc, #104]	@ (80040e4 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d043      	beq.n	8004106 <HAL_DMAEx_MultiBufferStart_IT+0xb06>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a19      	ldr	r2, [pc, #100]	@ (80040e8 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d03b      	beq.n	8004100 <HAL_DMAEx_MultiBufferStart_IT+0xb00>
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a17      	ldr	r2, [pc, #92]	@ (80040ec <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d012      	beq.n	80040b8 <HAL_DMAEx_MultiBufferStart_IT+0xab8>
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a16      	ldr	r2, [pc, #88]	@ (80040f0 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d00a      	beq.n	80040b2 <HAL_DMAEx_MultiBufferStart_IT+0xab2>
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a14      	ldr	r2, [pc, #80]	@ (80040f4 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d102      	bne.n	80040ac <HAL_DMAEx_MultiBufferStart_IT+0xaac>
 80040a6:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80040aa:	e03f      	b.n	800412c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80040ac:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80040b0:	e03c      	b.n	800412c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80040b2:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80040b6:	e039      	b.n	800412c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80040b8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80040bc:	e036      	b.n	800412c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80040be:	bf00      	nop
 80040c0:	40026400 	.word	0x40026400
 80040c4:	400260b8 	.word	0x400260b8
 80040c8:	40026010 	.word	0x40026010
 80040cc:	40026410 	.word	0x40026410
 80040d0:	40026070 	.word	0x40026070
 80040d4:	40026470 	.word	0x40026470
 80040d8:	40026028 	.word	0x40026028
 80040dc:	40026428 	.word	0x40026428
 80040e0:	40026088 	.word	0x40026088
 80040e4:	40026488 	.word	0x40026488
 80040e8:	40026040 	.word	0x40026040
 80040ec:	40026440 	.word	0x40026440
 80040f0:	400260a0 	.word	0x400260a0
 80040f4:	400264a0 	.word	0x400264a0
 80040f8:	40026058 	.word	0x40026058
 80040fc:	40026000 	.word	0x40026000
 8004100:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004104:	e012      	b.n	800412c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8004106:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800410a:	e00f      	b.n	800412c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800410c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004110:	e00c      	b.n	800412c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8004112:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004116:	e009      	b.n	800412c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8004118:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800411c:	e006      	b.n	800412c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800411e:	2308      	movs	r3, #8
 8004120:	e004      	b.n	800412c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8004122:	2308      	movs	r3, #8
 8004124:	e002      	b.n	800412c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8004126:	2308      	movs	r3, #8
 8004128:	e000      	b.n	800412c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800412a:	2308      	movs	r3, #8
 800412c:	4a8a      	ldr	r2, [pc, #552]	@ (8004358 <HAL_DMAEx_MultiBufferStart_IT+0xd58>)
 800412e:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	461a      	mov	r2, r3
 8004136:	4b89      	ldr	r3, [pc, #548]	@ (800435c <HAL_DMAEx_MultiBufferStart_IT+0xd5c>)
 8004138:	429a      	cmp	r2, r3
 800413a:	d960      	bls.n	80041fe <HAL_DMAEx_MultiBufferStart_IT+0xbfe>
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a87      	ldr	r2, [pc, #540]	@ (8004360 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d057      	beq.n	80041f6 <HAL_DMAEx_MultiBufferStart_IT+0xbf6>
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a86      	ldr	r2, [pc, #536]	@ (8004364 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d050      	beq.n	80041f2 <HAL_DMAEx_MultiBufferStart_IT+0xbf2>
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a84      	ldr	r2, [pc, #528]	@ (8004368 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d049      	beq.n	80041ee <HAL_DMAEx_MultiBufferStart_IT+0xbee>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a83      	ldr	r2, [pc, #524]	@ (800436c <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d042      	beq.n	80041ea <HAL_DMAEx_MultiBufferStart_IT+0xbea>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a81      	ldr	r2, [pc, #516]	@ (8004370 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d03a      	beq.n	80041e4 <HAL_DMAEx_MultiBufferStart_IT+0xbe4>
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a80      	ldr	r2, [pc, #512]	@ (8004374 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d032      	beq.n	80041de <HAL_DMAEx_MultiBufferStart_IT+0xbde>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a7e      	ldr	r2, [pc, #504]	@ (8004378 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d02a      	beq.n	80041d8 <HAL_DMAEx_MultiBufferStart_IT+0xbd8>
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a7d      	ldr	r2, [pc, #500]	@ (800437c <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d022      	beq.n	80041d2 <HAL_DMAEx_MultiBufferStart_IT+0xbd2>
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a7b      	ldr	r2, [pc, #492]	@ (8004380 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d01a      	beq.n	80041cc <HAL_DMAEx_MultiBufferStart_IT+0xbcc>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a7a      	ldr	r2, [pc, #488]	@ (8004384 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d012      	beq.n	80041c6 <HAL_DMAEx_MultiBufferStart_IT+0xbc6>
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a78      	ldr	r2, [pc, #480]	@ (8004388 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d00a      	beq.n	80041c0 <HAL_DMAEx_MultiBufferStart_IT+0xbc0>
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a77      	ldr	r2, [pc, #476]	@ (800438c <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d102      	bne.n	80041ba <HAL_DMAEx_MultiBufferStart_IT+0xbba>
 80041b4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80041b8:	e01e      	b.n	80041f8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80041ba:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80041be:	e01b      	b.n	80041f8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80041c0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80041c4:	e018      	b.n	80041f8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80041c6:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80041ca:	e015      	b.n	80041f8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80041cc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80041d0:	e012      	b.n	80041f8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80041d2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80041d6:	e00f      	b.n	80041f8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80041d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80041dc:	e00c      	b.n	80041f8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80041de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80041e2:	e009      	b.n	80041f8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80041e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80041e8:	e006      	b.n	80041f8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80041ea:	2304      	movs	r3, #4
 80041ec:	e004      	b.n	80041f8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80041ee:	2304      	movs	r3, #4
 80041f0:	e002      	b.n	80041f8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80041f2:	2304      	movs	r3, #4
 80041f4:	e000      	b.n	80041f8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80041f6:	2304      	movs	r3, #4
 80041f8:	4a65      	ldr	r2, [pc, #404]	@ (8004390 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 80041fa:	60d3      	str	r3, [r2, #12]
 80041fc:	e150      	b.n	80044a0 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	461a      	mov	r2, r3
 8004204:	4b63      	ldr	r3, [pc, #396]	@ (8004394 <HAL_DMAEx_MultiBufferStart_IT+0xd94>)
 8004206:	429a      	cmp	r2, r3
 8004208:	d960      	bls.n	80042cc <HAL_DMAEx_MultiBufferStart_IT+0xccc>
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a54      	ldr	r2, [pc, #336]	@ (8004360 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d057      	beq.n	80042c4 <HAL_DMAEx_MultiBufferStart_IT+0xcc4>
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a52      	ldr	r2, [pc, #328]	@ (8004364 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d050      	beq.n	80042c0 <HAL_DMAEx_MultiBufferStart_IT+0xcc0>
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a51      	ldr	r2, [pc, #324]	@ (8004368 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d049      	beq.n	80042bc <HAL_DMAEx_MultiBufferStart_IT+0xcbc>
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a4f      	ldr	r2, [pc, #316]	@ (800436c <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d042      	beq.n	80042b8 <HAL_DMAEx_MultiBufferStart_IT+0xcb8>
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a4e      	ldr	r2, [pc, #312]	@ (8004370 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d03a      	beq.n	80042b2 <HAL_DMAEx_MultiBufferStart_IT+0xcb2>
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a4c      	ldr	r2, [pc, #304]	@ (8004374 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d032      	beq.n	80042ac <HAL_DMAEx_MultiBufferStart_IT+0xcac>
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a4b      	ldr	r2, [pc, #300]	@ (8004378 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d02a      	beq.n	80042a6 <HAL_DMAEx_MultiBufferStart_IT+0xca6>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a49      	ldr	r2, [pc, #292]	@ (800437c <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d022      	beq.n	80042a0 <HAL_DMAEx_MultiBufferStart_IT+0xca0>
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a48      	ldr	r2, [pc, #288]	@ (8004380 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d01a      	beq.n	800429a <HAL_DMAEx_MultiBufferStart_IT+0xc9a>
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a46      	ldr	r2, [pc, #280]	@ (8004384 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d012      	beq.n	8004294 <HAL_DMAEx_MultiBufferStart_IT+0xc94>
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a45      	ldr	r2, [pc, #276]	@ (8004388 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d00a      	beq.n	800428e <HAL_DMAEx_MultiBufferStart_IT+0xc8e>
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a43      	ldr	r2, [pc, #268]	@ (800438c <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d102      	bne.n	8004288 <HAL_DMAEx_MultiBufferStart_IT+0xc88>
 8004282:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004286:	e01e      	b.n	80042c6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8004288:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800428c:	e01b      	b.n	80042c6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800428e:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004292:	e018      	b.n	80042c6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8004294:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004298:	e015      	b.n	80042c6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800429a:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800429e:	e012      	b.n	80042c6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80042a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80042a4:	e00f      	b.n	80042c6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80042a6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80042aa:	e00c      	b.n	80042c6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80042ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80042b0:	e009      	b.n	80042c6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80042b2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80042b6:	e006      	b.n	80042c6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80042b8:	2304      	movs	r3, #4
 80042ba:	e004      	b.n	80042c6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80042bc:	2304      	movs	r3, #4
 80042be:	e002      	b.n	80042c6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80042c0:	2304      	movs	r3, #4
 80042c2:	e000      	b.n	80042c6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80042c4:	2304      	movs	r3, #4
 80042c6:	4a32      	ldr	r2, [pc, #200]	@ (8004390 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 80042c8:	6093      	str	r3, [r2, #8]
 80042ca:	e0e9      	b.n	80044a0 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	461a      	mov	r2, r3
 80042d2:	4b31      	ldr	r3, [pc, #196]	@ (8004398 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 80042d4:	429a      	cmp	r2, r3
 80042d6:	f240 8083 	bls.w	80043e0 <HAL_DMAEx_MultiBufferStart_IT+0xde0>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a20      	ldr	r2, [pc, #128]	@ (8004360 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d079      	beq.n	80043d8 <HAL_DMAEx_MultiBufferStart_IT+0xdd8>
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a1e      	ldr	r2, [pc, #120]	@ (8004364 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d072      	beq.n	80043d4 <HAL_DMAEx_MultiBufferStart_IT+0xdd4>
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a1d      	ldr	r2, [pc, #116]	@ (8004368 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d06b      	beq.n	80043d0 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a1b      	ldr	r2, [pc, #108]	@ (800436c <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d064      	beq.n	80043cc <HAL_DMAEx_MultiBufferStart_IT+0xdcc>
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a1a      	ldr	r2, [pc, #104]	@ (8004370 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d05c      	beq.n	80043c6 <HAL_DMAEx_MultiBufferStart_IT+0xdc6>
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a18      	ldr	r2, [pc, #96]	@ (8004374 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d054      	beq.n	80043c0 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a17      	ldr	r2, [pc, #92]	@ (8004378 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d04c      	beq.n	80043ba <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a15      	ldr	r2, [pc, #84]	@ (800437c <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d044      	beq.n	80043b4 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a14      	ldr	r2, [pc, #80]	@ (8004380 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d03c      	beq.n	80043ae <HAL_DMAEx_MultiBufferStart_IT+0xdae>
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a12      	ldr	r2, [pc, #72]	@ (8004384 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d034      	beq.n	80043a8 <HAL_DMAEx_MultiBufferStart_IT+0xda8>
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a11      	ldr	r2, [pc, #68]	@ (8004388 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d02c      	beq.n	80043a2 <HAL_DMAEx_MultiBufferStart_IT+0xda2>
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a0f      	ldr	r2, [pc, #60]	@ (800438c <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d124      	bne.n	800439c <HAL_DMAEx_MultiBufferStart_IT+0xd9c>
 8004352:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004356:	e040      	b.n	80043da <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8004358:	40026000 	.word	0x40026000
 800435c:	40026458 	.word	0x40026458
 8004360:	40026010 	.word	0x40026010
 8004364:	40026410 	.word	0x40026410
 8004368:	40026070 	.word	0x40026070
 800436c:	40026470 	.word	0x40026470
 8004370:	40026028 	.word	0x40026028
 8004374:	40026428 	.word	0x40026428
 8004378:	40026088 	.word	0x40026088
 800437c:	40026488 	.word	0x40026488
 8004380:	40026040 	.word	0x40026040
 8004384:	40026440 	.word	0x40026440
 8004388:	400260a0 	.word	0x400260a0
 800438c:	400264a0 	.word	0x400264a0
 8004390:	40026400 	.word	0x40026400
 8004394:	400260b8 	.word	0x400260b8
 8004398:	40026058 	.word	0x40026058
 800439c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80043a0:	e01b      	b.n	80043da <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80043a2:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80043a6:	e018      	b.n	80043da <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80043a8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80043ac:	e015      	b.n	80043da <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80043ae:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80043b2:	e012      	b.n	80043da <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80043b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80043b8:	e00f      	b.n	80043da <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80043ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80043be:	e00c      	b.n	80043da <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80043c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80043c4:	e009      	b.n	80043da <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80043c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80043ca:	e006      	b.n	80043da <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80043cc:	2304      	movs	r3, #4
 80043ce:	e004      	b.n	80043da <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80043d0:	2304      	movs	r3, #4
 80043d2:	e002      	b.n	80043da <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80043d4:	2304      	movs	r3, #4
 80043d6:	e000      	b.n	80043da <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80043d8:	2304      	movs	r3, #4
 80043da:	4a8b      	ldr	r2, [pc, #556]	@ (8004608 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 80043dc:	60d3      	str	r3, [r2, #12]
 80043de:	e05f      	b.n	80044a0 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a89      	ldr	r2, [pc, #548]	@ (800460c <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d057      	beq.n	800449a <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a88      	ldr	r2, [pc, #544]	@ (8004610 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d050      	beq.n	8004496 <HAL_DMAEx_MultiBufferStart_IT+0xe96>
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a86      	ldr	r2, [pc, #536]	@ (8004614 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d049      	beq.n	8004492 <HAL_DMAEx_MultiBufferStart_IT+0xe92>
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a85      	ldr	r2, [pc, #532]	@ (8004618 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d042      	beq.n	800448e <HAL_DMAEx_MultiBufferStart_IT+0xe8e>
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a83      	ldr	r2, [pc, #524]	@ (800461c <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d03a      	beq.n	8004488 <HAL_DMAEx_MultiBufferStart_IT+0xe88>
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a82      	ldr	r2, [pc, #520]	@ (8004620 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d032      	beq.n	8004482 <HAL_DMAEx_MultiBufferStart_IT+0xe82>
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a80      	ldr	r2, [pc, #512]	@ (8004624 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d02a      	beq.n	800447c <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a7f      	ldr	r2, [pc, #508]	@ (8004628 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d022      	beq.n	8004476 <HAL_DMAEx_MultiBufferStart_IT+0xe76>
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a7d      	ldr	r2, [pc, #500]	@ (800462c <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d01a      	beq.n	8004470 <HAL_DMAEx_MultiBufferStart_IT+0xe70>
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a7c      	ldr	r2, [pc, #496]	@ (8004630 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d012      	beq.n	800446a <HAL_DMAEx_MultiBufferStart_IT+0xe6a>
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a7a      	ldr	r2, [pc, #488]	@ (8004634 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d00a      	beq.n	8004464 <HAL_DMAEx_MultiBufferStart_IT+0xe64>
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a79      	ldr	r2, [pc, #484]	@ (8004638 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d102      	bne.n	800445e <HAL_DMAEx_MultiBufferStart_IT+0xe5e>
 8004458:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800445c:	e01e      	b.n	800449c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800445e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004462:	e01b      	b.n	800449c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8004464:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004468:	e018      	b.n	800449c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800446a:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800446e:	e015      	b.n	800449c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8004470:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004474:	e012      	b.n	800449c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8004476:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800447a:	e00f      	b.n	800449c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800447c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004480:	e00c      	b.n	800449c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8004482:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004486:	e009      	b.n	800449c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8004488:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800448c:	e006      	b.n	800449c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800448e:	2304      	movs	r3, #4
 8004490:	e004      	b.n	800449c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8004492:	2304      	movs	r3, #4
 8004494:	e002      	b.n	800449c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8004496:	2304      	movs	r3, #4
 8004498:	e000      	b.n	800449c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800449a:	2304      	movs	r3, #4
 800449c:	4a5a      	ldr	r2, [pc, #360]	@ (8004608 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 800449e:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	461a      	mov	r2, r3
 80044a6:	4b65      	ldr	r3, [pc, #404]	@ (800463c <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d95c      	bls.n	8004566 <HAL_DMAEx_MultiBufferStart_IT+0xf66>
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a56      	ldr	r2, [pc, #344]	@ (800460c <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d053      	beq.n	800455e <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a55      	ldr	r2, [pc, #340]	@ (8004610 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d04c      	beq.n	800455a <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a53      	ldr	r2, [pc, #332]	@ (8004614 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d045      	beq.n	8004556 <HAL_DMAEx_MultiBufferStart_IT+0xf56>
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a52      	ldr	r2, [pc, #328]	@ (8004618 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d03e      	beq.n	8004552 <HAL_DMAEx_MultiBufferStart_IT+0xf52>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a50      	ldr	r2, [pc, #320]	@ (800461c <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d037      	beq.n	800454e <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a4f      	ldr	r2, [pc, #316]	@ (8004620 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d030      	beq.n	800454a <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a4d      	ldr	r2, [pc, #308]	@ (8004624 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d029      	beq.n	8004546 <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a4c      	ldr	r2, [pc, #304]	@ (8004628 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d022      	beq.n	8004542 <HAL_DMAEx_MultiBufferStart_IT+0xf42>
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a4a      	ldr	r2, [pc, #296]	@ (800462c <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d01a      	beq.n	800453c <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a49      	ldr	r2, [pc, #292]	@ (8004630 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d012      	beq.n	8004536 <HAL_DMAEx_MultiBufferStart_IT+0xf36>
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a47      	ldr	r2, [pc, #284]	@ (8004634 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d00a      	beq.n	8004530 <HAL_DMAEx_MultiBufferStart_IT+0xf30>
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a46      	ldr	r2, [pc, #280]	@ (8004638 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d102      	bne.n	800452a <HAL_DMAEx_MultiBufferStart_IT+0xf2a>
 8004524:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004528:	e01a      	b.n	8004560 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800452a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800452e:	e017      	b.n	8004560 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8004530:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004534:	e014      	b.n	8004560 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8004536:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800453a:	e011      	b.n	8004560 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800453c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004540:	e00e      	b.n	8004560 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8004542:	2340      	movs	r3, #64	@ 0x40
 8004544:	e00c      	b.n	8004560 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8004546:	2340      	movs	r3, #64	@ 0x40
 8004548:	e00a      	b.n	8004560 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800454a:	2340      	movs	r3, #64	@ 0x40
 800454c:	e008      	b.n	8004560 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800454e:	2340      	movs	r3, #64	@ 0x40
 8004550:	e006      	b.n	8004560 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8004552:	2301      	movs	r3, #1
 8004554:	e004      	b.n	8004560 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8004556:	2301      	movs	r3, #1
 8004558:	e002      	b.n	8004560 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800455a:	2301      	movs	r3, #1
 800455c:	e000      	b.n	8004560 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800455e:	2301      	movs	r3, #1
 8004560:	4a37      	ldr	r2, [pc, #220]	@ (8004640 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8004562:	60d3      	str	r3, [r2, #12]
 8004564:	e141      	b.n	80047ea <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	461a      	mov	r2, r3
 800456c:	4b35      	ldr	r3, [pc, #212]	@ (8004644 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 800456e:	429a      	cmp	r2, r3
 8004570:	d97c      	bls.n	800466c <HAL_DMAEx_MultiBufferStart_IT+0x106c>
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a25      	ldr	r2, [pc, #148]	@ (800460c <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d073      	beq.n	8004664 <HAL_DMAEx_MultiBufferStart_IT+0x1064>
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a23      	ldr	r2, [pc, #140]	@ (8004610 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d06c      	beq.n	8004660 <HAL_DMAEx_MultiBufferStart_IT+0x1060>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a22      	ldr	r2, [pc, #136]	@ (8004614 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d065      	beq.n	800465c <HAL_DMAEx_MultiBufferStart_IT+0x105c>
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a20      	ldr	r2, [pc, #128]	@ (8004618 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d05e      	beq.n	8004658 <HAL_DMAEx_MultiBufferStart_IT+0x1058>
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a1f      	ldr	r2, [pc, #124]	@ (800461c <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d057      	beq.n	8004654 <HAL_DMAEx_MultiBufferStart_IT+0x1054>
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a1d      	ldr	r2, [pc, #116]	@ (8004620 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d050      	beq.n	8004650 <HAL_DMAEx_MultiBufferStart_IT+0x1050>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a1c      	ldr	r2, [pc, #112]	@ (8004624 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d049      	beq.n	800464c <HAL_DMAEx_MultiBufferStart_IT+0x104c>
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a1a      	ldr	r2, [pc, #104]	@ (8004628 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d042      	beq.n	8004648 <HAL_DMAEx_MultiBufferStart_IT+0x1048>
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a19      	ldr	r2, [pc, #100]	@ (800462c <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d01a      	beq.n	8004602 <HAL_DMAEx_MultiBufferStart_IT+0x1002>
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a17      	ldr	r2, [pc, #92]	@ (8004630 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d012      	beq.n	80045fc <HAL_DMAEx_MultiBufferStart_IT+0xffc>
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a16      	ldr	r2, [pc, #88]	@ (8004634 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d00a      	beq.n	80045f6 <HAL_DMAEx_MultiBufferStart_IT+0xff6>
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a14      	ldr	r2, [pc, #80]	@ (8004638 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d102      	bne.n	80045f0 <HAL_DMAEx_MultiBufferStart_IT+0xff0>
 80045ea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80045ee:	e03a      	b.n	8004666 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80045f0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80045f4:	e037      	b.n	8004666 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80045f6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80045fa:	e034      	b.n	8004666 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80045fc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004600:	e031      	b.n	8004666 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8004602:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004606:	e02e      	b.n	8004666 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8004608:	40026000 	.word	0x40026000
 800460c:	40026010 	.word	0x40026010
 8004610:	40026410 	.word	0x40026410
 8004614:	40026070 	.word	0x40026070
 8004618:	40026470 	.word	0x40026470
 800461c:	40026028 	.word	0x40026028
 8004620:	40026428 	.word	0x40026428
 8004624:	40026088 	.word	0x40026088
 8004628:	40026488 	.word	0x40026488
 800462c:	40026040 	.word	0x40026040
 8004630:	40026440 	.word	0x40026440
 8004634:	400260a0 	.word	0x400260a0
 8004638:	400264a0 	.word	0x400264a0
 800463c:	40026458 	.word	0x40026458
 8004640:	40026400 	.word	0x40026400
 8004644:	400260b8 	.word	0x400260b8
 8004648:	2340      	movs	r3, #64	@ 0x40
 800464a:	e00c      	b.n	8004666 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 800464c:	2340      	movs	r3, #64	@ 0x40
 800464e:	e00a      	b.n	8004666 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8004650:	2340      	movs	r3, #64	@ 0x40
 8004652:	e008      	b.n	8004666 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8004654:	2340      	movs	r3, #64	@ 0x40
 8004656:	e006      	b.n	8004666 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8004658:	2301      	movs	r3, #1
 800465a:	e004      	b.n	8004666 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 800465c:	2301      	movs	r3, #1
 800465e:	e002      	b.n	8004666 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8004660:	2301      	movs	r3, #1
 8004662:	e000      	b.n	8004666 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8004664:	2301      	movs	r3, #1
 8004666:	4a7b      	ldr	r2, [pc, #492]	@ (8004854 <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
 8004668:	6093      	str	r3, [r2, #8]
 800466a:	e0be      	b.n	80047ea <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	461a      	mov	r2, r3
 8004672:	4b79      	ldr	r3, [pc, #484]	@ (8004858 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 8004674:	429a      	cmp	r2, r3
 8004676:	d95c      	bls.n	8004732 <HAL_DMAEx_MultiBufferStart_IT+0x1132>
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a77      	ldr	r2, [pc, #476]	@ (800485c <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d053      	beq.n	800472a <HAL_DMAEx_MultiBufferStart_IT+0x112a>
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a76      	ldr	r2, [pc, #472]	@ (8004860 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d04c      	beq.n	8004726 <HAL_DMAEx_MultiBufferStart_IT+0x1126>
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a74      	ldr	r2, [pc, #464]	@ (8004864 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d045      	beq.n	8004722 <HAL_DMAEx_MultiBufferStart_IT+0x1122>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a73      	ldr	r2, [pc, #460]	@ (8004868 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d03e      	beq.n	800471e <HAL_DMAEx_MultiBufferStart_IT+0x111e>
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a71      	ldr	r2, [pc, #452]	@ (800486c <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d037      	beq.n	800471a <HAL_DMAEx_MultiBufferStart_IT+0x111a>
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a70      	ldr	r2, [pc, #448]	@ (8004870 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d030      	beq.n	8004716 <HAL_DMAEx_MultiBufferStart_IT+0x1116>
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a6e      	ldr	r2, [pc, #440]	@ (8004874 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d029      	beq.n	8004712 <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a6d      	ldr	r2, [pc, #436]	@ (8004878 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d022      	beq.n	800470e <HAL_DMAEx_MultiBufferStart_IT+0x110e>
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a6b      	ldr	r2, [pc, #428]	@ (800487c <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d01a      	beq.n	8004708 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a6a      	ldr	r2, [pc, #424]	@ (8004880 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d012      	beq.n	8004702 <HAL_DMAEx_MultiBufferStart_IT+0x1102>
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a68      	ldr	r2, [pc, #416]	@ (8004884 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d00a      	beq.n	80046fc <HAL_DMAEx_MultiBufferStart_IT+0x10fc>
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a67      	ldr	r2, [pc, #412]	@ (8004888 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d102      	bne.n	80046f6 <HAL_DMAEx_MultiBufferStart_IT+0x10f6>
 80046f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80046f4:	e01a      	b.n	800472c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80046f6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80046fa:	e017      	b.n	800472c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80046fc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004700:	e014      	b.n	800472c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8004702:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004706:	e011      	b.n	800472c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8004708:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800470c:	e00e      	b.n	800472c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800470e:	2340      	movs	r3, #64	@ 0x40
 8004710:	e00c      	b.n	800472c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8004712:	2340      	movs	r3, #64	@ 0x40
 8004714:	e00a      	b.n	800472c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8004716:	2340      	movs	r3, #64	@ 0x40
 8004718:	e008      	b.n	800472c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800471a:	2340      	movs	r3, #64	@ 0x40
 800471c:	e006      	b.n	800472c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800471e:	2301      	movs	r3, #1
 8004720:	e004      	b.n	800472c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8004722:	2301      	movs	r3, #1
 8004724:	e002      	b.n	800472c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8004726:	2301      	movs	r3, #1
 8004728:	e000      	b.n	800472c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800472a:	2301      	movs	r3, #1
 800472c:	4a57      	ldr	r2, [pc, #348]	@ (800488c <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 800472e:	60d3      	str	r3, [r2, #12]
 8004730:	e05b      	b.n	80047ea <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a49      	ldr	r2, [pc, #292]	@ (800485c <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d053      	beq.n	80047e4 <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a47      	ldr	r2, [pc, #284]	@ (8004860 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d04c      	beq.n	80047e0 <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a46      	ldr	r2, [pc, #280]	@ (8004864 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d045      	beq.n	80047dc <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a44      	ldr	r2, [pc, #272]	@ (8004868 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d03e      	beq.n	80047d8 <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a43      	ldr	r2, [pc, #268]	@ (800486c <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d037      	beq.n	80047d4 <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a41      	ldr	r2, [pc, #260]	@ (8004870 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d030      	beq.n	80047d0 <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a40      	ldr	r2, [pc, #256]	@ (8004874 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d029      	beq.n	80047cc <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a3e      	ldr	r2, [pc, #248]	@ (8004878 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d022      	beq.n	80047c8 <HAL_DMAEx_MultiBufferStart_IT+0x11c8>
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a3d      	ldr	r2, [pc, #244]	@ (800487c <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d01a      	beq.n	80047c2 <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a3b      	ldr	r2, [pc, #236]	@ (8004880 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d012      	beq.n	80047bc <HAL_DMAEx_MultiBufferStart_IT+0x11bc>
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a3a      	ldr	r2, [pc, #232]	@ (8004884 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d00a      	beq.n	80047b6 <HAL_DMAEx_MultiBufferStart_IT+0x11b6>
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a38      	ldr	r2, [pc, #224]	@ (8004888 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d102      	bne.n	80047b0 <HAL_DMAEx_MultiBufferStart_IT+0x11b0>
 80047aa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80047ae:	e01a      	b.n	80047e6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80047b0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80047b4:	e017      	b.n	80047e6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80047b6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80047ba:	e014      	b.n	80047e6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80047bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80047c0:	e011      	b.n	80047e6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80047c2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80047c6:	e00e      	b.n	80047e6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80047c8:	2340      	movs	r3, #64	@ 0x40
 80047ca:	e00c      	b.n	80047e6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80047cc:	2340      	movs	r3, #64	@ 0x40
 80047ce:	e00a      	b.n	80047e6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80047d0:	2340      	movs	r3, #64	@ 0x40
 80047d2:	e008      	b.n	80047e6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80047d4:	2340      	movs	r3, #64	@ 0x40
 80047d6:	e006      	b.n	80047e6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80047d8:	2301      	movs	r3, #1
 80047da:	e004      	b.n	80047e6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80047dc:	2301      	movs	r3, #1
 80047de:	e002      	b.n	80047e6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80047e0:	2301      	movs	r3, #1
 80047e2:	e000      	b.n	80047e6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80047e4:	2301      	movs	r3, #1
 80047e6:	4a29      	ldr	r2, [pc, #164]	@ (800488c <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 80047e8:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f042 0216 	orr.w	r2, r2, #22
 80047f8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	695a      	ldr	r2, [r3, #20]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004808:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800480e:	2b00      	cmp	r3, #0
 8004810:	d103      	bne.n	800481a <HAL_DMAEx_MultiBufferStart_IT+0x121a>
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004816:	2b00      	cmp	r3, #0
 8004818:	d007      	beq.n	800482a <HAL_DMAEx_MultiBufferStart_IT+0x122a>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f042 0208 	orr.w	r2, r2, #8
 8004828:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f042 0201 	orr.w	r2, r2, #1
 8004838:	601a      	str	r2, [r3, #0]
 800483a:	e005      	b.n	8004848 <HAL_DMAEx_MultiBufferStart_IT+0x1248>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2200      	movs	r2, #0
 8004840:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004844:	2302      	movs	r3, #2
 8004846:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 8004848:	7dfb      	ldrb	r3, [r7, #23]
}
 800484a:	4618      	mov	r0, r3
 800484c:	3718      	adds	r7, #24
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
 8004852:	bf00      	nop
 8004854:	40026400 	.word	0x40026400
 8004858:	40026058 	.word	0x40026058
 800485c:	40026010 	.word	0x40026010
 8004860:	40026410 	.word	0x40026410
 8004864:	40026070 	.word	0x40026070
 8004868:	40026470 	.word	0x40026470
 800486c:	40026028 	.word	0x40026028
 8004870:	40026428 	.word	0x40026428
 8004874:	40026088 	.word	0x40026088
 8004878:	40026488 	.word	0x40026488
 800487c:	40026040 	.word	0x40026040
 8004880:	40026440 	.word	0x40026440
 8004884:	400260a0 	.word	0x400260a0
 8004888:	400264a0 	.word	0x400264a0
 800488c:	40026000 	.word	0x40026000

08004890 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8004890:	b480      	push	{r7}
 8004892:	b085      	sub	sp, #20
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	60b9      	str	r1, [r7, #8]
 800489a:	4613      	mov	r3, r2
 800489c:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
 800489e:	79fb      	ldrb	r3, [r7, #7]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d104      	bne.n	80048ae <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	68ba      	ldr	r2, [r7, #8]
 80048aa:	60da      	str	r2, [r3, #12]
 80048ac:	e003      	b.n	80048b6 <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	68ba      	ldr	r2, [r7, #8]
 80048b4:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80048b6:	2300      	movs	r3, #0
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3714      	adds	r7, #20
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr

080048c4 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 80048c4:	b480      	push	{r7}
 80048c6:	b085      	sub	sp, #20
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	60b9      	str	r1, [r7, #8]
 80048ce:	607a      	str	r2, [r7, #4]
 80048d0:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	683a      	ldr	r2, [r7, #0]
 80048d8:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	2b40      	cmp	r3, #64	@ 0x40
 80048e0:	d108      	bne.n	80048f4 <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68ba      	ldr	r2, [r7, #8]
 80048f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80048f2:	e007      	b.n	8004904 <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	68ba      	ldr	r2, [r7, #8]
 80048fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	60da      	str	r2, [r3, #12]
}
 8004904:	bf00      	nop
 8004906:	3714      	adds	r7, #20
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004910:	b480      	push	{r7}
 8004912:	b089      	sub	sp, #36	@ 0x24
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800491a:	2300      	movs	r3, #0
 800491c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800491e:	2300      	movs	r3, #0
 8004920:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004922:	2300      	movs	r3, #0
 8004924:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004926:	2300      	movs	r3, #0
 8004928:	61fb      	str	r3, [r7, #28]
 800492a:	e165      	b.n	8004bf8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800492c:	2201      	movs	r2, #1
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	fa02 f303 	lsl.w	r3, r2, r3
 8004934:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	697a      	ldr	r2, [r7, #20]
 800493c:	4013      	ands	r3, r2
 800493e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004940:	693a      	ldr	r2, [r7, #16]
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	429a      	cmp	r2, r3
 8004946:	f040 8154 	bne.w	8004bf2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	f003 0303 	and.w	r3, r3, #3
 8004952:	2b01      	cmp	r3, #1
 8004954:	d005      	beq.n	8004962 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800495e:	2b02      	cmp	r3, #2
 8004960:	d130      	bne.n	80049c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004968:	69fb      	ldr	r3, [r7, #28]
 800496a:	005b      	lsls	r3, r3, #1
 800496c:	2203      	movs	r2, #3
 800496e:	fa02 f303 	lsl.w	r3, r2, r3
 8004972:	43db      	mvns	r3, r3
 8004974:	69ba      	ldr	r2, [r7, #24]
 8004976:	4013      	ands	r3, r2
 8004978:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	68da      	ldr	r2, [r3, #12]
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	005b      	lsls	r3, r3, #1
 8004982:	fa02 f303 	lsl.w	r3, r2, r3
 8004986:	69ba      	ldr	r2, [r7, #24]
 8004988:	4313      	orrs	r3, r2
 800498a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	69ba      	ldr	r2, [r7, #24]
 8004990:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004998:	2201      	movs	r2, #1
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	fa02 f303 	lsl.w	r3, r2, r3
 80049a0:	43db      	mvns	r3, r3
 80049a2:	69ba      	ldr	r2, [r7, #24]
 80049a4:	4013      	ands	r3, r2
 80049a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	091b      	lsrs	r3, r3, #4
 80049ae:	f003 0201 	and.w	r2, r3, #1
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	fa02 f303 	lsl.w	r3, r2, r3
 80049b8:	69ba      	ldr	r2, [r7, #24]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	69ba      	ldr	r2, [r7, #24]
 80049c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	f003 0303 	and.w	r3, r3, #3
 80049cc:	2b03      	cmp	r3, #3
 80049ce:	d017      	beq.n	8004a00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	005b      	lsls	r3, r3, #1
 80049da:	2203      	movs	r2, #3
 80049dc:	fa02 f303 	lsl.w	r3, r2, r3
 80049e0:	43db      	mvns	r3, r3
 80049e2:	69ba      	ldr	r2, [r7, #24]
 80049e4:	4013      	ands	r3, r2
 80049e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	689a      	ldr	r2, [r3, #8]
 80049ec:	69fb      	ldr	r3, [r7, #28]
 80049ee:	005b      	lsls	r3, r3, #1
 80049f0:	fa02 f303 	lsl.w	r3, r2, r3
 80049f4:	69ba      	ldr	r2, [r7, #24]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	69ba      	ldr	r2, [r7, #24]
 80049fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	f003 0303 	and.w	r3, r3, #3
 8004a08:	2b02      	cmp	r3, #2
 8004a0a:	d123      	bne.n	8004a54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	08da      	lsrs	r2, r3, #3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	3208      	adds	r2, #8
 8004a14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	f003 0307 	and.w	r3, r3, #7
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	220f      	movs	r2, #15
 8004a24:	fa02 f303 	lsl.w	r3, r2, r3
 8004a28:	43db      	mvns	r3, r3
 8004a2a:	69ba      	ldr	r2, [r7, #24]
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	691a      	ldr	r2, [r3, #16]
 8004a34:	69fb      	ldr	r3, [r7, #28]
 8004a36:	f003 0307 	and.w	r3, r3, #7
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a40:	69ba      	ldr	r2, [r7, #24]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	08da      	lsrs	r2, r3, #3
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	3208      	adds	r2, #8
 8004a4e:	69b9      	ldr	r1, [r7, #24]
 8004a50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004a5a:	69fb      	ldr	r3, [r7, #28]
 8004a5c:	005b      	lsls	r3, r3, #1
 8004a5e:	2203      	movs	r2, #3
 8004a60:	fa02 f303 	lsl.w	r3, r2, r3
 8004a64:	43db      	mvns	r3, r3
 8004a66:	69ba      	ldr	r2, [r7, #24]
 8004a68:	4013      	ands	r3, r2
 8004a6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f003 0203 	and.w	r2, r3, #3
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	005b      	lsls	r3, r3, #1
 8004a78:	fa02 f303 	lsl.w	r3, r2, r3
 8004a7c:	69ba      	ldr	r2, [r7, #24]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	69ba      	ldr	r2, [r7, #24]
 8004a86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	f000 80ae 	beq.w	8004bf2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a96:	2300      	movs	r3, #0
 8004a98:	60fb      	str	r3, [r7, #12]
 8004a9a:	4b5d      	ldr	r3, [pc, #372]	@ (8004c10 <HAL_GPIO_Init+0x300>)
 8004a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a9e:	4a5c      	ldr	r2, [pc, #368]	@ (8004c10 <HAL_GPIO_Init+0x300>)
 8004aa0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004aa4:	6453      	str	r3, [r2, #68]	@ 0x44
 8004aa6:	4b5a      	ldr	r3, [pc, #360]	@ (8004c10 <HAL_GPIO_Init+0x300>)
 8004aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aaa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004aae:	60fb      	str	r3, [r7, #12]
 8004ab0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004ab2:	4a58      	ldr	r2, [pc, #352]	@ (8004c14 <HAL_GPIO_Init+0x304>)
 8004ab4:	69fb      	ldr	r3, [r7, #28]
 8004ab6:	089b      	lsrs	r3, r3, #2
 8004ab8:	3302      	adds	r3, #2
 8004aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004abe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004ac0:	69fb      	ldr	r3, [r7, #28]
 8004ac2:	f003 0303 	and.w	r3, r3, #3
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	220f      	movs	r2, #15
 8004aca:	fa02 f303 	lsl.w	r3, r2, r3
 8004ace:	43db      	mvns	r3, r3
 8004ad0:	69ba      	ldr	r2, [r7, #24]
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a4f      	ldr	r2, [pc, #316]	@ (8004c18 <HAL_GPIO_Init+0x308>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d025      	beq.n	8004b2a <HAL_GPIO_Init+0x21a>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4a4e      	ldr	r2, [pc, #312]	@ (8004c1c <HAL_GPIO_Init+0x30c>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d01f      	beq.n	8004b26 <HAL_GPIO_Init+0x216>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4a4d      	ldr	r2, [pc, #308]	@ (8004c20 <HAL_GPIO_Init+0x310>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d019      	beq.n	8004b22 <HAL_GPIO_Init+0x212>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a4c      	ldr	r2, [pc, #304]	@ (8004c24 <HAL_GPIO_Init+0x314>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d013      	beq.n	8004b1e <HAL_GPIO_Init+0x20e>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a4b      	ldr	r2, [pc, #300]	@ (8004c28 <HAL_GPIO_Init+0x318>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d00d      	beq.n	8004b1a <HAL_GPIO_Init+0x20a>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a4a      	ldr	r2, [pc, #296]	@ (8004c2c <HAL_GPIO_Init+0x31c>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d007      	beq.n	8004b16 <HAL_GPIO_Init+0x206>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a49      	ldr	r2, [pc, #292]	@ (8004c30 <HAL_GPIO_Init+0x320>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d101      	bne.n	8004b12 <HAL_GPIO_Init+0x202>
 8004b0e:	2306      	movs	r3, #6
 8004b10:	e00c      	b.n	8004b2c <HAL_GPIO_Init+0x21c>
 8004b12:	2307      	movs	r3, #7
 8004b14:	e00a      	b.n	8004b2c <HAL_GPIO_Init+0x21c>
 8004b16:	2305      	movs	r3, #5
 8004b18:	e008      	b.n	8004b2c <HAL_GPIO_Init+0x21c>
 8004b1a:	2304      	movs	r3, #4
 8004b1c:	e006      	b.n	8004b2c <HAL_GPIO_Init+0x21c>
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e004      	b.n	8004b2c <HAL_GPIO_Init+0x21c>
 8004b22:	2302      	movs	r3, #2
 8004b24:	e002      	b.n	8004b2c <HAL_GPIO_Init+0x21c>
 8004b26:	2301      	movs	r3, #1
 8004b28:	e000      	b.n	8004b2c <HAL_GPIO_Init+0x21c>
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	69fa      	ldr	r2, [r7, #28]
 8004b2e:	f002 0203 	and.w	r2, r2, #3
 8004b32:	0092      	lsls	r2, r2, #2
 8004b34:	4093      	lsls	r3, r2
 8004b36:	69ba      	ldr	r2, [r7, #24]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b3c:	4935      	ldr	r1, [pc, #212]	@ (8004c14 <HAL_GPIO_Init+0x304>)
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	089b      	lsrs	r3, r3, #2
 8004b42:	3302      	adds	r3, #2
 8004b44:	69ba      	ldr	r2, [r7, #24]
 8004b46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004b4a:	4b3a      	ldr	r3, [pc, #232]	@ (8004c34 <HAL_GPIO_Init+0x324>)
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	43db      	mvns	r3, r3
 8004b54:	69ba      	ldr	r2, [r7, #24]
 8004b56:	4013      	ands	r3, r2
 8004b58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d003      	beq.n	8004b6e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004b66:	69ba      	ldr	r2, [r7, #24]
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004b6e:	4a31      	ldr	r2, [pc, #196]	@ (8004c34 <HAL_GPIO_Init+0x324>)
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004b74:	4b2f      	ldr	r3, [pc, #188]	@ (8004c34 <HAL_GPIO_Init+0x324>)
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	43db      	mvns	r3, r3
 8004b7e:	69ba      	ldr	r2, [r7, #24]
 8004b80:	4013      	ands	r3, r2
 8004b82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d003      	beq.n	8004b98 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004b90:	69ba      	ldr	r2, [r7, #24]
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004b98:	4a26      	ldr	r2, [pc, #152]	@ (8004c34 <HAL_GPIO_Init+0x324>)
 8004b9a:	69bb      	ldr	r3, [r7, #24]
 8004b9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004b9e:	4b25      	ldr	r3, [pc, #148]	@ (8004c34 <HAL_GPIO_Init+0x324>)
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	43db      	mvns	r3, r3
 8004ba8:	69ba      	ldr	r2, [r7, #24]
 8004baa:	4013      	ands	r3, r2
 8004bac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d003      	beq.n	8004bc2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004bba:	69ba      	ldr	r2, [r7, #24]
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004bc2:	4a1c      	ldr	r2, [pc, #112]	@ (8004c34 <HAL_GPIO_Init+0x324>)
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004bc8:	4b1a      	ldr	r3, [pc, #104]	@ (8004c34 <HAL_GPIO_Init+0x324>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	43db      	mvns	r3, r3
 8004bd2:	69ba      	ldr	r2, [r7, #24]
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d003      	beq.n	8004bec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004be4:	69ba      	ldr	r2, [r7, #24]
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004bec:	4a11      	ldr	r2, [pc, #68]	@ (8004c34 <HAL_GPIO_Init+0x324>)
 8004bee:	69bb      	ldr	r3, [r7, #24]
 8004bf0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	3301      	adds	r3, #1
 8004bf6:	61fb      	str	r3, [r7, #28]
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	2b0f      	cmp	r3, #15
 8004bfc:	f67f ae96 	bls.w	800492c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004c00:	bf00      	nop
 8004c02:	bf00      	nop
 8004c04:	3724      	adds	r7, #36	@ 0x24
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr
 8004c0e:	bf00      	nop
 8004c10:	40023800 	.word	0x40023800
 8004c14:	40013800 	.word	0x40013800
 8004c18:	40020000 	.word	0x40020000
 8004c1c:	40020400 	.word	0x40020400
 8004c20:	40020800 	.word	0x40020800
 8004c24:	40020c00 	.word	0x40020c00
 8004c28:	40021000 	.word	0x40021000
 8004c2c:	40021400 	.word	0x40021400
 8004c30:	40021800 	.word	0x40021800
 8004c34:	40013c00 	.word	0x40013c00

08004c38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	460b      	mov	r3, r1
 8004c42:	807b      	strh	r3, [r7, #2]
 8004c44:	4613      	mov	r3, r2
 8004c46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004c48:	787b      	ldrb	r3, [r7, #1]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d003      	beq.n	8004c56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c4e:	887a      	ldrh	r2, [r7, #2]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004c54:	e003      	b.n	8004c5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004c56:	887b      	ldrh	r3, [r7, #2]
 8004c58:	041a      	lsls	r2, r3, #16
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	619a      	str	r2, [r3, #24]
}
 8004c5e:	bf00      	nop
 8004c60:	370c      	adds	r7, #12
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr

08004c6a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004c6a:	b480      	push	{r7}
 8004c6c:	b085      	sub	sp, #20
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	6078      	str	r0, [r7, #4]
 8004c72:	460b      	mov	r3, r1
 8004c74:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	695b      	ldr	r3, [r3, #20]
 8004c7a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004c7c:	887a      	ldrh	r2, [r7, #2]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	4013      	ands	r3, r2
 8004c82:	041a      	lsls	r2, r3, #16
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	43d9      	mvns	r1, r3
 8004c88:	887b      	ldrh	r3, [r7, #2]
 8004c8a:	400b      	ands	r3, r1
 8004c8c:	431a      	orrs	r2, r3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	619a      	str	r2, [r3, #24]
}
 8004c92:	bf00      	nop
 8004c94:	3714      	adds	r7, #20
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr
	...

08004ca0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b082      	sub	sp, #8
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004caa:	4b08      	ldr	r3, [pc, #32]	@ (8004ccc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004cac:	695a      	ldr	r2, [r3, #20]
 8004cae:	88fb      	ldrh	r3, [r7, #6]
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d006      	beq.n	8004cc4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004cb6:	4a05      	ldr	r2, [pc, #20]	@ (8004ccc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004cb8:	88fb      	ldrh	r3, [r7, #6]
 8004cba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004cbc:	88fb      	ldrh	r3, [r7, #6]
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f000 f806 	bl	8004cd0 <HAL_GPIO_EXTI_Callback>
  }
}
 8004cc4:	bf00      	nop
 8004cc6:	3708      	adds	r7, #8
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	40013c00 	.word	0x40013c00

08004cd0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b083      	sub	sp, #12
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004cda:	bf00      	nop
 8004cdc:	370c      	adds	r7, #12
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr
	...

08004ce8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b084      	sub	sp, #16
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d101      	bne.n	8004cfa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e12b      	b.n	8004f52 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d106      	bne.n	8004d14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f7fd f944 	bl	8001f9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2224      	movs	r2, #36	@ 0x24
 8004d18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f022 0201 	bic.w	r2, r2, #1
 8004d2a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004d3a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004d4a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004d4c:	f001 f99c 	bl	8006088 <HAL_RCC_GetPCLK1Freq>
 8004d50:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	4a81      	ldr	r2, [pc, #516]	@ (8004f5c <HAL_I2C_Init+0x274>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d807      	bhi.n	8004d6c <HAL_I2C_Init+0x84>
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	4a80      	ldr	r2, [pc, #512]	@ (8004f60 <HAL_I2C_Init+0x278>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	bf94      	ite	ls
 8004d64:	2301      	movls	r3, #1
 8004d66:	2300      	movhi	r3, #0
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	e006      	b.n	8004d7a <HAL_I2C_Init+0x92>
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	4a7d      	ldr	r2, [pc, #500]	@ (8004f64 <HAL_I2C_Init+0x27c>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	bf94      	ite	ls
 8004d74:	2301      	movls	r3, #1
 8004d76:	2300      	movhi	r3, #0
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d001      	beq.n	8004d82 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e0e7      	b.n	8004f52 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	4a78      	ldr	r2, [pc, #480]	@ (8004f68 <HAL_I2C_Init+0x280>)
 8004d86:	fba2 2303 	umull	r2, r3, r2, r3
 8004d8a:	0c9b      	lsrs	r3, r3, #18
 8004d8c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	68ba      	ldr	r2, [r7, #8]
 8004d9e:	430a      	orrs	r2, r1
 8004da0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	6a1b      	ldr	r3, [r3, #32]
 8004da8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	4a6a      	ldr	r2, [pc, #424]	@ (8004f5c <HAL_I2C_Init+0x274>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d802      	bhi.n	8004dbc <HAL_I2C_Init+0xd4>
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	3301      	adds	r3, #1
 8004dba:	e009      	b.n	8004dd0 <HAL_I2C_Init+0xe8>
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004dc2:	fb02 f303 	mul.w	r3, r2, r3
 8004dc6:	4a69      	ldr	r2, [pc, #420]	@ (8004f6c <HAL_I2C_Init+0x284>)
 8004dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8004dcc:	099b      	lsrs	r3, r3, #6
 8004dce:	3301      	adds	r3, #1
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	6812      	ldr	r2, [r2, #0]
 8004dd4:	430b      	orrs	r3, r1
 8004dd6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	69db      	ldr	r3, [r3, #28]
 8004dde:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004de2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	495c      	ldr	r1, [pc, #368]	@ (8004f5c <HAL_I2C_Init+0x274>)
 8004dec:	428b      	cmp	r3, r1
 8004dee:	d819      	bhi.n	8004e24 <HAL_I2C_Init+0x13c>
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	1e59      	subs	r1, r3, #1
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	005b      	lsls	r3, r3, #1
 8004dfa:	fbb1 f3f3 	udiv	r3, r1, r3
 8004dfe:	1c59      	adds	r1, r3, #1
 8004e00:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004e04:	400b      	ands	r3, r1
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d00a      	beq.n	8004e20 <HAL_I2C_Init+0x138>
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	1e59      	subs	r1, r3, #1
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	005b      	lsls	r3, r3, #1
 8004e14:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e18:	3301      	adds	r3, #1
 8004e1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e1e:	e051      	b.n	8004ec4 <HAL_I2C_Init+0x1dc>
 8004e20:	2304      	movs	r3, #4
 8004e22:	e04f      	b.n	8004ec4 <HAL_I2C_Init+0x1dc>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d111      	bne.n	8004e50 <HAL_I2C_Init+0x168>
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	1e58      	subs	r0, r3, #1
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6859      	ldr	r1, [r3, #4]
 8004e34:	460b      	mov	r3, r1
 8004e36:	005b      	lsls	r3, r3, #1
 8004e38:	440b      	add	r3, r1
 8004e3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e3e:	3301      	adds	r3, #1
 8004e40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	bf0c      	ite	eq
 8004e48:	2301      	moveq	r3, #1
 8004e4a:	2300      	movne	r3, #0
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	e012      	b.n	8004e76 <HAL_I2C_Init+0x18e>
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	1e58      	subs	r0, r3, #1
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6859      	ldr	r1, [r3, #4]
 8004e58:	460b      	mov	r3, r1
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	440b      	add	r3, r1
 8004e5e:	0099      	lsls	r1, r3, #2
 8004e60:	440b      	add	r3, r1
 8004e62:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e66:	3301      	adds	r3, #1
 8004e68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	bf0c      	ite	eq
 8004e70:	2301      	moveq	r3, #1
 8004e72:	2300      	movne	r3, #0
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d001      	beq.n	8004e7e <HAL_I2C_Init+0x196>
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e022      	b.n	8004ec4 <HAL_I2C_Init+0x1dc>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d10e      	bne.n	8004ea4 <HAL_I2C_Init+0x1bc>
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	1e58      	subs	r0, r3, #1
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6859      	ldr	r1, [r3, #4]
 8004e8e:	460b      	mov	r3, r1
 8004e90:	005b      	lsls	r3, r3, #1
 8004e92:	440b      	add	r3, r1
 8004e94:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e98:	3301      	adds	r3, #1
 8004e9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ea2:	e00f      	b.n	8004ec4 <HAL_I2C_Init+0x1dc>
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	1e58      	subs	r0, r3, #1
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6859      	ldr	r1, [r3, #4]
 8004eac:	460b      	mov	r3, r1
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	440b      	add	r3, r1
 8004eb2:	0099      	lsls	r1, r3, #2
 8004eb4:	440b      	add	r3, r1
 8004eb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004eba:	3301      	adds	r3, #1
 8004ebc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ec0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004ec4:	6879      	ldr	r1, [r7, #4]
 8004ec6:	6809      	ldr	r1, [r1, #0]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	69da      	ldr	r2, [r3, #28]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a1b      	ldr	r3, [r3, #32]
 8004ede:	431a      	orrs	r2, r3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	430a      	orrs	r2, r1
 8004ee6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004ef2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	6911      	ldr	r1, [r2, #16]
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	68d2      	ldr	r2, [r2, #12]
 8004efe:	4311      	orrs	r1, r2
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	6812      	ldr	r2, [r2, #0]
 8004f04:	430b      	orrs	r3, r1
 8004f06:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	695a      	ldr	r2, [r3, #20]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	699b      	ldr	r3, [r3, #24]
 8004f1a:	431a      	orrs	r2, r3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	430a      	orrs	r2, r1
 8004f22:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f042 0201 	orr.w	r2, r2, #1
 8004f32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2220      	movs	r2, #32
 8004f3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3710      	adds	r7, #16
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	000186a0 	.word	0x000186a0
 8004f60:	001e847f 	.word	0x001e847f
 8004f64:	003d08ff 	.word	0x003d08ff
 8004f68:	431bde83 	.word	0x431bde83
 8004f6c:	10624dd3 	.word	0x10624dd3

08004f70 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b088      	sub	sp, #32
 8004f74:	af02      	add	r7, sp, #8
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	607a      	str	r2, [r7, #4]
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	817b      	strh	r3, [r7, #10]
 8004f80:	4613      	mov	r3, r2
 8004f82:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004f84:	f7fd fb30 	bl	80025e8 <HAL_GetTick>
 8004f88:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	2b20      	cmp	r3, #32
 8004f94:	f040 80e0 	bne.w	8005158 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	9300      	str	r3, [sp, #0]
 8004f9c:	2319      	movs	r3, #25
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	4970      	ldr	r1, [pc, #448]	@ (8005164 <HAL_I2C_Master_Transmit+0x1f4>)
 8004fa2:	68f8      	ldr	r0, [r7, #12]
 8004fa4:	f000 fc58 	bl	8005858 <I2C_WaitOnFlagUntilTimeout>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d001      	beq.n	8004fb2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004fae:	2302      	movs	r3, #2
 8004fb0:	e0d3      	b.n	800515a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d101      	bne.n	8004fc0 <HAL_I2C_Master_Transmit+0x50>
 8004fbc:	2302      	movs	r3, #2
 8004fbe:	e0cc      	b.n	800515a <HAL_I2C_Master_Transmit+0x1ea>
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0301 	and.w	r3, r3, #1
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d007      	beq.n	8004fe6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f042 0201 	orr.w	r2, r2, #1
 8004fe4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ff4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2221      	movs	r2, #33	@ 0x21
 8004ffa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2210      	movs	r2, #16
 8005002:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2200      	movs	r2, #0
 800500a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	893a      	ldrh	r2, [r7, #8]
 8005016:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800501c:	b29a      	uxth	r2, r3
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	4a50      	ldr	r2, [pc, #320]	@ (8005168 <HAL_I2C_Master_Transmit+0x1f8>)
 8005026:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005028:	8979      	ldrh	r1, [r7, #10]
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	6a3a      	ldr	r2, [r7, #32]
 800502e:	68f8      	ldr	r0, [r7, #12]
 8005030:	f000 fac2 	bl	80055b8 <I2C_MasterRequestWrite>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d001      	beq.n	800503e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	e08d      	b.n	800515a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800503e:	2300      	movs	r3, #0
 8005040:	613b      	str	r3, [r7, #16]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	695b      	ldr	r3, [r3, #20]
 8005048:	613b      	str	r3, [r7, #16]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	699b      	ldr	r3, [r3, #24]
 8005050:	613b      	str	r3, [r7, #16]
 8005052:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005054:	e066      	b.n	8005124 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005056:	697a      	ldr	r2, [r7, #20]
 8005058:	6a39      	ldr	r1, [r7, #32]
 800505a:	68f8      	ldr	r0, [r7, #12]
 800505c:	f000 fcd2 	bl	8005a04 <I2C_WaitOnTXEFlagUntilTimeout>
 8005060:	4603      	mov	r3, r0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d00d      	beq.n	8005082 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800506a:	2b04      	cmp	r3, #4
 800506c:	d107      	bne.n	800507e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800507c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e06b      	b.n	800515a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005086:	781a      	ldrb	r2, [r3, #0]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005092:	1c5a      	adds	r2, r3, #1
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800509c:	b29b      	uxth	r3, r3
 800509e:	3b01      	subs	r3, #1
 80050a0:	b29a      	uxth	r2, r3
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050aa:	3b01      	subs	r3, #1
 80050ac:	b29a      	uxth	r2, r3
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	695b      	ldr	r3, [r3, #20]
 80050b8:	f003 0304 	and.w	r3, r3, #4
 80050bc:	2b04      	cmp	r3, #4
 80050be:	d11b      	bne.n	80050f8 <HAL_I2C_Master_Transmit+0x188>
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d017      	beq.n	80050f8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050cc:	781a      	ldrb	r2, [r3, #0]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050d8:	1c5a      	adds	r2, r3, #1
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	3b01      	subs	r3, #1
 80050e6:	b29a      	uxth	r2, r3
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050f0:	3b01      	subs	r3, #1
 80050f2:	b29a      	uxth	r2, r3
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050f8:	697a      	ldr	r2, [r7, #20]
 80050fa:	6a39      	ldr	r1, [r7, #32]
 80050fc:	68f8      	ldr	r0, [r7, #12]
 80050fe:	f000 fcc2 	bl	8005a86 <I2C_WaitOnBTFFlagUntilTimeout>
 8005102:	4603      	mov	r3, r0
 8005104:	2b00      	cmp	r3, #0
 8005106:	d00d      	beq.n	8005124 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800510c:	2b04      	cmp	r3, #4
 800510e:	d107      	bne.n	8005120 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800511e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	e01a      	b.n	800515a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005128:	2b00      	cmp	r3, #0
 800512a:	d194      	bne.n	8005056 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800513a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2220      	movs	r2, #32
 8005140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2200      	movs	r2, #0
 8005148:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2200      	movs	r2, #0
 8005150:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005154:	2300      	movs	r3, #0
 8005156:	e000      	b.n	800515a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005158:	2302      	movs	r3, #2
  }
}
 800515a:	4618      	mov	r0, r3
 800515c:	3718      	adds	r7, #24
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop
 8005164:	00100002 	.word	0x00100002
 8005168:	ffff0000 	.word	0xffff0000

0800516c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b08c      	sub	sp, #48	@ 0x30
 8005170:	af02      	add	r7, sp, #8
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	607a      	str	r2, [r7, #4]
 8005176:	461a      	mov	r2, r3
 8005178:	460b      	mov	r3, r1
 800517a:	817b      	strh	r3, [r7, #10]
 800517c:	4613      	mov	r3, r2
 800517e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005180:	f7fd fa32 	bl	80025e8 <HAL_GetTick>
 8005184:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800518c:	b2db      	uxtb	r3, r3
 800518e:	2b20      	cmp	r3, #32
 8005190:	f040 820b 	bne.w	80055aa <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005196:	9300      	str	r3, [sp, #0]
 8005198:	2319      	movs	r3, #25
 800519a:	2201      	movs	r2, #1
 800519c:	497c      	ldr	r1, [pc, #496]	@ (8005390 <HAL_I2C_Master_Receive+0x224>)
 800519e:	68f8      	ldr	r0, [r7, #12]
 80051a0:	f000 fb5a 	bl	8005858 <I2C_WaitOnFlagUntilTimeout>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d001      	beq.n	80051ae <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80051aa:	2302      	movs	r3, #2
 80051ac:	e1fe      	b.n	80055ac <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d101      	bne.n	80051bc <HAL_I2C_Master_Receive+0x50>
 80051b8:	2302      	movs	r3, #2
 80051ba:	e1f7      	b.n	80055ac <HAL_I2C_Master_Receive+0x440>
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2201      	movs	r2, #1
 80051c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0301 	and.w	r3, r3, #1
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d007      	beq.n	80051e2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f042 0201 	orr.w	r2, r2, #1
 80051e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80051f0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2222      	movs	r2, #34	@ 0x22
 80051f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2210      	movs	r2, #16
 80051fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2200      	movs	r2, #0
 8005206:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	893a      	ldrh	r2, [r7, #8]
 8005212:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005218:	b29a      	uxth	r2, r3
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	4a5c      	ldr	r2, [pc, #368]	@ (8005394 <HAL_I2C_Master_Receive+0x228>)
 8005222:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005224:	8979      	ldrh	r1, [r7, #10]
 8005226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005228:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800522a:	68f8      	ldr	r0, [r7, #12]
 800522c:	f000 fa46 	bl	80056bc <I2C_MasterRequestRead>
 8005230:	4603      	mov	r3, r0
 8005232:	2b00      	cmp	r3, #0
 8005234:	d001      	beq.n	800523a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	e1b8      	b.n	80055ac <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800523e:	2b00      	cmp	r3, #0
 8005240:	d113      	bne.n	800526a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005242:	2300      	movs	r3, #0
 8005244:	623b      	str	r3, [r7, #32]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	695b      	ldr	r3, [r3, #20]
 800524c:	623b      	str	r3, [r7, #32]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	699b      	ldr	r3, [r3, #24]
 8005254:	623b      	str	r3, [r7, #32]
 8005256:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005266:	601a      	str	r2, [r3, #0]
 8005268:	e18c      	b.n	8005584 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800526e:	2b01      	cmp	r3, #1
 8005270:	d11b      	bne.n	80052aa <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005280:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005282:	2300      	movs	r3, #0
 8005284:	61fb      	str	r3, [r7, #28]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	695b      	ldr	r3, [r3, #20]
 800528c:	61fb      	str	r3, [r7, #28]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	699b      	ldr	r3, [r3, #24]
 8005294:	61fb      	str	r3, [r7, #28]
 8005296:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052a6:	601a      	str	r2, [r3, #0]
 80052a8:	e16c      	b.n	8005584 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052ae:	2b02      	cmp	r3, #2
 80052b0:	d11b      	bne.n	80052ea <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052c0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80052d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052d2:	2300      	movs	r3, #0
 80052d4:	61bb      	str	r3, [r7, #24]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	695b      	ldr	r3, [r3, #20]
 80052dc:	61bb      	str	r3, [r7, #24]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	699b      	ldr	r3, [r3, #24]
 80052e4:	61bb      	str	r3, [r7, #24]
 80052e6:	69bb      	ldr	r3, [r7, #24]
 80052e8:	e14c      	b.n	8005584 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80052f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052fa:	2300      	movs	r3, #0
 80052fc:	617b      	str	r3, [r7, #20]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	695b      	ldr	r3, [r3, #20]
 8005304:	617b      	str	r3, [r7, #20]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	699b      	ldr	r3, [r3, #24]
 800530c:	617b      	str	r3, [r7, #20]
 800530e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005310:	e138      	b.n	8005584 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005316:	2b03      	cmp	r3, #3
 8005318:	f200 80f1 	bhi.w	80054fe <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005320:	2b01      	cmp	r3, #1
 8005322:	d123      	bne.n	800536c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005324:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005326:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005328:	68f8      	ldr	r0, [r7, #12]
 800532a:	f000 fbed 	bl	8005b08 <I2C_WaitOnRXNEFlagUntilTimeout>
 800532e:	4603      	mov	r3, r0
 8005330:	2b00      	cmp	r3, #0
 8005332:	d001      	beq.n	8005338 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	e139      	b.n	80055ac <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	691a      	ldr	r2, [r3, #16]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005342:	b2d2      	uxtb	r2, r2
 8005344:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800534a:	1c5a      	adds	r2, r3, #1
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005354:	3b01      	subs	r3, #1
 8005356:	b29a      	uxth	r2, r3
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005360:	b29b      	uxth	r3, r3
 8005362:	3b01      	subs	r3, #1
 8005364:	b29a      	uxth	r2, r3
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800536a:	e10b      	b.n	8005584 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005370:	2b02      	cmp	r3, #2
 8005372:	d14e      	bne.n	8005412 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005376:	9300      	str	r3, [sp, #0]
 8005378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800537a:	2200      	movs	r2, #0
 800537c:	4906      	ldr	r1, [pc, #24]	@ (8005398 <HAL_I2C_Master_Receive+0x22c>)
 800537e:	68f8      	ldr	r0, [r7, #12]
 8005380:	f000 fa6a 	bl	8005858 <I2C_WaitOnFlagUntilTimeout>
 8005384:	4603      	mov	r3, r0
 8005386:	2b00      	cmp	r3, #0
 8005388:	d008      	beq.n	800539c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	e10e      	b.n	80055ac <HAL_I2C_Master_Receive+0x440>
 800538e:	bf00      	nop
 8005390:	00100002 	.word	0x00100002
 8005394:	ffff0000 	.word	0xffff0000
 8005398:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80053aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	691a      	ldr	r2, [r3, #16]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053b6:	b2d2      	uxtb	r2, r2
 80053b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053be:	1c5a      	adds	r2, r3, #1
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053c8:	3b01      	subs	r3, #1
 80053ca:	b29a      	uxth	r2, r3
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	3b01      	subs	r3, #1
 80053d8:	b29a      	uxth	r2, r3
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	691a      	ldr	r2, [r3, #16]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053e8:	b2d2      	uxtb	r2, r2
 80053ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053f0:	1c5a      	adds	r2, r3, #1
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053fa:	3b01      	subs	r3, #1
 80053fc:	b29a      	uxth	r2, r3
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005406:	b29b      	uxth	r3, r3
 8005408:	3b01      	subs	r3, #1
 800540a:	b29a      	uxth	r2, r3
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005410:	e0b8      	b.n	8005584 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005414:	9300      	str	r3, [sp, #0]
 8005416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005418:	2200      	movs	r2, #0
 800541a:	4966      	ldr	r1, [pc, #408]	@ (80055b4 <HAL_I2C_Master_Receive+0x448>)
 800541c:	68f8      	ldr	r0, [r7, #12]
 800541e:	f000 fa1b 	bl	8005858 <I2C_WaitOnFlagUntilTimeout>
 8005422:	4603      	mov	r3, r0
 8005424:	2b00      	cmp	r3, #0
 8005426:	d001      	beq.n	800542c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	e0bf      	b.n	80055ac <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800543a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	691a      	ldr	r2, [r3, #16]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005446:	b2d2      	uxtb	r2, r2
 8005448:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800544e:	1c5a      	adds	r2, r3, #1
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005458:	3b01      	subs	r3, #1
 800545a:	b29a      	uxth	r2, r3
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005464:	b29b      	uxth	r3, r3
 8005466:	3b01      	subs	r3, #1
 8005468:	b29a      	uxth	r2, r3
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800546e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005470:	9300      	str	r3, [sp, #0]
 8005472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005474:	2200      	movs	r2, #0
 8005476:	494f      	ldr	r1, [pc, #316]	@ (80055b4 <HAL_I2C_Master_Receive+0x448>)
 8005478:	68f8      	ldr	r0, [r7, #12]
 800547a:	f000 f9ed 	bl	8005858 <I2C_WaitOnFlagUntilTimeout>
 800547e:	4603      	mov	r3, r0
 8005480:	2b00      	cmp	r3, #0
 8005482:	d001      	beq.n	8005488 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	e091      	b.n	80055ac <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005496:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	691a      	ldr	r2, [r3, #16]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054a2:	b2d2      	uxtb	r2, r2
 80054a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054aa:	1c5a      	adds	r2, r3, #1
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054b4:	3b01      	subs	r3, #1
 80054b6:	b29a      	uxth	r2, r3
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	3b01      	subs	r3, #1
 80054c4:	b29a      	uxth	r2, r3
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	691a      	ldr	r2, [r3, #16]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054d4:	b2d2      	uxtb	r2, r2
 80054d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054dc:	1c5a      	adds	r2, r3, #1
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054e6:	3b01      	subs	r3, #1
 80054e8:	b29a      	uxth	r2, r3
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	3b01      	subs	r3, #1
 80054f6:	b29a      	uxth	r2, r3
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80054fc:	e042      	b.n	8005584 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005500:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005502:	68f8      	ldr	r0, [r7, #12]
 8005504:	f000 fb00 	bl	8005b08 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005508:	4603      	mov	r3, r0
 800550a:	2b00      	cmp	r3, #0
 800550c:	d001      	beq.n	8005512 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e04c      	b.n	80055ac <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	691a      	ldr	r2, [r3, #16]
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800551c:	b2d2      	uxtb	r2, r2
 800551e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005524:	1c5a      	adds	r2, r3, #1
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800552e:	3b01      	subs	r3, #1
 8005530:	b29a      	uxth	r2, r3
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800553a:	b29b      	uxth	r3, r3
 800553c:	3b01      	subs	r3, #1
 800553e:	b29a      	uxth	r2, r3
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	695b      	ldr	r3, [r3, #20]
 800554a:	f003 0304 	and.w	r3, r3, #4
 800554e:	2b04      	cmp	r3, #4
 8005550:	d118      	bne.n	8005584 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	691a      	ldr	r2, [r3, #16]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800555c:	b2d2      	uxtb	r2, r2
 800555e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005564:	1c5a      	adds	r2, r3, #1
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800556e:	3b01      	subs	r3, #1
 8005570:	b29a      	uxth	r2, r3
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800557a:	b29b      	uxth	r3, r3
 800557c:	3b01      	subs	r3, #1
 800557e:	b29a      	uxth	r2, r3
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005588:	2b00      	cmp	r3, #0
 800558a:	f47f aec2 	bne.w	8005312 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2220      	movs	r2, #32
 8005592:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2200      	movs	r2, #0
 800559a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80055a6:	2300      	movs	r3, #0
 80055a8:	e000      	b.n	80055ac <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80055aa:	2302      	movs	r3, #2
  }
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3728      	adds	r7, #40	@ 0x28
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	00010004 	.word	0x00010004

080055b8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b088      	sub	sp, #32
 80055bc:	af02      	add	r7, sp, #8
 80055be:	60f8      	str	r0, [r7, #12]
 80055c0:	607a      	str	r2, [r7, #4]
 80055c2:	603b      	str	r3, [r7, #0]
 80055c4:	460b      	mov	r3, r1
 80055c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055cc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	2b08      	cmp	r3, #8
 80055d2:	d006      	beq.n	80055e2 <I2C_MasterRequestWrite+0x2a>
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d003      	beq.n	80055e2 <I2C_MasterRequestWrite+0x2a>
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80055e0:	d108      	bne.n	80055f4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80055f0:	601a      	str	r2, [r3, #0]
 80055f2:	e00b      	b.n	800560c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055f8:	2b12      	cmp	r3, #18
 80055fa:	d107      	bne.n	800560c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800560a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	9300      	str	r3, [sp, #0]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005618:	68f8      	ldr	r0, [r7, #12]
 800561a:	f000 f91d 	bl	8005858 <I2C_WaitOnFlagUntilTimeout>
 800561e:	4603      	mov	r3, r0
 8005620:	2b00      	cmp	r3, #0
 8005622:	d00d      	beq.n	8005640 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800562e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005632:	d103      	bne.n	800563c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800563a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800563c:	2303      	movs	r3, #3
 800563e:	e035      	b.n	80056ac <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	691b      	ldr	r3, [r3, #16]
 8005644:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005648:	d108      	bne.n	800565c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800564a:	897b      	ldrh	r3, [r7, #10]
 800564c:	b2db      	uxtb	r3, r3
 800564e:	461a      	mov	r2, r3
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005658:	611a      	str	r2, [r3, #16]
 800565a:	e01b      	b.n	8005694 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800565c:	897b      	ldrh	r3, [r7, #10]
 800565e:	11db      	asrs	r3, r3, #7
 8005660:	b2db      	uxtb	r3, r3
 8005662:	f003 0306 	and.w	r3, r3, #6
 8005666:	b2db      	uxtb	r3, r3
 8005668:	f063 030f 	orn	r3, r3, #15
 800566c:	b2da      	uxtb	r2, r3
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	490e      	ldr	r1, [pc, #56]	@ (80056b4 <I2C_MasterRequestWrite+0xfc>)
 800567a:	68f8      	ldr	r0, [r7, #12]
 800567c:	f000 f943 	bl	8005906 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005680:	4603      	mov	r3, r0
 8005682:	2b00      	cmp	r3, #0
 8005684:	d001      	beq.n	800568a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e010      	b.n	80056ac <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800568a:	897b      	ldrh	r3, [r7, #10]
 800568c:	b2da      	uxtb	r2, r3
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	4907      	ldr	r1, [pc, #28]	@ (80056b8 <I2C_MasterRequestWrite+0x100>)
 800569a:	68f8      	ldr	r0, [r7, #12]
 800569c:	f000 f933 	bl	8005906 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80056a0:	4603      	mov	r3, r0
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d001      	beq.n	80056aa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	e000      	b.n	80056ac <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80056aa:	2300      	movs	r3, #0
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3718      	adds	r7, #24
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}
 80056b4:	00010008 	.word	0x00010008
 80056b8:	00010002 	.word	0x00010002

080056bc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b088      	sub	sp, #32
 80056c0:	af02      	add	r7, sp, #8
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	607a      	str	r2, [r7, #4]
 80056c6:	603b      	str	r3, [r7, #0]
 80056c8:	460b      	mov	r3, r1
 80056ca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056d0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80056e0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	2b08      	cmp	r3, #8
 80056e6:	d006      	beq.n	80056f6 <I2C_MasterRequestRead+0x3a>
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d003      	beq.n	80056f6 <I2C_MasterRequestRead+0x3a>
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80056f4:	d108      	bne.n	8005708 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005704:	601a      	str	r2, [r3, #0]
 8005706:	e00b      	b.n	8005720 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800570c:	2b11      	cmp	r3, #17
 800570e:	d107      	bne.n	8005720 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800571e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	9300      	str	r3, [sp, #0]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800572c:	68f8      	ldr	r0, [r7, #12]
 800572e:	f000 f893 	bl	8005858 <I2C_WaitOnFlagUntilTimeout>
 8005732:	4603      	mov	r3, r0
 8005734:	2b00      	cmp	r3, #0
 8005736:	d00d      	beq.n	8005754 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005742:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005746:	d103      	bne.n	8005750 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800574e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005750:	2303      	movs	r3, #3
 8005752:	e079      	b.n	8005848 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	691b      	ldr	r3, [r3, #16]
 8005758:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800575c:	d108      	bne.n	8005770 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800575e:	897b      	ldrh	r3, [r7, #10]
 8005760:	b2db      	uxtb	r3, r3
 8005762:	f043 0301 	orr.w	r3, r3, #1
 8005766:	b2da      	uxtb	r2, r3
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	611a      	str	r2, [r3, #16]
 800576e:	e05f      	b.n	8005830 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005770:	897b      	ldrh	r3, [r7, #10]
 8005772:	11db      	asrs	r3, r3, #7
 8005774:	b2db      	uxtb	r3, r3
 8005776:	f003 0306 	and.w	r3, r3, #6
 800577a:	b2db      	uxtb	r3, r3
 800577c:	f063 030f 	orn	r3, r3, #15
 8005780:	b2da      	uxtb	r2, r3
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	4930      	ldr	r1, [pc, #192]	@ (8005850 <I2C_MasterRequestRead+0x194>)
 800578e:	68f8      	ldr	r0, [r7, #12]
 8005790:	f000 f8b9 	bl	8005906 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005794:	4603      	mov	r3, r0
 8005796:	2b00      	cmp	r3, #0
 8005798:	d001      	beq.n	800579e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	e054      	b.n	8005848 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800579e:	897b      	ldrh	r3, [r7, #10]
 80057a0:	b2da      	uxtb	r2, r3
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	4929      	ldr	r1, [pc, #164]	@ (8005854 <I2C_MasterRequestRead+0x198>)
 80057ae:	68f8      	ldr	r0, [r7, #12]
 80057b0:	f000 f8a9 	bl	8005906 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d001      	beq.n	80057be <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	e044      	b.n	8005848 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057be:	2300      	movs	r3, #0
 80057c0:	613b      	str	r3, [r7, #16]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	695b      	ldr	r3, [r3, #20]
 80057c8:	613b      	str	r3, [r7, #16]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	699b      	ldr	r3, [r3, #24]
 80057d0:	613b      	str	r3, [r7, #16]
 80057d2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80057e2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	9300      	str	r3, [sp, #0]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2200      	movs	r2, #0
 80057ec:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80057f0:	68f8      	ldr	r0, [r7, #12]
 80057f2:	f000 f831 	bl	8005858 <I2C_WaitOnFlagUntilTimeout>
 80057f6:	4603      	mov	r3, r0
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d00d      	beq.n	8005818 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005806:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800580a:	d103      	bne.n	8005814 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005812:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8005814:	2303      	movs	r3, #3
 8005816:	e017      	b.n	8005848 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005818:	897b      	ldrh	r3, [r7, #10]
 800581a:	11db      	asrs	r3, r3, #7
 800581c:	b2db      	uxtb	r3, r3
 800581e:	f003 0306 	and.w	r3, r3, #6
 8005822:	b2db      	uxtb	r3, r3
 8005824:	f063 030e 	orn	r3, r3, #14
 8005828:	b2da      	uxtb	r2, r3
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	4907      	ldr	r1, [pc, #28]	@ (8005854 <I2C_MasterRequestRead+0x198>)
 8005836:	68f8      	ldr	r0, [r7, #12]
 8005838:	f000 f865 	bl	8005906 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800583c:	4603      	mov	r3, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d001      	beq.n	8005846 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	e000      	b.n	8005848 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005846:	2300      	movs	r3, #0
}
 8005848:	4618      	mov	r0, r3
 800584a:	3718      	adds	r7, #24
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}
 8005850:	00010008 	.word	0x00010008
 8005854:	00010002 	.word	0x00010002

08005858 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	60b9      	str	r1, [r7, #8]
 8005862:	603b      	str	r3, [r7, #0]
 8005864:	4613      	mov	r3, r2
 8005866:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005868:	e025      	b.n	80058b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005870:	d021      	beq.n	80058b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005872:	f7fc feb9 	bl	80025e8 <HAL_GetTick>
 8005876:	4602      	mov	r2, r0
 8005878:	69bb      	ldr	r3, [r7, #24]
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	683a      	ldr	r2, [r7, #0]
 800587e:	429a      	cmp	r2, r3
 8005880:	d302      	bcc.n	8005888 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d116      	bne.n	80058b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2200      	movs	r2, #0
 800588c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2220      	movs	r2, #32
 8005892:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2200      	movs	r2, #0
 800589a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058a2:	f043 0220 	orr.w	r2, r3, #32
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2200      	movs	r2, #0
 80058ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e023      	b.n	80058fe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	0c1b      	lsrs	r3, r3, #16
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d10d      	bne.n	80058dc <I2C_WaitOnFlagUntilTimeout+0x84>
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	695b      	ldr	r3, [r3, #20]
 80058c6:	43da      	mvns	r2, r3
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	4013      	ands	r3, r2
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	bf0c      	ite	eq
 80058d2:	2301      	moveq	r3, #1
 80058d4:	2300      	movne	r3, #0
 80058d6:	b2db      	uxtb	r3, r3
 80058d8:	461a      	mov	r2, r3
 80058da:	e00c      	b.n	80058f6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	699b      	ldr	r3, [r3, #24]
 80058e2:	43da      	mvns	r2, r3
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	4013      	ands	r3, r2
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	bf0c      	ite	eq
 80058ee:	2301      	moveq	r3, #1
 80058f0:	2300      	movne	r3, #0
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	461a      	mov	r2, r3
 80058f6:	79fb      	ldrb	r3, [r7, #7]
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d0b6      	beq.n	800586a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80058fc:	2300      	movs	r3, #0
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3710      	adds	r7, #16
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}

08005906 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005906:	b580      	push	{r7, lr}
 8005908:	b084      	sub	sp, #16
 800590a:	af00      	add	r7, sp, #0
 800590c:	60f8      	str	r0, [r7, #12]
 800590e:	60b9      	str	r1, [r7, #8]
 8005910:	607a      	str	r2, [r7, #4]
 8005912:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005914:	e051      	b.n	80059ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	695b      	ldr	r3, [r3, #20]
 800591c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005920:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005924:	d123      	bne.n	800596e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005934:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800593e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2200      	movs	r2, #0
 8005944:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2220      	movs	r2, #32
 800594a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2200      	movs	r2, #0
 8005952:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800595a:	f043 0204 	orr.w	r2, r3, #4
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2200      	movs	r2, #0
 8005966:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e046      	b.n	80059fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005974:	d021      	beq.n	80059ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005976:	f7fc fe37 	bl	80025e8 <HAL_GetTick>
 800597a:	4602      	mov	r2, r0
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	1ad3      	subs	r3, r2, r3
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	429a      	cmp	r2, r3
 8005984:	d302      	bcc.n	800598c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d116      	bne.n	80059ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2200      	movs	r2, #0
 8005990:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2220      	movs	r2, #32
 8005996:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2200      	movs	r2, #0
 800599e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059a6:	f043 0220 	orr.w	r2, r3, #32
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2200      	movs	r2, #0
 80059b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	e020      	b.n	80059fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	0c1b      	lsrs	r3, r3, #16
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d10c      	bne.n	80059de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	695b      	ldr	r3, [r3, #20]
 80059ca:	43da      	mvns	r2, r3
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	4013      	ands	r3, r2
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	bf14      	ite	ne
 80059d6:	2301      	movne	r3, #1
 80059d8:	2300      	moveq	r3, #0
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	e00b      	b.n	80059f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	699b      	ldr	r3, [r3, #24]
 80059e4:	43da      	mvns	r2, r3
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	4013      	ands	r3, r2
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	bf14      	ite	ne
 80059f0:	2301      	movne	r3, #1
 80059f2:	2300      	moveq	r3, #0
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d18d      	bne.n	8005916 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80059fa:	2300      	movs	r3, #0
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3710      	adds	r7, #16
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	60b9      	str	r1, [r7, #8]
 8005a0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a10:	e02d      	b.n	8005a6e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005a12:	68f8      	ldr	r0, [r7, #12]
 8005a14:	f000 f8ce 	bl	8005bb4 <I2C_IsAcknowledgeFailed>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d001      	beq.n	8005a22 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e02d      	b.n	8005a7e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a28:	d021      	beq.n	8005a6e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a2a:	f7fc fddd 	bl	80025e8 <HAL_GetTick>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	1ad3      	subs	r3, r2, r3
 8005a34:	68ba      	ldr	r2, [r7, #8]
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d302      	bcc.n	8005a40 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d116      	bne.n	8005a6e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2200      	movs	r2, #0
 8005a44:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2220      	movs	r2, #32
 8005a4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2200      	movs	r2, #0
 8005a52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a5a:	f043 0220 	orr.w	r2, r3, #32
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2200      	movs	r2, #0
 8005a66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e007      	b.n	8005a7e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	695b      	ldr	r3, [r3, #20]
 8005a74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a78:	2b80      	cmp	r3, #128	@ 0x80
 8005a7a:	d1ca      	bne.n	8005a12 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3710      	adds	r7, #16
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}

08005a86 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a86:	b580      	push	{r7, lr}
 8005a88:	b084      	sub	sp, #16
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	60f8      	str	r0, [r7, #12]
 8005a8e:	60b9      	str	r1, [r7, #8]
 8005a90:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005a92:	e02d      	b.n	8005af0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005a94:	68f8      	ldr	r0, [r7, #12]
 8005a96:	f000 f88d 	bl	8005bb4 <I2C_IsAcknowledgeFailed>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d001      	beq.n	8005aa4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e02d      	b.n	8005b00 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005aaa:	d021      	beq.n	8005af0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005aac:	f7fc fd9c 	bl	80025e8 <HAL_GetTick>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	1ad3      	subs	r3, r2, r3
 8005ab6:	68ba      	ldr	r2, [r7, #8]
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d302      	bcc.n	8005ac2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d116      	bne.n	8005af0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2220      	movs	r2, #32
 8005acc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005adc:	f043 0220 	orr.w	r2, r3, #32
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	e007      	b.n	8005b00 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	695b      	ldr	r3, [r3, #20]
 8005af6:	f003 0304 	and.w	r3, r3, #4
 8005afa:	2b04      	cmp	r3, #4
 8005afc:	d1ca      	bne.n	8005a94 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005afe:	2300      	movs	r3, #0
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3710      	adds	r7, #16
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}

08005b08 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	60b9      	str	r1, [r7, #8]
 8005b12:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005b14:	e042      	b.n	8005b9c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	695b      	ldr	r3, [r3, #20]
 8005b1c:	f003 0310 	and.w	r3, r3, #16
 8005b20:	2b10      	cmp	r3, #16
 8005b22:	d119      	bne.n	8005b58 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f06f 0210 	mvn.w	r2, #16
 8005b2c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2200      	movs	r2, #0
 8005b32:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2220      	movs	r2, #32
 8005b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	e029      	b.n	8005bac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b58:	f7fc fd46 	bl	80025e8 <HAL_GetTick>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	1ad3      	subs	r3, r2, r3
 8005b62:	68ba      	ldr	r2, [r7, #8]
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d302      	bcc.n	8005b6e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d116      	bne.n	8005b9c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2200      	movs	r2, #0
 8005b72:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2220      	movs	r2, #32
 8005b78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b88:	f043 0220 	orr.w	r2, r3, #32
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2200      	movs	r2, #0
 8005b94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	e007      	b.n	8005bac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	695b      	ldr	r3, [r3, #20]
 8005ba2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ba6:	2b40      	cmp	r3, #64	@ 0x40
 8005ba8:	d1b5      	bne.n	8005b16 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005baa:	2300      	movs	r3, #0
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3710      	adds	r7, #16
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b083      	sub	sp, #12
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	695b      	ldr	r3, [r3, #20]
 8005bc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bca:	d11b      	bne.n	8005c04 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005bd4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2220      	movs	r2, #32
 8005be0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2200      	movs	r2, #0
 8005be8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bf0:	f043 0204 	orr.w	r2, r3, #4
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	e000      	b.n	8005c06 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005c04:	2300      	movs	r3, #0
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	370c      	adds	r7, #12
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr

08005c12 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005c12:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c14:	b08f      	sub	sp, #60	@ 0x3c
 8005c16:	af0a      	add	r7, sp, #40	@ 0x28
 8005c18:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d101      	bne.n	8005c24 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	e116      	b.n	8005e52 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d106      	bne.n	8005c44 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f7fc fb40 	bl	80022c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2203      	movs	r2, #3
 8005c48:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d102      	bne.n	8005c5e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4618      	mov	r0, r3
 8005c64:	f003 fa01 	bl	800906a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	603b      	str	r3, [r7, #0]
 8005c6e:	687e      	ldr	r6, [r7, #4]
 8005c70:	466d      	mov	r5, sp
 8005c72:	f106 0410 	add.w	r4, r6, #16
 8005c76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005c78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005c7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005c7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005c7e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005c82:	e885 0003 	stmia.w	r5, {r0, r1}
 8005c86:	1d33      	adds	r3, r6, #4
 8005c88:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005c8a:	6838      	ldr	r0, [r7, #0]
 8005c8c:	f003 f98c 	bl	8008fa8 <USB_CoreInit>
 8005c90:	4603      	mov	r3, r0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d005      	beq.n	8005ca2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2202      	movs	r2, #2
 8005c9a:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e0d7      	b.n	8005e52 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	2100      	movs	r1, #0
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f003 f9ef 	bl	800908c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005cae:	2300      	movs	r3, #0
 8005cb0:	73fb      	strb	r3, [r7, #15]
 8005cb2:	e04a      	b.n	8005d4a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005cb4:	7bfa      	ldrb	r2, [r7, #15]
 8005cb6:	6879      	ldr	r1, [r7, #4]
 8005cb8:	4613      	mov	r3, r2
 8005cba:	00db      	lsls	r3, r3, #3
 8005cbc:	4413      	add	r3, r2
 8005cbe:	009b      	lsls	r3, r3, #2
 8005cc0:	440b      	add	r3, r1
 8005cc2:	333d      	adds	r3, #61	@ 0x3d
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005cc8:	7bfa      	ldrb	r2, [r7, #15]
 8005cca:	6879      	ldr	r1, [r7, #4]
 8005ccc:	4613      	mov	r3, r2
 8005cce:	00db      	lsls	r3, r3, #3
 8005cd0:	4413      	add	r3, r2
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	440b      	add	r3, r1
 8005cd6:	333c      	adds	r3, #60	@ 0x3c
 8005cd8:	7bfa      	ldrb	r2, [r7, #15]
 8005cda:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005cdc:	7bfa      	ldrb	r2, [r7, #15]
 8005cde:	7bfb      	ldrb	r3, [r7, #15]
 8005ce0:	b298      	uxth	r0, r3
 8005ce2:	6879      	ldr	r1, [r7, #4]
 8005ce4:	4613      	mov	r3, r2
 8005ce6:	00db      	lsls	r3, r3, #3
 8005ce8:	4413      	add	r3, r2
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	440b      	add	r3, r1
 8005cee:	3344      	adds	r3, #68	@ 0x44
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005cf4:	7bfa      	ldrb	r2, [r7, #15]
 8005cf6:	6879      	ldr	r1, [r7, #4]
 8005cf8:	4613      	mov	r3, r2
 8005cfa:	00db      	lsls	r3, r3, #3
 8005cfc:	4413      	add	r3, r2
 8005cfe:	009b      	lsls	r3, r3, #2
 8005d00:	440b      	add	r3, r1
 8005d02:	3340      	adds	r3, #64	@ 0x40
 8005d04:	2200      	movs	r2, #0
 8005d06:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005d08:	7bfa      	ldrb	r2, [r7, #15]
 8005d0a:	6879      	ldr	r1, [r7, #4]
 8005d0c:	4613      	mov	r3, r2
 8005d0e:	00db      	lsls	r3, r3, #3
 8005d10:	4413      	add	r3, r2
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	440b      	add	r3, r1
 8005d16:	3348      	adds	r3, #72	@ 0x48
 8005d18:	2200      	movs	r2, #0
 8005d1a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005d1c:	7bfa      	ldrb	r2, [r7, #15]
 8005d1e:	6879      	ldr	r1, [r7, #4]
 8005d20:	4613      	mov	r3, r2
 8005d22:	00db      	lsls	r3, r3, #3
 8005d24:	4413      	add	r3, r2
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	440b      	add	r3, r1
 8005d2a:	334c      	adds	r3, #76	@ 0x4c
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005d30:	7bfa      	ldrb	r2, [r7, #15]
 8005d32:	6879      	ldr	r1, [r7, #4]
 8005d34:	4613      	mov	r3, r2
 8005d36:	00db      	lsls	r3, r3, #3
 8005d38:	4413      	add	r3, r2
 8005d3a:	009b      	lsls	r3, r3, #2
 8005d3c:	440b      	add	r3, r1
 8005d3e:	3354      	adds	r3, #84	@ 0x54
 8005d40:	2200      	movs	r2, #0
 8005d42:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d44:	7bfb      	ldrb	r3, [r7, #15]
 8005d46:	3301      	adds	r3, #1
 8005d48:	73fb      	strb	r3, [r7, #15]
 8005d4a:	7bfa      	ldrb	r2, [r7, #15]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d3af      	bcc.n	8005cb4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d54:	2300      	movs	r3, #0
 8005d56:	73fb      	strb	r3, [r7, #15]
 8005d58:	e044      	b.n	8005de4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005d5a:	7bfa      	ldrb	r2, [r7, #15]
 8005d5c:	6879      	ldr	r1, [r7, #4]
 8005d5e:	4613      	mov	r3, r2
 8005d60:	00db      	lsls	r3, r3, #3
 8005d62:	4413      	add	r3, r2
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	440b      	add	r3, r1
 8005d68:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005d70:	7bfa      	ldrb	r2, [r7, #15]
 8005d72:	6879      	ldr	r1, [r7, #4]
 8005d74:	4613      	mov	r3, r2
 8005d76:	00db      	lsls	r3, r3, #3
 8005d78:	4413      	add	r3, r2
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	440b      	add	r3, r1
 8005d7e:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8005d82:	7bfa      	ldrb	r2, [r7, #15]
 8005d84:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005d86:	7bfa      	ldrb	r2, [r7, #15]
 8005d88:	6879      	ldr	r1, [r7, #4]
 8005d8a:	4613      	mov	r3, r2
 8005d8c:	00db      	lsls	r3, r3, #3
 8005d8e:	4413      	add	r3, r2
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	440b      	add	r3, r1
 8005d94:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8005d98:	2200      	movs	r2, #0
 8005d9a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005d9c:	7bfa      	ldrb	r2, [r7, #15]
 8005d9e:	6879      	ldr	r1, [r7, #4]
 8005da0:	4613      	mov	r3, r2
 8005da2:	00db      	lsls	r3, r3, #3
 8005da4:	4413      	add	r3, r2
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	440b      	add	r3, r1
 8005daa:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8005dae:	2200      	movs	r2, #0
 8005db0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005db2:	7bfa      	ldrb	r2, [r7, #15]
 8005db4:	6879      	ldr	r1, [r7, #4]
 8005db6:	4613      	mov	r3, r2
 8005db8:	00db      	lsls	r3, r3, #3
 8005dba:	4413      	add	r3, r2
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	440b      	add	r3, r1
 8005dc0:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005dc8:	7bfa      	ldrb	r2, [r7, #15]
 8005dca:	6879      	ldr	r1, [r7, #4]
 8005dcc:	4613      	mov	r3, r2
 8005dce:	00db      	lsls	r3, r3, #3
 8005dd0:	4413      	add	r3, r2
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	440b      	add	r3, r1
 8005dd6:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8005dda:	2200      	movs	r2, #0
 8005ddc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005dde:	7bfb      	ldrb	r3, [r7, #15]
 8005de0:	3301      	adds	r3, #1
 8005de2:	73fb      	strb	r3, [r7, #15]
 8005de4:	7bfa      	ldrb	r2, [r7, #15]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d3b5      	bcc.n	8005d5a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	603b      	str	r3, [r7, #0]
 8005df4:	687e      	ldr	r6, [r7, #4]
 8005df6:	466d      	mov	r5, sp
 8005df8:	f106 0410 	add.w	r4, r6, #16
 8005dfc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005dfe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005e00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005e04:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005e08:	e885 0003 	stmia.w	r5, {r0, r1}
 8005e0c:	1d33      	adds	r3, r6, #4
 8005e0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005e10:	6838      	ldr	r0, [r7, #0]
 8005e12:	f003 f987 	bl	8009124 <USB_DevInit>
 8005e16:	4603      	mov	r3, r0
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d005      	beq.n	8005e28 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2202      	movs	r2, #2
 8005e20:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	e014      	b.n	8005e52 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d102      	bne.n	8005e46 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f000 f80a 	bl	8005e5a <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f003 fb45 	bl	80094da <USB_DevDisconnect>

  return HAL_OK;
 8005e50:	2300      	movs	r3, #0
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3714      	adds	r7, #20
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005e5a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005e5a:	b480      	push	{r7}
 8005e5c:	b085      	sub	sp, #20
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	699b      	ldr	r3, [r3, #24]
 8005e7c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e8c:	f043 0303 	orr.w	r3, r3, #3
 8005e90:	68fa      	ldr	r2, [r7, #12]
 8005e92:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8005e94:	2300      	movs	r3, #0
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3714      	adds	r7, #20
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr
	...

08005ea4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b084      	sub	sp, #16
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d101      	bne.n	8005eb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	e0cc      	b.n	8006052 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005eb8:	4b68      	ldr	r3, [pc, #416]	@ (800605c <HAL_RCC_ClockConfig+0x1b8>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f003 030f 	and.w	r3, r3, #15
 8005ec0:	683a      	ldr	r2, [r7, #0]
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d90c      	bls.n	8005ee0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ec6:	4b65      	ldr	r3, [pc, #404]	@ (800605c <HAL_RCC_ClockConfig+0x1b8>)
 8005ec8:	683a      	ldr	r2, [r7, #0]
 8005eca:	b2d2      	uxtb	r2, r2
 8005ecc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ece:	4b63      	ldr	r3, [pc, #396]	@ (800605c <HAL_RCC_ClockConfig+0x1b8>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f003 030f 	and.w	r3, r3, #15
 8005ed6:	683a      	ldr	r2, [r7, #0]
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d001      	beq.n	8005ee0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	e0b8      	b.n	8006052 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f003 0302 	and.w	r3, r3, #2
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d020      	beq.n	8005f2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f003 0304 	and.w	r3, r3, #4
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d005      	beq.n	8005f04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ef8:	4b59      	ldr	r3, [pc, #356]	@ (8006060 <HAL_RCC_ClockConfig+0x1bc>)
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	4a58      	ldr	r2, [pc, #352]	@ (8006060 <HAL_RCC_ClockConfig+0x1bc>)
 8005efe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005f02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f003 0308 	and.w	r3, r3, #8
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d005      	beq.n	8005f1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005f10:	4b53      	ldr	r3, [pc, #332]	@ (8006060 <HAL_RCC_ClockConfig+0x1bc>)
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	4a52      	ldr	r2, [pc, #328]	@ (8006060 <HAL_RCC_ClockConfig+0x1bc>)
 8005f16:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005f1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f1c:	4b50      	ldr	r3, [pc, #320]	@ (8006060 <HAL_RCC_ClockConfig+0x1bc>)
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	494d      	ldr	r1, [pc, #308]	@ (8006060 <HAL_RCC_ClockConfig+0x1bc>)
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f003 0301 	and.w	r3, r3, #1
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d044      	beq.n	8005fc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d107      	bne.n	8005f52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f42:	4b47      	ldr	r3, [pc, #284]	@ (8006060 <HAL_RCC_ClockConfig+0x1bc>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d119      	bne.n	8005f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e07f      	b.n	8006052 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	2b02      	cmp	r3, #2
 8005f58:	d003      	beq.n	8005f62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f5e:	2b03      	cmp	r3, #3
 8005f60:	d107      	bne.n	8005f72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f62:	4b3f      	ldr	r3, [pc, #252]	@ (8006060 <HAL_RCC_ClockConfig+0x1bc>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d109      	bne.n	8005f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e06f      	b.n	8006052 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f72:	4b3b      	ldr	r3, [pc, #236]	@ (8006060 <HAL_RCC_ClockConfig+0x1bc>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f003 0302 	and.w	r3, r3, #2
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d101      	bne.n	8005f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e067      	b.n	8006052 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f82:	4b37      	ldr	r3, [pc, #220]	@ (8006060 <HAL_RCC_ClockConfig+0x1bc>)
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	f023 0203 	bic.w	r2, r3, #3
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	4934      	ldr	r1, [pc, #208]	@ (8006060 <HAL_RCC_ClockConfig+0x1bc>)
 8005f90:	4313      	orrs	r3, r2
 8005f92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005f94:	f7fc fb28 	bl	80025e8 <HAL_GetTick>
 8005f98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f9a:	e00a      	b.n	8005fb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f9c:	f7fc fb24 	bl	80025e8 <HAL_GetTick>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	1ad3      	subs	r3, r2, r3
 8005fa6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d901      	bls.n	8005fb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005fae:	2303      	movs	r3, #3
 8005fb0:	e04f      	b.n	8006052 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fb2:	4b2b      	ldr	r3, [pc, #172]	@ (8006060 <HAL_RCC_ClockConfig+0x1bc>)
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	f003 020c 	and.w	r2, r3, #12
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d1eb      	bne.n	8005f9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005fc4:	4b25      	ldr	r3, [pc, #148]	@ (800605c <HAL_RCC_ClockConfig+0x1b8>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f003 030f 	and.w	r3, r3, #15
 8005fcc:	683a      	ldr	r2, [r7, #0]
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d20c      	bcs.n	8005fec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fd2:	4b22      	ldr	r3, [pc, #136]	@ (800605c <HAL_RCC_ClockConfig+0x1b8>)
 8005fd4:	683a      	ldr	r2, [r7, #0]
 8005fd6:	b2d2      	uxtb	r2, r2
 8005fd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fda:	4b20      	ldr	r3, [pc, #128]	@ (800605c <HAL_RCC_ClockConfig+0x1b8>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f003 030f 	and.w	r3, r3, #15
 8005fe2:	683a      	ldr	r2, [r7, #0]
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d001      	beq.n	8005fec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	e032      	b.n	8006052 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f003 0304 	and.w	r3, r3, #4
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d008      	beq.n	800600a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ff8:	4b19      	ldr	r3, [pc, #100]	@ (8006060 <HAL_RCC_ClockConfig+0x1bc>)
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	4916      	ldr	r1, [pc, #88]	@ (8006060 <HAL_RCC_ClockConfig+0x1bc>)
 8006006:	4313      	orrs	r3, r2
 8006008:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f003 0308 	and.w	r3, r3, #8
 8006012:	2b00      	cmp	r3, #0
 8006014:	d009      	beq.n	800602a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006016:	4b12      	ldr	r3, [pc, #72]	@ (8006060 <HAL_RCC_ClockConfig+0x1bc>)
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	691b      	ldr	r3, [r3, #16]
 8006022:	00db      	lsls	r3, r3, #3
 8006024:	490e      	ldr	r1, [pc, #56]	@ (8006060 <HAL_RCC_ClockConfig+0x1bc>)
 8006026:	4313      	orrs	r3, r2
 8006028:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800602a:	f000 fb7f 	bl	800672c <HAL_RCC_GetSysClockFreq>
 800602e:	4602      	mov	r2, r0
 8006030:	4b0b      	ldr	r3, [pc, #44]	@ (8006060 <HAL_RCC_ClockConfig+0x1bc>)
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	091b      	lsrs	r3, r3, #4
 8006036:	f003 030f 	and.w	r3, r3, #15
 800603a:	490a      	ldr	r1, [pc, #40]	@ (8006064 <HAL_RCC_ClockConfig+0x1c0>)
 800603c:	5ccb      	ldrb	r3, [r1, r3]
 800603e:	fa22 f303 	lsr.w	r3, r2, r3
 8006042:	4a09      	ldr	r2, [pc, #36]	@ (8006068 <HAL_RCC_ClockConfig+0x1c4>)
 8006044:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006046:	4b09      	ldr	r3, [pc, #36]	@ (800606c <HAL_RCC_ClockConfig+0x1c8>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4618      	mov	r0, r3
 800604c:	f7fc fa88 	bl	8002560 <HAL_InitTick>

  return HAL_OK;
 8006050:	2300      	movs	r3, #0
}
 8006052:	4618      	mov	r0, r3
 8006054:	3710      	adds	r7, #16
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}
 800605a:	bf00      	nop
 800605c:	40023c00 	.word	0x40023c00
 8006060:	40023800 	.word	0x40023800
 8006064:	0800c448 	.word	0x0800c448
 8006068:	20000000 	.word	0x20000000
 800606c:	20000004 	.word	0x20000004

08006070 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006070:	b480      	push	{r7}
 8006072:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006074:	4b03      	ldr	r3, [pc, #12]	@ (8006084 <HAL_RCC_GetHCLKFreq+0x14>)
 8006076:	681b      	ldr	r3, [r3, #0]
}
 8006078:	4618      	mov	r0, r3
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr
 8006082:	bf00      	nop
 8006084:	20000000 	.word	0x20000000

08006088 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800608c:	f7ff fff0 	bl	8006070 <HAL_RCC_GetHCLKFreq>
 8006090:	4602      	mov	r2, r0
 8006092:	4b05      	ldr	r3, [pc, #20]	@ (80060a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	0a9b      	lsrs	r3, r3, #10
 8006098:	f003 0307 	and.w	r3, r3, #7
 800609c:	4903      	ldr	r1, [pc, #12]	@ (80060ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800609e:	5ccb      	ldrb	r3, [r1, r3]
 80060a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	bd80      	pop	{r7, pc}
 80060a8:	40023800 	.word	0x40023800
 80060ac:	0800c458 	.word	0x0800c458

080060b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80060b4:	f7ff ffdc 	bl	8006070 <HAL_RCC_GetHCLKFreq>
 80060b8:	4602      	mov	r2, r0
 80060ba:	4b05      	ldr	r3, [pc, #20]	@ (80060d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	0b5b      	lsrs	r3, r3, #13
 80060c0:	f003 0307 	and.w	r3, r3, #7
 80060c4:	4903      	ldr	r1, [pc, #12]	@ (80060d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80060c6:	5ccb      	ldrb	r3, [r1, r3]
 80060c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	bd80      	pop	{r7, pc}
 80060d0:	40023800 	.word	0x40023800
 80060d4:	0800c458 	.word	0x0800c458

080060d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b08c      	sub	sp, #48	@ 0x30
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80060e0:	2300      	movs	r3, #0
 80060e2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 80060e4:	2300      	movs	r3, #0
 80060e6:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80060e8:	2300      	movs	r3, #0
 80060ea:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80060ec:	2300      	movs	r3, #0
 80060ee:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80060f0:	2300      	movs	r3, #0
 80060f2:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80060f4:	2300      	movs	r3, #0
 80060f6:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80060f8:	2300      	movs	r3, #0
 80060fa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80060fc:	2300      	movs	r3, #0
 80060fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8006100:	2300      	movs	r3, #0
 8006102:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f003 0301 	and.w	r3, r3, #1
 800610c:	2b00      	cmp	r3, #0
 800610e:	d010      	beq.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8006110:	4b6f      	ldr	r3, [pc, #444]	@ (80062d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006112:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006116:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800611e:	496c      	ldr	r1, [pc, #432]	@ (80062d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006120:	4313      	orrs	r3, r2
 8006122:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800612a:	2b00      	cmp	r3, #0
 800612c:	d101      	bne.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800612e:	2301      	movs	r3, #1
 8006130:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f003 0302 	and.w	r3, r3, #2
 800613a:	2b00      	cmp	r3, #0
 800613c:	d010      	beq.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800613e:	4b64      	ldr	r3, [pc, #400]	@ (80062d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006140:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006144:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800614c:	4960      	ldr	r1, [pc, #384]	@ (80062d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800614e:	4313      	orrs	r3, r2
 8006150:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006158:	2b00      	cmp	r3, #0
 800615a:	d101      	bne.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 800615c:	2301      	movs	r3, #1
 800615e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f003 0304 	and.w	r3, r3, #4
 8006168:	2b00      	cmp	r3, #0
 800616a:	d017      	beq.n	800619c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800616c:	4b58      	ldr	r3, [pc, #352]	@ (80062d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800616e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006172:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800617a:	4955      	ldr	r1, [pc, #340]	@ (80062d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800617c:	4313      	orrs	r3, r2
 800617e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006186:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800618a:	d101      	bne.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 800618c:	2301      	movs	r3, #1
 800618e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006194:	2b00      	cmp	r3, #0
 8006196:	d101      	bne.n	800619c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8006198:	2301      	movs	r3, #1
 800619a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f003 0308 	and.w	r3, r3, #8
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d017      	beq.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80061a8:	4b49      	ldr	r3, [pc, #292]	@ (80062d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80061aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80061ae:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061b6:	4946      	ldr	r1, [pc, #280]	@ (80062d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80061b8:	4313      	orrs	r3, r2
 80061ba:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80061c6:	d101      	bne.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80061c8:	2301      	movs	r3, #1
 80061ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d101      	bne.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80061d4:	2301      	movs	r3, #1
 80061d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f003 0320 	and.w	r3, r3, #32
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	f000 808a 	beq.w	80062fa <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80061e6:	2300      	movs	r3, #0
 80061e8:	60bb      	str	r3, [r7, #8]
 80061ea:	4b39      	ldr	r3, [pc, #228]	@ (80062d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80061ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061ee:	4a38      	ldr	r2, [pc, #224]	@ (80062d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80061f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80061f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80061f6:	4b36      	ldr	r3, [pc, #216]	@ (80062d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80061f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80061fe:	60bb      	str	r3, [r7, #8]
 8006200:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006202:	4b34      	ldr	r3, [pc, #208]	@ (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a33      	ldr	r2, [pc, #204]	@ (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8006208:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800620c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800620e:	f7fc f9eb 	bl	80025e8 <HAL_GetTick>
 8006212:	6278      	str	r0, [r7, #36]	@ 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006214:	e008      	b.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006216:	f7fc f9e7 	bl	80025e8 <HAL_GetTick>
 800621a:	4602      	mov	r2, r0
 800621c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800621e:	1ad3      	subs	r3, r2, r3
 8006220:	2b02      	cmp	r3, #2
 8006222:	d901      	bls.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8006224:	2303      	movs	r3, #3
 8006226:	e278      	b.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006228:	4b2a      	ldr	r3, [pc, #168]	@ (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006230:	2b00      	cmp	r3, #0
 8006232:	d0f0      	beq.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006234:	4b26      	ldr	r3, [pc, #152]	@ (80062d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006236:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006238:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800623c:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800623e:	6a3b      	ldr	r3, [r7, #32]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d02f      	beq.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006248:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800624c:	6a3a      	ldr	r2, [r7, #32]
 800624e:	429a      	cmp	r2, r3
 8006250:	d028      	beq.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006252:	4b1f      	ldr	r3, [pc, #124]	@ (80062d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006254:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006256:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800625a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800625c:	4b1e      	ldr	r3, [pc, #120]	@ (80062d8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800625e:	2201      	movs	r2, #1
 8006260:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006262:	4b1d      	ldr	r3, [pc, #116]	@ (80062d8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8006264:	2200      	movs	r2, #0
 8006266:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006268:	4a19      	ldr	r2, [pc, #100]	@ (80062d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800626a:	6a3b      	ldr	r3, [r7, #32]
 800626c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800626e:	4b18      	ldr	r3, [pc, #96]	@ (80062d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006270:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006272:	f003 0301 	and.w	r3, r3, #1
 8006276:	2b01      	cmp	r3, #1
 8006278:	d114      	bne.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800627a:	f7fc f9b5 	bl	80025e8 <HAL_GetTick>
 800627e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006280:	e00a      	b.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006282:	f7fc f9b1 	bl	80025e8 <HAL_GetTick>
 8006286:	4602      	mov	r2, r0
 8006288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800628a:	1ad3      	subs	r3, r2, r3
 800628c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006290:	4293      	cmp	r3, r2
 8006292:	d901      	bls.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8006294:	2303      	movs	r3, #3
 8006296:	e240      	b.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006298:	4b0d      	ldr	r3, [pc, #52]	@ (80062d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800629a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800629c:	f003 0302 	and.w	r3, r3, #2
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d0ee      	beq.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80062b0:	d114      	bne.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x204>
 80062b2:	4b07      	ldr	r3, [pc, #28]	@ (80062d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062be:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80062c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062c6:	4902      	ldr	r1, [pc, #8]	@ (80062d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80062c8:	4313      	orrs	r3, r2
 80062ca:	608b      	str	r3, [r1, #8]
 80062cc:	e00c      	b.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80062ce:	bf00      	nop
 80062d0:	40023800 	.word	0x40023800
 80062d4:	40007000 	.word	0x40007000
 80062d8:	42470e40 	.word	0x42470e40
 80062dc:	4b4a      	ldr	r3, [pc, #296]	@ (8006408 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	4a49      	ldr	r2, [pc, #292]	@ (8006408 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80062e2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80062e6:	6093      	str	r3, [r2, #8]
 80062e8:	4b47      	ldr	r3, [pc, #284]	@ (8006408 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80062ea:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062f4:	4944      	ldr	r1, [pc, #272]	@ (8006408 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80062f6:	4313      	orrs	r3, r2
 80062f8:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f003 0310 	and.w	r3, r3, #16
 8006302:	2b00      	cmp	r3, #0
 8006304:	d004      	beq.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800630c:	4b3f      	ldr	r3, [pc, #252]	@ (800640c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800630e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006318:	2b00      	cmp	r3, #0
 800631a:	d00a      	beq.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800631c:	4b3a      	ldr	r3, [pc, #232]	@ (8006408 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800631e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006322:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800632a:	4937      	ldr	r1, [pc, #220]	@ (8006408 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800632c:	4313      	orrs	r3, r2
 800632e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800633a:	2b00      	cmp	r3, #0
 800633c:	d00a      	beq.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800633e:	4b32      	ldr	r3, [pc, #200]	@ (8006408 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006340:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006344:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800634c:	492e      	ldr	r1, [pc, #184]	@ (8006408 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800634e:	4313      	orrs	r3, r2
 8006350:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800635c:	2b00      	cmp	r3, #0
 800635e:	d011      	beq.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006360:	4b29      	ldr	r3, [pc, #164]	@ (8006408 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006362:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006366:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800636e:	4926      	ldr	r1, [pc, #152]	@ (8006408 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006370:	4313      	orrs	r3, r2
 8006372:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800637a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800637e:	d101      	bne.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8006380:	2301      	movs	r3, #1
 8006382:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800638c:	2b00      	cmp	r3, #0
 800638e:	d00a      	beq.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8006390:	4b1d      	ldr	r3, [pc, #116]	@ (8006408 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006392:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006396:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800639e:	491a      	ldr	r1, [pc, #104]	@ (8006408 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80063a0:	4313      	orrs	r3, r2
 80063a2:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d011      	beq.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80063b2:	4b15      	ldr	r3, [pc, #84]	@ (8006408 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80063b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80063b8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063c0:	4911      	ldr	r1, [pc, #68]	@ (8006408 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80063c2:	4313      	orrs	r3, r2
 80063c4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80063d0:	d101      	bne.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80063d2:	2301      	movs	r3, #1
 80063d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80063d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d005      	beq.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80063e4:	f040 80ff 	bne.w	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80063e8:	4b09      	ldr	r3, [pc, #36]	@ (8006410 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80063ea:	2200      	movs	r2, #0
 80063ec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80063ee:	f7fc f8fb 	bl	80025e8 <HAL_GetTick>
 80063f2:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80063f4:	e00e      	b.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80063f6:	f7fc f8f7 	bl	80025e8 <HAL_GetTick>
 80063fa:	4602      	mov	r2, r0
 80063fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063fe:	1ad3      	subs	r3, r2, r3
 8006400:	2b02      	cmp	r3, #2
 8006402:	d907      	bls.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006404:	2303      	movs	r3, #3
 8006406:	e188      	b.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8006408:	40023800 	.word	0x40023800
 800640c:	424711e0 	.word	0x424711e0
 8006410:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006414:	4b7e      	ldr	r3, [pc, #504]	@ (8006610 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800641c:	2b00      	cmp	r3, #0
 800641e:	d1ea      	bne.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f003 0301 	and.w	r3, r3, #1
 8006428:	2b00      	cmp	r3, #0
 800642a:	d003      	beq.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006430:	2b00      	cmp	r3, #0
 8006432:	d009      	beq.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800643c:	2b00      	cmp	r3, #0
 800643e:	d028      	beq.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006444:	2b00      	cmp	r3, #0
 8006446:	d124      	bne.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8006448:	4b71      	ldr	r3, [pc, #452]	@ (8006610 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800644a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800644e:	0c1b      	lsrs	r3, r3, #16
 8006450:	f003 0303 	and.w	r3, r3, #3
 8006454:	3301      	adds	r3, #1
 8006456:	005b      	lsls	r3, r3, #1
 8006458:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800645a:	4b6d      	ldr	r3, [pc, #436]	@ (8006610 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800645c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006460:	0e1b      	lsrs	r3, r3, #24
 8006462:	f003 030f 	and.w	r3, r3, #15
 8006466:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	685a      	ldr	r2, [r3, #4]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	019b      	lsls	r3, r3, #6
 8006472:	431a      	orrs	r2, r3
 8006474:	69fb      	ldr	r3, [r7, #28]
 8006476:	085b      	lsrs	r3, r3, #1
 8006478:	3b01      	subs	r3, #1
 800647a:	041b      	lsls	r3, r3, #16
 800647c:	431a      	orrs	r2, r3
 800647e:	69bb      	ldr	r3, [r7, #24]
 8006480:	061b      	lsls	r3, r3, #24
 8006482:	431a      	orrs	r2, r3
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	695b      	ldr	r3, [r3, #20]
 8006488:	071b      	lsls	r3, r3, #28
 800648a:	4961      	ldr	r1, [pc, #388]	@ (8006610 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800648c:	4313      	orrs	r3, r2
 800648e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f003 0304 	and.w	r3, r3, #4
 800649a:	2b00      	cmp	r3, #0
 800649c:	d004      	beq.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80064a6:	d00a      	beq.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d035      	beq.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80064bc:	d130      	bne.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80064be:	4b54      	ldr	r3, [pc, #336]	@ (8006610 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80064c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80064c4:	0c1b      	lsrs	r3, r3, #16
 80064c6:	f003 0303 	and.w	r3, r3, #3
 80064ca:	3301      	adds	r3, #1
 80064cc:	005b      	lsls	r3, r3, #1
 80064ce:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80064d0:	4b4f      	ldr	r3, [pc, #316]	@ (8006610 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80064d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80064d6:	0f1b      	lsrs	r3, r3, #28
 80064d8:	f003 0307 	and.w	r3, r3, #7
 80064dc:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	685a      	ldr	r2, [r3, #4]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	019b      	lsls	r3, r3, #6
 80064e8:	431a      	orrs	r2, r3
 80064ea:	69fb      	ldr	r3, [r7, #28]
 80064ec:	085b      	lsrs	r3, r3, #1
 80064ee:	3b01      	subs	r3, #1
 80064f0:	041b      	lsls	r3, r3, #16
 80064f2:	431a      	orrs	r2, r3
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	691b      	ldr	r3, [r3, #16]
 80064f8:	061b      	lsls	r3, r3, #24
 80064fa:	431a      	orrs	r2, r3
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	071b      	lsls	r3, r3, #28
 8006500:	4943      	ldr	r1, [pc, #268]	@ (8006610 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006502:	4313      	orrs	r3, r2
 8006504:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006508:	4b41      	ldr	r3, [pc, #260]	@ (8006610 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800650a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800650e:	f023 021f 	bic.w	r2, r3, #31
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006516:	3b01      	subs	r3, #1
 8006518:	493d      	ldr	r1, [pc, #244]	@ (8006610 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800651a:	4313      	orrs	r3, r2
 800651c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006528:	2b00      	cmp	r3, #0
 800652a:	d029      	beq.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006530:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006534:	d124      	bne.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8006536:	4b36      	ldr	r3, [pc, #216]	@ (8006610 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006538:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800653c:	0c1b      	lsrs	r3, r3, #16
 800653e:	f003 0303 	and.w	r3, r3, #3
 8006542:	3301      	adds	r3, #1
 8006544:	005b      	lsls	r3, r3, #1
 8006546:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006548:	4b31      	ldr	r3, [pc, #196]	@ (8006610 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800654a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800654e:	0f1b      	lsrs	r3, r3, #28
 8006550:	f003 0307 	and.w	r3, r3, #7
 8006554:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	685a      	ldr	r2, [r3, #4]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	019b      	lsls	r3, r3, #6
 8006560:	431a      	orrs	r2, r3
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	68db      	ldr	r3, [r3, #12]
 8006566:	085b      	lsrs	r3, r3, #1
 8006568:	3b01      	subs	r3, #1
 800656a:	041b      	lsls	r3, r3, #16
 800656c:	431a      	orrs	r2, r3
 800656e:	69bb      	ldr	r3, [r7, #24]
 8006570:	061b      	lsls	r3, r3, #24
 8006572:	431a      	orrs	r2, r3
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	071b      	lsls	r3, r3, #28
 8006578:	4925      	ldr	r1, [pc, #148]	@ (8006610 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800657a:	4313      	orrs	r3, r2
 800657c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006588:	2b00      	cmp	r3, #0
 800658a:	d016      	beq.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	685a      	ldr	r2, [r3, #4]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	019b      	lsls	r3, r3, #6
 8006596:	431a      	orrs	r2, r3
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	68db      	ldr	r3, [r3, #12]
 800659c:	085b      	lsrs	r3, r3, #1
 800659e:	3b01      	subs	r3, #1
 80065a0:	041b      	lsls	r3, r3, #16
 80065a2:	431a      	orrs	r2, r3
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	691b      	ldr	r3, [r3, #16]
 80065a8:	061b      	lsls	r3, r3, #24
 80065aa:	431a      	orrs	r2, r3
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	695b      	ldr	r3, [r3, #20]
 80065b0:	071b      	lsls	r3, r3, #28
 80065b2:	4917      	ldr	r1, [pc, #92]	@ (8006610 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80065b4:	4313      	orrs	r3, r2
 80065b6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80065ba:	4b16      	ldr	r3, [pc, #88]	@ (8006614 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80065bc:	2201      	movs	r2, #1
 80065be:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80065c0:	f7fc f812 	bl	80025e8 <HAL_GetTick>
 80065c4:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80065c6:	e008      	b.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80065c8:	f7fc f80e 	bl	80025e8 <HAL_GetTick>
 80065cc:	4602      	mov	r2, r0
 80065ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065d0:	1ad3      	subs	r3, r2, r3
 80065d2:	2b02      	cmp	r3, #2
 80065d4:	d901      	bls.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80065d6:	2303      	movs	r3, #3
 80065d8:	e09f      	b.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80065da:	4b0d      	ldr	r3, [pc, #52]	@ (8006610 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d0f0      	beq.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80065e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	f040 8095 	bne.w	8006718 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80065ee:	4b0a      	ldr	r3, [pc, #40]	@ (8006618 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80065f0:	2200      	movs	r2, #0
 80065f2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80065f4:	f7fb fff8 	bl	80025e8 <HAL_GetTick>
 80065f8:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80065fa:	e00f      	b.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80065fc:	f7fb fff4 	bl	80025e8 <HAL_GetTick>
 8006600:	4602      	mov	r2, r0
 8006602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006604:	1ad3      	subs	r3, r2, r3
 8006606:	2b02      	cmp	r3, #2
 8006608:	d908      	bls.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800660a:	2303      	movs	r3, #3
 800660c:	e085      	b.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x642>
 800660e:	bf00      	nop
 8006610:	40023800 	.word	0x40023800
 8006614:	42470068 	.word	0x42470068
 8006618:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800661c:	4b41      	ldr	r3, [pc, #260]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006624:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006628:	d0e8      	beq.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f003 0304 	and.w	r3, r3, #4
 8006632:	2b00      	cmp	r3, #0
 8006634:	d003      	beq.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x566>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800663a:	2b00      	cmp	r3, #0
 800663c:	d009      	beq.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8006646:	2b00      	cmp	r3, #0
 8006648:	d02b      	beq.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800664e:	2b00      	cmp	r3, #0
 8006650:	d127      	bne.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8006652:	4b34      	ldr	r3, [pc, #208]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006654:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006658:	0c1b      	lsrs	r3, r3, #16
 800665a:	f003 0303 	and.w	r3, r3, #3
 800665e:	3301      	adds	r3, #1
 8006660:	005b      	lsls	r3, r3, #1
 8006662:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	699a      	ldr	r2, [r3, #24]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	69db      	ldr	r3, [r3, #28]
 800666c:	019b      	lsls	r3, r3, #6
 800666e:	431a      	orrs	r2, r3
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	085b      	lsrs	r3, r3, #1
 8006674:	3b01      	subs	r3, #1
 8006676:	041b      	lsls	r3, r3, #16
 8006678:	431a      	orrs	r2, r3
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800667e:	061b      	lsls	r3, r3, #24
 8006680:	4928      	ldr	r1, [pc, #160]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006682:	4313      	orrs	r3, r2
 8006684:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006688:	4b26      	ldr	r3, [pc, #152]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800668a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800668e:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006696:	3b01      	subs	r3, #1
 8006698:	021b      	lsls	r3, r3, #8
 800669a:	4922      	ldr	r1, [pc, #136]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800669c:	4313      	orrs	r3, r2
 800669e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d01d      	beq.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x612>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80066b6:	d118      	bne.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80066b8:	4b1a      	ldr	r3, [pc, #104]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80066ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066be:	0e1b      	lsrs	r3, r3, #24
 80066c0:	f003 030f 	and.w	r3, r3, #15
 80066c4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	699a      	ldr	r2, [r3, #24]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	69db      	ldr	r3, [r3, #28]
 80066ce:	019b      	lsls	r3, r3, #6
 80066d0:	431a      	orrs	r2, r3
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6a1b      	ldr	r3, [r3, #32]
 80066d6:	085b      	lsrs	r3, r3, #1
 80066d8:	3b01      	subs	r3, #1
 80066da:	041b      	lsls	r3, r3, #16
 80066dc:	431a      	orrs	r2, r3
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	061b      	lsls	r3, r3, #24
 80066e2:	4910      	ldr	r1, [pc, #64]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80066e4:	4313      	orrs	r3, r2
 80066e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80066ea:	4b0f      	ldr	r3, [pc, #60]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80066ec:	2201      	movs	r2, #1
 80066ee:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80066f0:	f7fb ff7a 	bl	80025e8 <HAL_GetTick>
 80066f4:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80066f6:	e008      	b.n	800670a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80066f8:	f7fb ff76 	bl	80025e8 <HAL_GetTick>
 80066fc:	4602      	mov	r2, r0
 80066fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006700:	1ad3      	subs	r3, r2, r3
 8006702:	2b02      	cmp	r3, #2
 8006704:	d901      	bls.n	800670a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006706:	2303      	movs	r3, #3
 8006708:	e007      	b.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800670a:	4b06      	ldr	r3, [pc, #24]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006712:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006716:	d1ef      	bne.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8006718:	2300      	movs	r3, #0
}
 800671a:	4618      	mov	r0, r3
 800671c:	3730      	adds	r7, #48	@ 0x30
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}
 8006722:	bf00      	nop
 8006724:	40023800 	.word	0x40023800
 8006728:	42470070 	.word	0x42470070

0800672c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800672c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006730:	b0ae      	sub	sp, #184	@ 0xb8
 8006732:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006734:	2300      	movs	r3, #0
 8006736:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800673a:	2300      	movs	r3, #0
 800673c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8006740:	2300      	movs	r3, #0
 8006742:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8006746:	2300      	movs	r3, #0
 8006748:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800674c:	2300      	movs	r3, #0
 800674e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006752:	4bcb      	ldr	r3, [pc, #812]	@ (8006a80 <HAL_RCC_GetSysClockFreq+0x354>)
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	f003 030c 	and.w	r3, r3, #12
 800675a:	2b0c      	cmp	r3, #12
 800675c:	f200 8206 	bhi.w	8006b6c <HAL_RCC_GetSysClockFreq+0x440>
 8006760:	a201      	add	r2, pc, #4	@ (adr r2, 8006768 <HAL_RCC_GetSysClockFreq+0x3c>)
 8006762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006766:	bf00      	nop
 8006768:	0800679d 	.word	0x0800679d
 800676c:	08006b6d 	.word	0x08006b6d
 8006770:	08006b6d 	.word	0x08006b6d
 8006774:	08006b6d 	.word	0x08006b6d
 8006778:	080067a5 	.word	0x080067a5
 800677c:	08006b6d 	.word	0x08006b6d
 8006780:	08006b6d 	.word	0x08006b6d
 8006784:	08006b6d 	.word	0x08006b6d
 8006788:	080067ad 	.word	0x080067ad
 800678c:	08006b6d 	.word	0x08006b6d
 8006790:	08006b6d 	.word	0x08006b6d
 8006794:	08006b6d 	.word	0x08006b6d
 8006798:	0800699d 	.word	0x0800699d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800679c:	4bb9      	ldr	r3, [pc, #740]	@ (8006a84 <HAL_RCC_GetSysClockFreq+0x358>)
 800679e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 80067a2:	e1e7      	b.n	8006b74 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80067a4:	4bb8      	ldr	r3, [pc, #736]	@ (8006a88 <HAL_RCC_GetSysClockFreq+0x35c>)
 80067a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80067aa:	e1e3      	b.n	8006b74 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80067ac:	4bb4      	ldr	r3, [pc, #720]	@ (8006a80 <HAL_RCC_GetSysClockFreq+0x354>)
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80067b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80067b8:	4bb1      	ldr	r3, [pc, #708]	@ (8006a80 <HAL_RCC_GetSysClockFreq+0x354>)
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d071      	beq.n	80068a8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80067c4:	4bae      	ldr	r3, [pc, #696]	@ (8006a80 <HAL_RCC_GetSysClockFreq+0x354>)
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	099b      	lsrs	r3, r3, #6
 80067ca:	2200      	movs	r2, #0
 80067cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80067d0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80067d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80067d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067dc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80067e0:	2300      	movs	r3, #0
 80067e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80067e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80067ea:	4622      	mov	r2, r4
 80067ec:	462b      	mov	r3, r5
 80067ee:	f04f 0000 	mov.w	r0, #0
 80067f2:	f04f 0100 	mov.w	r1, #0
 80067f6:	0159      	lsls	r1, r3, #5
 80067f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80067fc:	0150      	lsls	r0, r2, #5
 80067fe:	4602      	mov	r2, r0
 8006800:	460b      	mov	r3, r1
 8006802:	4621      	mov	r1, r4
 8006804:	1a51      	subs	r1, r2, r1
 8006806:	6439      	str	r1, [r7, #64]	@ 0x40
 8006808:	4629      	mov	r1, r5
 800680a:	eb63 0301 	sbc.w	r3, r3, r1
 800680e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006810:	f04f 0200 	mov.w	r2, #0
 8006814:	f04f 0300 	mov.w	r3, #0
 8006818:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800681c:	4649      	mov	r1, r9
 800681e:	018b      	lsls	r3, r1, #6
 8006820:	4641      	mov	r1, r8
 8006822:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006826:	4641      	mov	r1, r8
 8006828:	018a      	lsls	r2, r1, #6
 800682a:	4641      	mov	r1, r8
 800682c:	1a51      	subs	r1, r2, r1
 800682e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006830:	4649      	mov	r1, r9
 8006832:	eb63 0301 	sbc.w	r3, r3, r1
 8006836:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006838:	f04f 0200 	mov.w	r2, #0
 800683c:	f04f 0300 	mov.w	r3, #0
 8006840:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8006844:	4649      	mov	r1, r9
 8006846:	00cb      	lsls	r3, r1, #3
 8006848:	4641      	mov	r1, r8
 800684a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800684e:	4641      	mov	r1, r8
 8006850:	00ca      	lsls	r2, r1, #3
 8006852:	4610      	mov	r0, r2
 8006854:	4619      	mov	r1, r3
 8006856:	4603      	mov	r3, r0
 8006858:	4622      	mov	r2, r4
 800685a:	189b      	adds	r3, r3, r2
 800685c:	633b      	str	r3, [r7, #48]	@ 0x30
 800685e:	462b      	mov	r3, r5
 8006860:	460a      	mov	r2, r1
 8006862:	eb42 0303 	adc.w	r3, r2, r3
 8006866:	637b      	str	r3, [r7, #52]	@ 0x34
 8006868:	f04f 0200 	mov.w	r2, #0
 800686c:	f04f 0300 	mov.w	r3, #0
 8006870:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006874:	4629      	mov	r1, r5
 8006876:	024b      	lsls	r3, r1, #9
 8006878:	4621      	mov	r1, r4
 800687a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800687e:	4621      	mov	r1, r4
 8006880:	024a      	lsls	r2, r1, #9
 8006882:	4610      	mov	r0, r2
 8006884:	4619      	mov	r1, r3
 8006886:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800688a:	2200      	movs	r2, #0
 800688c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006890:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006894:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8006898:	f7fa f9a6 	bl	8000be8 <__aeabi_uldivmod>
 800689c:	4602      	mov	r2, r0
 800689e:	460b      	mov	r3, r1
 80068a0:	4613      	mov	r3, r2
 80068a2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80068a6:	e067      	b.n	8006978 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80068a8:	4b75      	ldr	r3, [pc, #468]	@ (8006a80 <HAL_RCC_GetSysClockFreq+0x354>)
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	099b      	lsrs	r3, r3, #6
 80068ae:	2200      	movs	r2, #0
 80068b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80068b4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80068b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80068bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068c0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80068c2:	2300      	movs	r3, #0
 80068c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80068c6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80068ca:	4622      	mov	r2, r4
 80068cc:	462b      	mov	r3, r5
 80068ce:	f04f 0000 	mov.w	r0, #0
 80068d2:	f04f 0100 	mov.w	r1, #0
 80068d6:	0159      	lsls	r1, r3, #5
 80068d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80068dc:	0150      	lsls	r0, r2, #5
 80068de:	4602      	mov	r2, r0
 80068e0:	460b      	mov	r3, r1
 80068e2:	4621      	mov	r1, r4
 80068e4:	1a51      	subs	r1, r2, r1
 80068e6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80068e8:	4629      	mov	r1, r5
 80068ea:	eb63 0301 	sbc.w	r3, r3, r1
 80068ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80068f0:	f04f 0200 	mov.w	r2, #0
 80068f4:	f04f 0300 	mov.w	r3, #0
 80068f8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80068fc:	4649      	mov	r1, r9
 80068fe:	018b      	lsls	r3, r1, #6
 8006900:	4641      	mov	r1, r8
 8006902:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006906:	4641      	mov	r1, r8
 8006908:	018a      	lsls	r2, r1, #6
 800690a:	4641      	mov	r1, r8
 800690c:	ebb2 0a01 	subs.w	sl, r2, r1
 8006910:	4649      	mov	r1, r9
 8006912:	eb63 0b01 	sbc.w	fp, r3, r1
 8006916:	f04f 0200 	mov.w	r2, #0
 800691a:	f04f 0300 	mov.w	r3, #0
 800691e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006922:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006926:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800692a:	4692      	mov	sl, r2
 800692c:	469b      	mov	fp, r3
 800692e:	4623      	mov	r3, r4
 8006930:	eb1a 0303 	adds.w	r3, sl, r3
 8006934:	623b      	str	r3, [r7, #32]
 8006936:	462b      	mov	r3, r5
 8006938:	eb4b 0303 	adc.w	r3, fp, r3
 800693c:	627b      	str	r3, [r7, #36]	@ 0x24
 800693e:	f04f 0200 	mov.w	r2, #0
 8006942:	f04f 0300 	mov.w	r3, #0
 8006946:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800694a:	4629      	mov	r1, r5
 800694c:	028b      	lsls	r3, r1, #10
 800694e:	4621      	mov	r1, r4
 8006950:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006954:	4621      	mov	r1, r4
 8006956:	028a      	lsls	r2, r1, #10
 8006958:	4610      	mov	r0, r2
 800695a:	4619      	mov	r1, r3
 800695c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006960:	2200      	movs	r2, #0
 8006962:	673b      	str	r3, [r7, #112]	@ 0x70
 8006964:	677a      	str	r2, [r7, #116]	@ 0x74
 8006966:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800696a:	f7fa f93d 	bl	8000be8 <__aeabi_uldivmod>
 800696e:	4602      	mov	r2, r0
 8006970:	460b      	mov	r3, r1
 8006972:	4613      	mov	r3, r2
 8006974:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006978:	4b41      	ldr	r3, [pc, #260]	@ (8006a80 <HAL_RCC_GetSysClockFreq+0x354>)
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	0c1b      	lsrs	r3, r3, #16
 800697e:	f003 0303 	and.w	r3, r3, #3
 8006982:	3301      	adds	r3, #1
 8006984:	005b      	lsls	r3, r3, #1
 8006986:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 800698a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800698e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006992:	fbb2 f3f3 	udiv	r3, r2, r3
 8006996:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800699a:	e0eb      	b.n	8006b74 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800699c:	4b38      	ldr	r3, [pc, #224]	@ (8006a80 <HAL_RCC_GetSysClockFreq+0x354>)
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80069a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80069a8:	4b35      	ldr	r3, [pc, #212]	@ (8006a80 <HAL_RCC_GetSysClockFreq+0x354>)
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d06b      	beq.n	8006a8c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80069b4:	4b32      	ldr	r3, [pc, #200]	@ (8006a80 <HAL_RCC_GetSysClockFreq+0x354>)
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	099b      	lsrs	r3, r3, #6
 80069ba:	2200      	movs	r2, #0
 80069bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80069be:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80069c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80069c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069c6:	663b      	str	r3, [r7, #96]	@ 0x60
 80069c8:	2300      	movs	r3, #0
 80069ca:	667b      	str	r3, [r7, #100]	@ 0x64
 80069cc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80069d0:	4622      	mov	r2, r4
 80069d2:	462b      	mov	r3, r5
 80069d4:	f04f 0000 	mov.w	r0, #0
 80069d8:	f04f 0100 	mov.w	r1, #0
 80069dc:	0159      	lsls	r1, r3, #5
 80069de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80069e2:	0150      	lsls	r0, r2, #5
 80069e4:	4602      	mov	r2, r0
 80069e6:	460b      	mov	r3, r1
 80069e8:	4621      	mov	r1, r4
 80069ea:	1a51      	subs	r1, r2, r1
 80069ec:	61b9      	str	r1, [r7, #24]
 80069ee:	4629      	mov	r1, r5
 80069f0:	eb63 0301 	sbc.w	r3, r3, r1
 80069f4:	61fb      	str	r3, [r7, #28]
 80069f6:	f04f 0200 	mov.w	r2, #0
 80069fa:	f04f 0300 	mov.w	r3, #0
 80069fe:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8006a02:	4659      	mov	r1, fp
 8006a04:	018b      	lsls	r3, r1, #6
 8006a06:	4651      	mov	r1, sl
 8006a08:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006a0c:	4651      	mov	r1, sl
 8006a0e:	018a      	lsls	r2, r1, #6
 8006a10:	4651      	mov	r1, sl
 8006a12:	ebb2 0801 	subs.w	r8, r2, r1
 8006a16:	4659      	mov	r1, fp
 8006a18:	eb63 0901 	sbc.w	r9, r3, r1
 8006a1c:	f04f 0200 	mov.w	r2, #0
 8006a20:	f04f 0300 	mov.w	r3, #0
 8006a24:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006a28:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006a2c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006a30:	4690      	mov	r8, r2
 8006a32:	4699      	mov	r9, r3
 8006a34:	4623      	mov	r3, r4
 8006a36:	eb18 0303 	adds.w	r3, r8, r3
 8006a3a:	613b      	str	r3, [r7, #16]
 8006a3c:	462b      	mov	r3, r5
 8006a3e:	eb49 0303 	adc.w	r3, r9, r3
 8006a42:	617b      	str	r3, [r7, #20]
 8006a44:	f04f 0200 	mov.w	r2, #0
 8006a48:	f04f 0300 	mov.w	r3, #0
 8006a4c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8006a50:	4629      	mov	r1, r5
 8006a52:	024b      	lsls	r3, r1, #9
 8006a54:	4621      	mov	r1, r4
 8006a56:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006a5a:	4621      	mov	r1, r4
 8006a5c:	024a      	lsls	r2, r1, #9
 8006a5e:	4610      	mov	r0, r2
 8006a60:	4619      	mov	r1, r3
 8006a62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006a66:	2200      	movs	r2, #0
 8006a68:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006a6a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8006a6c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006a70:	f7fa f8ba 	bl	8000be8 <__aeabi_uldivmod>
 8006a74:	4602      	mov	r2, r0
 8006a76:	460b      	mov	r3, r1
 8006a78:	4613      	mov	r3, r2
 8006a7a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006a7e:	e065      	b.n	8006b4c <HAL_RCC_GetSysClockFreq+0x420>
 8006a80:	40023800 	.word	0x40023800
 8006a84:	00f42400 	.word	0x00f42400
 8006a88:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a8c:	4b3d      	ldr	r3, [pc, #244]	@ (8006b84 <HAL_RCC_GetSysClockFreq+0x458>)
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	099b      	lsrs	r3, r3, #6
 8006a92:	2200      	movs	r2, #0
 8006a94:	4618      	mov	r0, r3
 8006a96:	4611      	mov	r1, r2
 8006a98:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006a9c:	653b      	str	r3, [r7, #80]	@ 0x50
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	657b      	str	r3, [r7, #84]	@ 0x54
 8006aa2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8006aa6:	4642      	mov	r2, r8
 8006aa8:	464b      	mov	r3, r9
 8006aaa:	f04f 0000 	mov.w	r0, #0
 8006aae:	f04f 0100 	mov.w	r1, #0
 8006ab2:	0159      	lsls	r1, r3, #5
 8006ab4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006ab8:	0150      	lsls	r0, r2, #5
 8006aba:	4602      	mov	r2, r0
 8006abc:	460b      	mov	r3, r1
 8006abe:	4641      	mov	r1, r8
 8006ac0:	1a51      	subs	r1, r2, r1
 8006ac2:	60b9      	str	r1, [r7, #8]
 8006ac4:	4649      	mov	r1, r9
 8006ac6:	eb63 0301 	sbc.w	r3, r3, r1
 8006aca:	60fb      	str	r3, [r7, #12]
 8006acc:	f04f 0200 	mov.w	r2, #0
 8006ad0:	f04f 0300 	mov.w	r3, #0
 8006ad4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8006ad8:	4659      	mov	r1, fp
 8006ada:	018b      	lsls	r3, r1, #6
 8006adc:	4651      	mov	r1, sl
 8006ade:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006ae2:	4651      	mov	r1, sl
 8006ae4:	018a      	lsls	r2, r1, #6
 8006ae6:	4651      	mov	r1, sl
 8006ae8:	1a54      	subs	r4, r2, r1
 8006aea:	4659      	mov	r1, fp
 8006aec:	eb63 0501 	sbc.w	r5, r3, r1
 8006af0:	f04f 0200 	mov.w	r2, #0
 8006af4:	f04f 0300 	mov.w	r3, #0
 8006af8:	00eb      	lsls	r3, r5, #3
 8006afa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006afe:	00e2      	lsls	r2, r4, #3
 8006b00:	4614      	mov	r4, r2
 8006b02:	461d      	mov	r5, r3
 8006b04:	4643      	mov	r3, r8
 8006b06:	18e3      	adds	r3, r4, r3
 8006b08:	603b      	str	r3, [r7, #0]
 8006b0a:	464b      	mov	r3, r9
 8006b0c:	eb45 0303 	adc.w	r3, r5, r3
 8006b10:	607b      	str	r3, [r7, #4]
 8006b12:	f04f 0200 	mov.w	r2, #0
 8006b16:	f04f 0300 	mov.w	r3, #0
 8006b1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006b1e:	4629      	mov	r1, r5
 8006b20:	028b      	lsls	r3, r1, #10
 8006b22:	4621      	mov	r1, r4
 8006b24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006b28:	4621      	mov	r1, r4
 8006b2a:	028a      	lsls	r2, r1, #10
 8006b2c:	4610      	mov	r0, r2
 8006b2e:	4619      	mov	r1, r3
 8006b30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006b34:	2200      	movs	r2, #0
 8006b36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b38:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006b3a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006b3e:	f7fa f853 	bl	8000be8 <__aeabi_uldivmod>
 8006b42:	4602      	mov	r2, r0
 8006b44:	460b      	mov	r3, r1
 8006b46:	4613      	mov	r3, r2
 8006b48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006b4c:	4b0d      	ldr	r3, [pc, #52]	@ (8006b84 <HAL_RCC_GetSysClockFreq+0x458>)
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	0f1b      	lsrs	r3, r3, #28
 8006b52:	f003 0307 	and.w	r3, r3, #7
 8006b56:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8006b5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006b5e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b66:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006b6a:	e003      	b.n	8006b74 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006b6c:	4b06      	ldr	r3, [pc, #24]	@ (8006b88 <HAL_RCC_GetSysClockFreq+0x45c>)
 8006b6e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006b72:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006b74:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	37b8      	adds	r7, #184	@ 0xb8
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b82:	bf00      	nop
 8006b84:	40023800 	.word	0x40023800
 8006b88:	00f42400 	.word	0x00f42400

08006b8c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b086      	sub	sp, #24
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d101      	bne.n	8006b9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	e28d      	b.n	80070ba <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f003 0301 	and.w	r3, r3, #1
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	f000 8083 	beq.w	8006cb2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006bac:	4b94      	ldr	r3, [pc, #592]	@ (8006e00 <HAL_RCC_OscConfig+0x274>)
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	f003 030c 	and.w	r3, r3, #12
 8006bb4:	2b04      	cmp	r3, #4
 8006bb6:	d019      	beq.n	8006bec <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006bb8:	4b91      	ldr	r3, [pc, #580]	@ (8006e00 <HAL_RCC_OscConfig+0x274>)
 8006bba:	689b      	ldr	r3, [r3, #8]
 8006bbc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006bc0:	2b08      	cmp	r3, #8
 8006bc2:	d106      	bne.n	8006bd2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006bc4:	4b8e      	ldr	r3, [pc, #568]	@ (8006e00 <HAL_RCC_OscConfig+0x274>)
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006bcc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006bd0:	d00c      	beq.n	8006bec <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006bd2:	4b8b      	ldr	r3, [pc, #556]	@ (8006e00 <HAL_RCC_OscConfig+0x274>)
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006bda:	2b0c      	cmp	r3, #12
 8006bdc:	d112      	bne.n	8006c04 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006bde:	4b88      	ldr	r3, [pc, #544]	@ (8006e00 <HAL_RCC_OscConfig+0x274>)
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006be6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006bea:	d10b      	bne.n	8006c04 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bec:	4b84      	ldr	r3, [pc, #528]	@ (8006e00 <HAL_RCC_OscConfig+0x274>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d05b      	beq.n	8006cb0 <HAL_RCC_OscConfig+0x124>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d157      	bne.n	8006cb0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006c00:	2301      	movs	r3, #1
 8006c02:	e25a      	b.n	80070ba <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c0c:	d106      	bne.n	8006c1c <HAL_RCC_OscConfig+0x90>
 8006c0e:	4b7c      	ldr	r3, [pc, #496]	@ (8006e00 <HAL_RCC_OscConfig+0x274>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a7b      	ldr	r2, [pc, #492]	@ (8006e00 <HAL_RCC_OscConfig+0x274>)
 8006c14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c18:	6013      	str	r3, [r2, #0]
 8006c1a:	e01d      	b.n	8006c58 <HAL_RCC_OscConfig+0xcc>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006c24:	d10c      	bne.n	8006c40 <HAL_RCC_OscConfig+0xb4>
 8006c26:	4b76      	ldr	r3, [pc, #472]	@ (8006e00 <HAL_RCC_OscConfig+0x274>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a75      	ldr	r2, [pc, #468]	@ (8006e00 <HAL_RCC_OscConfig+0x274>)
 8006c2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006c30:	6013      	str	r3, [r2, #0]
 8006c32:	4b73      	ldr	r3, [pc, #460]	@ (8006e00 <HAL_RCC_OscConfig+0x274>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a72      	ldr	r2, [pc, #456]	@ (8006e00 <HAL_RCC_OscConfig+0x274>)
 8006c38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c3c:	6013      	str	r3, [r2, #0]
 8006c3e:	e00b      	b.n	8006c58 <HAL_RCC_OscConfig+0xcc>
 8006c40:	4b6f      	ldr	r3, [pc, #444]	@ (8006e00 <HAL_RCC_OscConfig+0x274>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a6e      	ldr	r2, [pc, #440]	@ (8006e00 <HAL_RCC_OscConfig+0x274>)
 8006c46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c4a:	6013      	str	r3, [r2, #0]
 8006c4c:	4b6c      	ldr	r3, [pc, #432]	@ (8006e00 <HAL_RCC_OscConfig+0x274>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a6b      	ldr	r2, [pc, #428]	@ (8006e00 <HAL_RCC_OscConfig+0x274>)
 8006c52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006c56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d013      	beq.n	8006c88 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c60:	f7fb fcc2 	bl	80025e8 <HAL_GetTick>
 8006c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c66:	e008      	b.n	8006c7a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c68:	f7fb fcbe 	bl	80025e8 <HAL_GetTick>
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	1ad3      	subs	r3, r2, r3
 8006c72:	2b64      	cmp	r3, #100	@ 0x64
 8006c74:	d901      	bls.n	8006c7a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006c76:	2303      	movs	r3, #3
 8006c78:	e21f      	b.n	80070ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c7a:	4b61      	ldr	r3, [pc, #388]	@ (8006e00 <HAL_RCC_OscConfig+0x274>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d0f0      	beq.n	8006c68 <HAL_RCC_OscConfig+0xdc>
 8006c86:	e014      	b.n	8006cb2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c88:	f7fb fcae 	bl	80025e8 <HAL_GetTick>
 8006c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c8e:	e008      	b.n	8006ca2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c90:	f7fb fcaa 	bl	80025e8 <HAL_GetTick>
 8006c94:	4602      	mov	r2, r0
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	1ad3      	subs	r3, r2, r3
 8006c9a:	2b64      	cmp	r3, #100	@ 0x64
 8006c9c:	d901      	bls.n	8006ca2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006c9e:	2303      	movs	r3, #3
 8006ca0:	e20b      	b.n	80070ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ca2:	4b57      	ldr	r3, [pc, #348]	@ (8006e00 <HAL_RCC_OscConfig+0x274>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d1f0      	bne.n	8006c90 <HAL_RCC_OscConfig+0x104>
 8006cae:	e000      	b.n	8006cb2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006cb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f003 0302 	and.w	r3, r3, #2
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d06f      	beq.n	8006d9e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006cbe:	4b50      	ldr	r3, [pc, #320]	@ (8006e00 <HAL_RCC_OscConfig+0x274>)
 8006cc0:	689b      	ldr	r3, [r3, #8]
 8006cc2:	f003 030c 	and.w	r3, r3, #12
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d017      	beq.n	8006cfa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006cca:	4b4d      	ldr	r3, [pc, #308]	@ (8006e00 <HAL_RCC_OscConfig+0x274>)
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006cd2:	2b08      	cmp	r3, #8
 8006cd4:	d105      	bne.n	8006ce2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006cd6:	4b4a      	ldr	r3, [pc, #296]	@ (8006e00 <HAL_RCC_OscConfig+0x274>)
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d00b      	beq.n	8006cfa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006ce2:	4b47      	ldr	r3, [pc, #284]	@ (8006e00 <HAL_RCC_OscConfig+0x274>)
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006cea:	2b0c      	cmp	r3, #12
 8006cec:	d11c      	bne.n	8006d28 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006cee:	4b44      	ldr	r3, [pc, #272]	@ (8006e00 <HAL_RCC_OscConfig+0x274>)
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d116      	bne.n	8006d28 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006cfa:	4b41      	ldr	r3, [pc, #260]	@ (8006e00 <HAL_RCC_OscConfig+0x274>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f003 0302 	and.w	r3, r3, #2
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d005      	beq.n	8006d12 <HAL_RCC_OscConfig+0x186>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	68db      	ldr	r3, [r3, #12]
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	d001      	beq.n	8006d12 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	e1d3      	b.n	80070ba <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d12:	4b3b      	ldr	r3, [pc, #236]	@ (8006e00 <HAL_RCC_OscConfig+0x274>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	691b      	ldr	r3, [r3, #16]
 8006d1e:	00db      	lsls	r3, r3, #3
 8006d20:	4937      	ldr	r1, [pc, #220]	@ (8006e00 <HAL_RCC_OscConfig+0x274>)
 8006d22:	4313      	orrs	r3, r2
 8006d24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d26:	e03a      	b.n	8006d9e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	68db      	ldr	r3, [r3, #12]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d020      	beq.n	8006d72 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006d30:	4b34      	ldr	r3, [pc, #208]	@ (8006e04 <HAL_RCC_OscConfig+0x278>)
 8006d32:	2201      	movs	r2, #1
 8006d34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d36:	f7fb fc57 	bl	80025e8 <HAL_GetTick>
 8006d3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d3c:	e008      	b.n	8006d50 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d3e:	f7fb fc53 	bl	80025e8 <HAL_GetTick>
 8006d42:	4602      	mov	r2, r0
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	1ad3      	subs	r3, r2, r3
 8006d48:	2b02      	cmp	r3, #2
 8006d4a:	d901      	bls.n	8006d50 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006d4c:	2303      	movs	r3, #3
 8006d4e:	e1b4      	b.n	80070ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d50:	4b2b      	ldr	r3, [pc, #172]	@ (8006e00 <HAL_RCC_OscConfig+0x274>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f003 0302 	and.w	r3, r3, #2
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d0f0      	beq.n	8006d3e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d5c:	4b28      	ldr	r3, [pc, #160]	@ (8006e00 <HAL_RCC_OscConfig+0x274>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	691b      	ldr	r3, [r3, #16]
 8006d68:	00db      	lsls	r3, r3, #3
 8006d6a:	4925      	ldr	r1, [pc, #148]	@ (8006e00 <HAL_RCC_OscConfig+0x274>)
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	600b      	str	r3, [r1, #0]
 8006d70:	e015      	b.n	8006d9e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d72:	4b24      	ldr	r3, [pc, #144]	@ (8006e04 <HAL_RCC_OscConfig+0x278>)
 8006d74:	2200      	movs	r2, #0
 8006d76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d78:	f7fb fc36 	bl	80025e8 <HAL_GetTick>
 8006d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d7e:	e008      	b.n	8006d92 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d80:	f7fb fc32 	bl	80025e8 <HAL_GetTick>
 8006d84:	4602      	mov	r2, r0
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	1ad3      	subs	r3, r2, r3
 8006d8a:	2b02      	cmp	r3, #2
 8006d8c:	d901      	bls.n	8006d92 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006d8e:	2303      	movs	r3, #3
 8006d90:	e193      	b.n	80070ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d92:	4b1b      	ldr	r3, [pc, #108]	@ (8006e00 <HAL_RCC_OscConfig+0x274>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f003 0302 	and.w	r3, r3, #2
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d1f0      	bne.n	8006d80 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f003 0308 	and.w	r3, r3, #8
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d036      	beq.n	8006e18 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	695b      	ldr	r3, [r3, #20]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d016      	beq.n	8006de0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006db2:	4b15      	ldr	r3, [pc, #84]	@ (8006e08 <HAL_RCC_OscConfig+0x27c>)
 8006db4:	2201      	movs	r2, #1
 8006db6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006db8:	f7fb fc16 	bl	80025e8 <HAL_GetTick>
 8006dbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006dbe:	e008      	b.n	8006dd2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006dc0:	f7fb fc12 	bl	80025e8 <HAL_GetTick>
 8006dc4:	4602      	mov	r2, r0
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	1ad3      	subs	r3, r2, r3
 8006dca:	2b02      	cmp	r3, #2
 8006dcc:	d901      	bls.n	8006dd2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006dce:	2303      	movs	r3, #3
 8006dd0:	e173      	b.n	80070ba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006dd2:	4b0b      	ldr	r3, [pc, #44]	@ (8006e00 <HAL_RCC_OscConfig+0x274>)
 8006dd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006dd6:	f003 0302 	and.w	r3, r3, #2
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d0f0      	beq.n	8006dc0 <HAL_RCC_OscConfig+0x234>
 8006dde:	e01b      	b.n	8006e18 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006de0:	4b09      	ldr	r3, [pc, #36]	@ (8006e08 <HAL_RCC_OscConfig+0x27c>)
 8006de2:	2200      	movs	r2, #0
 8006de4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006de6:	f7fb fbff 	bl	80025e8 <HAL_GetTick>
 8006dea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006dec:	e00e      	b.n	8006e0c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006dee:	f7fb fbfb 	bl	80025e8 <HAL_GetTick>
 8006df2:	4602      	mov	r2, r0
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	1ad3      	subs	r3, r2, r3
 8006df8:	2b02      	cmp	r3, #2
 8006dfa:	d907      	bls.n	8006e0c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006dfc:	2303      	movs	r3, #3
 8006dfe:	e15c      	b.n	80070ba <HAL_RCC_OscConfig+0x52e>
 8006e00:	40023800 	.word	0x40023800
 8006e04:	42470000 	.word	0x42470000
 8006e08:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e0c:	4b8a      	ldr	r3, [pc, #552]	@ (8007038 <HAL_RCC_OscConfig+0x4ac>)
 8006e0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e10:	f003 0302 	and.w	r3, r3, #2
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d1ea      	bne.n	8006dee <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f003 0304 	and.w	r3, r3, #4
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	f000 8097 	beq.w	8006f54 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006e26:	2300      	movs	r3, #0
 8006e28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e2a:	4b83      	ldr	r3, [pc, #524]	@ (8007038 <HAL_RCC_OscConfig+0x4ac>)
 8006e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d10f      	bne.n	8006e56 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e36:	2300      	movs	r3, #0
 8006e38:	60bb      	str	r3, [r7, #8]
 8006e3a:	4b7f      	ldr	r3, [pc, #508]	@ (8007038 <HAL_RCC_OscConfig+0x4ac>)
 8006e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e3e:	4a7e      	ldr	r2, [pc, #504]	@ (8007038 <HAL_RCC_OscConfig+0x4ac>)
 8006e40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e44:	6413      	str	r3, [r2, #64]	@ 0x40
 8006e46:	4b7c      	ldr	r3, [pc, #496]	@ (8007038 <HAL_RCC_OscConfig+0x4ac>)
 8006e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e4e:	60bb      	str	r3, [r7, #8]
 8006e50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e52:	2301      	movs	r3, #1
 8006e54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e56:	4b79      	ldr	r3, [pc, #484]	@ (800703c <HAL_RCC_OscConfig+0x4b0>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d118      	bne.n	8006e94 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e62:	4b76      	ldr	r3, [pc, #472]	@ (800703c <HAL_RCC_OscConfig+0x4b0>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a75      	ldr	r2, [pc, #468]	@ (800703c <HAL_RCC_OscConfig+0x4b0>)
 8006e68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e6e:	f7fb fbbb 	bl	80025e8 <HAL_GetTick>
 8006e72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e74:	e008      	b.n	8006e88 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e76:	f7fb fbb7 	bl	80025e8 <HAL_GetTick>
 8006e7a:	4602      	mov	r2, r0
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	1ad3      	subs	r3, r2, r3
 8006e80:	2b02      	cmp	r3, #2
 8006e82:	d901      	bls.n	8006e88 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006e84:	2303      	movs	r3, #3
 8006e86:	e118      	b.n	80070ba <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e88:	4b6c      	ldr	r3, [pc, #432]	@ (800703c <HAL_RCC_OscConfig+0x4b0>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d0f0      	beq.n	8006e76 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d106      	bne.n	8006eaa <HAL_RCC_OscConfig+0x31e>
 8006e9c:	4b66      	ldr	r3, [pc, #408]	@ (8007038 <HAL_RCC_OscConfig+0x4ac>)
 8006e9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ea0:	4a65      	ldr	r2, [pc, #404]	@ (8007038 <HAL_RCC_OscConfig+0x4ac>)
 8006ea2:	f043 0301 	orr.w	r3, r3, #1
 8006ea6:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ea8:	e01c      	b.n	8006ee4 <HAL_RCC_OscConfig+0x358>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	2b05      	cmp	r3, #5
 8006eb0:	d10c      	bne.n	8006ecc <HAL_RCC_OscConfig+0x340>
 8006eb2:	4b61      	ldr	r3, [pc, #388]	@ (8007038 <HAL_RCC_OscConfig+0x4ac>)
 8006eb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006eb6:	4a60      	ldr	r2, [pc, #384]	@ (8007038 <HAL_RCC_OscConfig+0x4ac>)
 8006eb8:	f043 0304 	orr.w	r3, r3, #4
 8006ebc:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ebe:	4b5e      	ldr	r3, [pc, #376]	@ (8007038 <HAL_RCC_OscConfig+0x4ac>)
 8006ec0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ec2:	4a5d      	ldr	r2, [pc, #372]	@ (8007038 <HAL_RCC_OscConfig+0x4ac>)
 8006ec4:	f043 0301 	orr.w	r3, r3, #1
 8006ec8:	6713      	str	r3, [r2, #112]	@ 0x70
 8006eca:	e00b      	b.n	8006ee4 <HAL_RCC_OscConfig+0x358>
 8006ecc:	4b5a      	ldr	r3, [pc, #360]	@ (8007038 <HAL_RCC_OscConfig+0x4ac>)
 8006ece:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ed0:	4a59      	ldr	r2, [pc, #356]	@ (8007038 <HAL_RCC_OscConfig+0x4ac>)
 8006ed2:	f023 0301 	bic.w	r3, r3, #1
 8006ed6:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ed8:	4b57      	ldr	r3, [pc, #348]	@ (8007038 <HAL_RCC_OscConfig+0x4ac>)
 8006eda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006edc:	4a56      	ldr	r2, [pc, #344]	@ (8007038 <HAL_RCC_OscConfig+0x4ac>)
 8006ede:	f023 0304 	bic.w	r3, r3, #4
 8006ee2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	689b      	ldr	r3, [r3, #8]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d015      	beq.n	8006f18 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006eec:	f7fb fb7c 	bl	80025e8 <HAL_GetTick>
 8006ef0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ef2:	e00a      	b.n	8006f0a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ef4:	f7fb fb78 	bl	80025e8 <HAL_GetTick>
 8006ef8:	4602      	mov	r2, r0
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	1ad3      	subs	r3, r2, r3
 8006efe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d901      	bls.n	8006f0a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006f06:	2303      	movs	r3, #3
 8006f08:	e0d7      	b.n	80070ba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f0a:	4b4b      	ldr	r3, [pc, #300]	@ (8007038 <HAL_RCC_OscConfig+0x4ac>)
 8006f0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f0e:	f003 0302 	and.w	r3, r3, #2
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d0ee      	beq.n	8006ef4 <HAL_RCC_OscConfig+0x368>
 8006f16:	e014      	b.n	8006f42 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f18:	f7fb fb66 	bl	80025e8 <HAL_GetTick>
 8006f1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f1e:	e00a      	b.n	8006f36 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f20:	f7fb fb62 	bl	80025e8 <HAL_GetTick>
 8006f24:	4602      	mov	r2, r0
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	1ad3      	subs	r3, r2, r3
 8006f2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d901      	bls.n	8006f36 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006f32:	2303      	movs	r3, #3
 8006f34:	e0c1      	b.n	80070ba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f36:	4b40      	ldr	r3, [pc, #256]	@ (8007038 <HAL_RCC_OscConfig+0x4ac>)
 8006f38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f3a:	f003 0302 	and.w	r3, r3, #2
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d1ee      	bne.n	8006f20 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006f42:	7dfb      	ldrb	r3, [r7, #23]
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	d105      	bne.n	8006f54 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f48:	4b3b      	ldr	r3, [pc, #236]	@ (8007038 <HAL_RCC_OscConfig+0x4ac>)
 8006f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f4c:	4a3a      	ldr	r2, [pc, #232]	@ (8007038 <HAL_RCC_OscConfig+0x4ac>)
 8006f4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006f52:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	699b      	ldr	r3, [r3, #24]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	f000 80ad 	beq.w	80070b8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006f5e:	4b36      	ldr	r3, [pc, #216]	@ (8007038 <HAL_RCC_OscConfig+0x4ac>)
 8006f60:	689b      	ldr	r3, [r3, #8]
 8006f62:	f003 030c 	and.w	r3, r3, #12
 8006f66:	2b08      	cmp	r3, #8
 8006f68:	d060      	beq.n	800702c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	699b      	ldr	r3, [r3, #24]
 8006f6e:	2b02      	cmp	r3, #2
 8006f70:	d145      	bne.n	8006ffe <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f72:	4b33      	ldr	r3, [pc, #204]	@ (8007040 <HAL_RCC_OscConfig+0x4b4>)
 8006f74:	2200      	movs	r2, #0
 8006f76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f78:	f7fb fb36 	bl	80025e8 <HAL_GetTick>
 8006f7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f7e:	e008      	b.n	8006f92 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f80:	f7fb fb32 	bl	80025e8 <HAL_GetTick>
 8006f84:	4602      	mov	r2, r0
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	1ad3      	subs	r3, r2, r3
 8006f8a:	2b02      	cmp	r3, #2
 8006f8c:	d901      	bls.n	8006f92 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006f8e:	2303      	movs	r3, #3
 8006f90:	e093      	b.n	80070ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f92:	4b29      	ldr	r3, [pc, #164]	@ (8007038 <HAL_RCC_OscConfig+0x4ac>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d1f0      	bne.n	8006f80 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	69da      	ldr	r2, [r3, #28]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6a1b      	ldr	r3, [r3, #32]
 8006fa6:	431a      	orrs	r2, r3
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fac:	019b      	lsls	r3, r3, #6
 8006fae:	431a      	orrs	r2, r3
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fb4:	085b      	lsrs	r3, r3, #1
 8006fb6:	3b01      	subs	r3, #1
 8006fb8:	041b      	lsls	r3, r3, #16
 8006fba:	431a      	orrs	r2, r3
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fc0:	061b      	lsls	r3, r3, #24
 8006fc2:	431a      	orrs	r2, r3
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fc8:	071b      	lsls	r3, r3, #28
 8006fca:	491b      	ldr	r1, [pc, #108]	@ (8007038 <HAL_RCC_OscConfig+0x4ac>)
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006fd0:	4b1b      	ldr	r3, [pc, #108]	@ (8007040 <HAL_RCC_OscConfig+0x4b4>)
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fd6:	f7fb fb07 	bl	80025e8 <HAL_GetTick>
 8006fda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006fdc:	e008      	b.n	8006ff0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006fde:	f7fb fb03 	bl	80025e8 <HAL_GetTick>
 8006fe2:	4602      	mov	r2, r0
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	1ad3      	subs	r3, r2, r3
 8006fe8:	2b02      	cmp	r3, #2
 8006fea:	d901      	bls.n	8006ff0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006fec:	2303      	movs	r3, #3
 8006fee:	e064      	b.n	80070ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ff0:	4b11      	ldr	r3, [pc, #68]	@ (8007038 <HAL_RCC_OscConfig+0x4ac>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d0f0      	beq.n	8006fde <HAL_RCC_OscConfig+0x452>
 8006ffc:	e05c      	b.n	80070b8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ffe:	4b10      	ldr	r3, [pc, #64]	@ (8007040 <HAL_RCC_OscConfig+0x4b4>)
 8007000:	2200      	movs	r2, #0
 8007002:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007004:	f7fb faf0 	bl	80025e8 <HAL_GetTick>
 8007008:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800700a:	e008      	b.n	800701e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800700c:	f7fb faec 	bl	80025e8 <HAL_GetTick>
 8007010:	4602      	mov	r2, r0
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	1ad3      	subs	r3, r2, r3
 8007016:	2b02      	cmp	r3, #2
 8007018:	d901      	bls.n	800701e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800701a:	2303      	movs	r3, #3
 800701c:	e04d      	b.n	80070ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800701e:	4b06      	ldr	r3, [pc, #24]	@ (8007038 <HAL_RCC_OscConfig+0x4ac>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007026:	2b00      	cmp	r3, #0
 8007028:	d1f0      	bne.n	800700c <HAL_RCC_OscConfig+0x480>
 800702a:	e045      	b.n	80070b8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	699b      	ldr	r3, [r3, #24]
 8007030:	2b01      	cmp	r3, #1
 8007032:	d107      	bne.n	8007044 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8007034:	2301      	movs	r3, #1
 8007036:	e040      	b.n	80070ba <HAL_RCC_OscConfig+0x52e>
 8007038:	40023800 	.word	0x40023800
 800703c:	40007000 	.word	0x40007000
 8007040:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007044:	4b1f      	ldr	r3, [pc, #124]	@ (80070c4 <HAL_RCC_OscConfig+0x538>)
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	699b      	ldr	r3, [r3, #24]
 800704e:	2b01      	cmp	r3, #1
 8007050:	d030      	beq.n	80070b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800705c:	429a      	cmp	r2, r3
 800705e:	d129      	bne.n	80070b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800706a:	429a      	cmp	r2, r3
 800706c:	d122      	bne.n	80070b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800706e:	68fa      	ldr	r2, [r7, #12]
 8007070:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007074:	4013      	ands	r3, r2
 8007076:	687a      	ldr	r2, [r7, #4]
 8007078:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800707a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800707c:	4293      	cmp	r3, r2
 800707e:	d119      	bne.n	80070b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800708a:	085b      	lsrs	r3, r3, #1
 800708c:	3b01      	subs	r3, #1
 800708e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007090:	429a      	cmp	r2, r3
 8007092:	d10f      	bne.n	80070b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800709e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d107      	bne.n	80070b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070ae:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d001      	beq.n	80070b8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80070b4:	2301      	movs	r3, #1
 80070b6:	e000      	b.n	80070ba <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80070b8:	2300      	movs	r3, #0
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3718      	adds	r7, #24
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}
 80070c2:	bf00      	nop
 80070c4:	40023800 	.word	0x40023800

080070c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b082      	sub	sp, #8
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d101      	bne.n	80070da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80070d6:	2301      	movs	r3, #1
 80070d8:	e041      	b.n	800715e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80070e0:	b2db      	uxtb	r3, r3
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d106      	bne.n	80070f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2200      	movs	r2, #0
 80070ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f7fa ffd2 	bl	8002098 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2202      	movs	r2, #2
 80070f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681a      	ldr	r2, [r3, #0]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	3304      	adds	r3, #4
 8007104:	4619      	mov	r1, r3
 8007106:	4610      	mov	r0, r2
 8007108:	f000 fb40 	bl	800778c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2201      	movs	r2, #1
 8007110:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2201      	movs	r2, #1
 8007118:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2201      	movs	r2, #1
 8007120:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2201      	movs	r2, #1
 8007128:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2201      	movs	r2, #1
 8007130:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2201      	movs	r2, #1
 8007138:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2201      	movs	r2, #1
 8007140:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2201      	movs	r2, #1
 8007148:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2201      	movs	r2, #1
 8007150:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2201      	movs	r2, #1
 8007158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800715c:	2300      	movs	r3, #0
}
 800715e:	4618      	mov	r0, r3
 8007160:	3708      	adds	r7, #8
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}

08007166 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007166:	b580      	push	{r7, lr}
 8007168:	b082      	sub	sp, #8
 800716a:	af00      	add	r7, sp, #0
 800716c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d101      	bne.n	8007178 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007174:	2301      	movs	r3, #1
 8007176:	e041      	b.n	80071fc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800717e:	b2db      	uxtb	r3, r3
 8007180:	2b00      	cmp	r3, #0
 8007182:	d106      	bne.n	8007192 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2200      	movs	r2, #0
 8007188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f7fa ff4d 	bl	800202c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2202      	movs	r2, #2
 8007196:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681a      	ldr	r2, [r3, #0]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	3304      	adds	r3, #4
 80071a2:	4619      	mov	r1, r3
 80071a4:	4610      	mov	r0, r2
 80071a6:	f000 faf1 	bl	800778c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2201      	movs	r2, #1
 80071ae:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2201      	movs	r2, #1
 80071b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2201      	movs	r2, #1
 80071be:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2201      	movs	r2, #1
 80071c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2201      	movs	r2, #1
 80071ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2201      	movs	r2, #1
 80071d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2201      	movs	r2, #1
 80071de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2201      	movs	r2, #1
 80071e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2201      	movs	r2, #1
 80071ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2201      	movs	r2, #1
 80071f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80071fa:	2300      	movs	r3, #0
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3708      	adds	r7, #8
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}

08007204 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b084      	sub	sp, #16
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
 800720c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d109      	bne.n	8007228 <HAL_TIM_PWM_Start+0x24>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800721a:	b2db      	uxtb	r3, r3
 800721c:	2b01      	cmp	r3, #1
 800721e:	bf14      	ite	ne
 8007220:	2301      	movne	r3, #1
 8007222:	2300      	moveq	r3, #0
 8007224:	b2db      	uxtb	r3, r3
 8007226:	e022      	b.n	800726e <HAL_TIM_PWM_Start+0x6a>
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	2b04      	cmp	r3, #4
 800722c:	d109      	bne.n	8007242 <HAL_TIM_PWM_Start+0x3e>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007234:	b2db      	uxtb	r3, r3
 8007236:	2b01      	cmp	r3, #1
 8007238:	bf14      	ite	ne
 800723a:	2301      	movne	r3, #1
 800723c:	2300      	moveq	r3, #0
 800723e:	b2db      	uxtb	r3, r3
 8007240:	e015      	b.n	800726e <HAL_TIM_PWM_Start+0x6a>
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	2b08      	cmp	r3, #8
 8007246:	d109      	bne.n	800725c <HAL_TIM_PWM_Start+0x58>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800724e:	b2db      	uxtb	r3, r3
 8007250:	2b01      	cmp	r3, #1
 8007252:	bf14      	ite	ne
 8007254:	2301      	movne	r3, #1
 8007256:	2300      	moveq	r3, #0
 8007258:	b2db      	uxtb	r3, r3
 800725a:	e008      	b.n	800726e <HAL_TIM_PWM_Start+0x6a>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007262:	b2db      	uxtb	r3, r3
 8007264:	2b01      	cmp	r3, #1
 8007266:	bf14      	ite	ne
 8007268:	2301      	movne	r3, #1
 800726a:	2300      	moveq	r3, #0
 800726c:	b2db      	uxtb	r3, r3
 800726e:	2b00      	cmp	r3, #0
 8007270:	d001      	beq.n	8007276 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007272:	2301      	movs	r3, #1
 8007274:	e07c      	b.n	8007370 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d104      	bne.n	8007286 <HAL_TIM_PWM_Start+0x82>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2202      	movs	r2, #2
 8007280:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007284:	e013      	b.n	80072ae <HAL_TIM_PWM_Start+0xaa>
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	2b04      	cmp	r3, #4
 800728a:	d104      	bne.n	8007296 <HAL_TIM_PWM_Start+0x92>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2202      	movs	r2, #2
 8007290:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007294:	e00b      	b.n	80072ae <HAL_TIM_PWM_Start+0xaa>
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	2b08      	cmp	r3, #8
 800729a:	d104      	bne.n	80072a6 <HAL_TIM_PWM_Start+0xa2>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2202      	movs	r2, #2
 80072a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80072a4:	e003      	b.n	80072ae <HAL_TIM_PWM_Start+0xaa>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2202      	movs	r2, #2
 80072aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	2201      	movs	r2, #1
 80072b4:	6839      	ldr	r1, [r7, #0]
 80072b6:	4618      	mov	r0, r3
 80072b8:	f000 fcb8 	bl	8007c2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a2d      	ldr	r2, [pc, #180]	@ (8007378 <HAL_TIM_PWM_Start+0x174>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d004      	beq.n	80072d0 <HAL_TIM_PWM_Start+0xcc>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a2c      	ldr	r2, [pc, #176]	@ (800737c <HAL_TIM_PWM_Start+0x178>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d101      	bne.n	80072d4 <HAL_TIM_PWM_Start+0xd0>
 80072d0:	2301      	movs	r3, #1
 80072d2:	e000      	b.n	80072d6 <HAL_TIM_PWM_Start+0xd2>
 80072d4:	2300      	movs	r3, #0
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d007      	beq.n	80072ea <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80072e8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a22      	ldr	r2, [pc, #136]	@ (8007378 <HAL_TIM_PWM_Start+0x174>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d022      	beq.n	800733a <HAL_TIM_PWM_Start+0x136>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072fc:	d01d      	beq.n	800733a <HAL_TIM_PWM_Start+0x136>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a1f      	ldr	r2, [pc, #124]	@ (8007380 <HAL_TIM_PWM_Start+0x17c>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d018      	beq.n	800733a <HAL_TIM_PWM_Start+0x136>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a1d      	ldr	r2, [pc, #116]	@ (8007384 <HAL_TIM_PWM_Start+0x180>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d013      	beq.n	800733a <HAL_TIM_PWM_Start+0x136>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a1c      	ldr	r2, [pc, #112]	@ (8007388 <HAL_TIM_PWM_Start+0x184>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d00e      	beq.n	800733a <HAL_TIM_PWM_Start+0x136>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a16      	ldr	r2, [pc, #88]	@ (800737c <HAL_TIM_PWM_Start+0x178>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d009      	beq.n	800733a <HAL_TIM_PWM_Start+0x136>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a18      	ldr	r2, [pc, #96]	@ (800738c <HAL_TIM_PWM_Start+0x188>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d004      	beq.n	800733a <HAL_TIM_PWM_Start+0x136>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a16      	ldr	r2, [pc, #88]	@ (8007390 <HAL_TIM_PWM_Start+0x18c>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d111      	bne.n	800735e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	689b      	ldr	r3, [r3, #8]
 8007340:	f003 0307 	and.w	r3, r3, #7
 8007344:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2b06      	cmp	r3, #6
 800734a:	d010      	beq.n	800736e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	681a      	ldr	r2, [r3, #0]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f042 0201 	orr.w	r2, r2, #1
 800735a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800735c:	e007      	b.n	800736e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	681a      	ldr	r2, [r3, #0]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f042 0201 	orr.w	r2, r2, #1
 800736c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800736e:	2300      	movs	r3, #0
}
 8007370:	4618      	mov	r0, r3
 8007372:	3710      	adds	r7, #16
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}
 8007378:	40010000 	.word	0x40010000
 800737c:	40010400 	.word	0x40010400
 8007380:	40000400 	.word	0x40000400
 8007384:	40000800 	.word	0x40000800
 8007388:	40000c00 	.word	0x40000c00
 800738c:	40014000 	.word	0x40014000
 8007390:	40001800 	.word	0x40001800

08007394 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b082      	sub	sp, #8
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	691b      	ldr	r3, [r3, #16]
 80073a2:	f003 0302 	and.w	r3, r3, #2
 80073a6:	2b02      	cmp	r3, #2
 80073a8:	d122      	bne.n	80073f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	68db      	ldr	r3, [r3, #12]
 80073b0:	f003 0302 	and.w	r3, r3, #2
 80073b4:	2b02      	cmp	r3, #2
 80073b6:	d11b      	bne.n	80073f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f06f 0202 	mvn.w	r2, #2
 80073c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2201      	movs	r2, #1
 80073c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	699b      	ldr	r3, [r3, #24]
 80073ce:	f003 0303 	and.w	r3, r3, #3
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d003      	beq.n	80073de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f000 f9ba 	bl	8007750 <HAL_TIM_IC_CaptureCallback>
 80073dc:	e005      	b.n	80073ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 f9ac 	bl	800773c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f000 f9bd 	bl	8007764 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2200      	movs	r2, #0
 80073ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	691b      	ldr	r3, [r3, #16]
 80073f6:	f003 0304 	and.w	r3, r3, #4
 80073fa:	2b04      	cmp	r3, #4
 80073fc:	d122      	bne.n	8007444 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	68db      	ldr	r3, [r3, #12]
 8007404:	f003 0304 	and.w	r3, r3, #4
 8007408:	2b04      	cmp	r3, #4
 800740a:	d11b      	bne.n	8007444 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f06f 0204 	mvn.w	r2, #4
 8007414:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2202      	movs	r2, #2
 800741a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	699b      	ldr	r3, [r3, #24]
 8007422:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007426:	2b00      	cmp	r3, #0
 8007428:	d003      	beq.n	8007432 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f000 f990 	bl	8007750 <HAL_TIM_IC_CaptureCallback>
 8007430:	e005      	b.n	800743e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f000 f982 	bl	800773c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f000 f993 	bl	8007764 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2200      	movs	r2, #0
 8007442:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	691b      	ldr	r3, [r3, #16]
 800744a:	f003 0308 	and.w	r3, r3, #8
 800744e:	2b08      	cmp	r3, #8
 8007450:	d122      	bne.n	8007498 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	68db      	ldr	r3, [r3, #12]
 8007458:	f003 0308 	and.w	r3, r3, #8
 800745c:	2b08      	cmp	r3, #8
 800745e:	d11b      	bne.n	8007498 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f06f 0208 	mvn.w	r2, #8
 8007468:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2204      	movs	r2, #4
 800746e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	69db      	ldr	r3, [r3, #28]
 8007476:	f003 0303 	and.w	r3, r3, #3
 800747a:	2b00      	cmp	r3, #0
 800747c:	d003      	beq.n	8007486 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f000 f966 	bl	8007750 <HAL_TIM_IC_CaptureCallback>
 8007484:	e005      	b.n	8007492 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 f958 	bl	800773c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f000 f969 	bl	8007764 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2200      	movs	r2, #0
 8007496:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	691b      	ldr	r3, [r3, #16]
 800749e:	f003 0310 	and.w	r3, r3, #16
 80074a2:	2b10      	cmp	r3, #16
 80074a4:	d122      	bne.n	80074ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	68db      	ldr	r3, [r3, #12]
 80074ac:	f003 0310 	and.w	r3, r3, #16
 80074b0:	2b10      	cmp	r3, #16
 80074b2:	d11b      	bne.n	80074ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f06f 0210 	mvn.w	r2, #16
 80074bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2208      	movs	r2, #8
 80074c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	69db      	ldr	r3, [r3, #28]
 80074ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d003      	beq.n	80074da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 f93c 	bl	8007750 <HAL_TIM_IC_CaptureCallback>
 80074d8:	e005      	b.n	80074e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f000 f92e 	bl	800773c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f000 f93f 	bl	8007764 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2200      	movs	r2, #0
 80074ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	691b      	ldr	r3, [r3, #16]
 80074f2:	f003 0301 	and.w	r3, r3, #1
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	d10e      	bne.n	8007518 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	68db      	ldr	r3, [r3, #12]
 8007500:	f003 0301 	and.w	r3, r3, #1
 8007504:	2b01      	cmp	r3, #1
 8007506:	d107      	bne.n	8007518 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f06f 0201 	mvn.w	r2, #1
 8007510:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 f908 	bl	8007728 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	691b      	ldr	r3, [r3, #16]
 800751e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007522:	2b80      	cmp	r3, #128	@ 0x80
 8007524:	d10e      	bne.n	8007544 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	68db      	ldr	r3, [r3, #12]
 800752c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007530:	2b80      	cmp	r3, #128	@ 0x80
 8007532:	d107      	bne.n	8007544 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800753c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f000 fc72 	bl	8007e28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	691b      	ldr	r3, [r3, #16]
 800754a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800754e:	2b40      	cmp	r3, #64	@ 0x40
 8007550:	d10e      	bne.n	8007570 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	68db      	ldr	r3, [r3, #12]
 8007558:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800755c:	2b40      	cmp	r3, #64	@ 0x40
 800755e:	d107      	bne.n	8007570 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007568:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f000 f904 	bl	8007778 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	691b      	ldr	r3, [r3, #16]
 8007576:	f003 0320 	and.w	r3, r3, #32
 800757a:	2b20      	cmp	r3, #32
 800757c:	d10e      	bne.n	800759c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	68db      	ldr	r3, [r3, #12]
 8007584:	f003 0320 	and.w	r3, r3, #32
 8007588:	2b20      	cmp	r3, #32
 800758a:	d107      	bne.n	800759c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f06f 0220 	mvn.w	r2, #32
 8007594:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f000 fc3c 	bl	8007e14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800759c:	bf00      	nop
 800759e:	3708      	adds	r7, #8
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}

080075a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b086      	sub	sp, #24
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	60f8      	str	r0, [r7, #12]
 80075ac:	60b9      	str	r1, [r7, #8]
 80075ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80075b0:	2300      	movs	r3, #0
 80075b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	d101      	bne.n	80075c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80075be:	2302      	movs	r3, #2
 80075c0:	e0ae      	b.n	8007720 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2201      	movs	r2, #1
 80075c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2b0c      	cmp	r3, #12
 80075ce:	f200 809f 	bhi.w	8007710 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80075d2:	a201      	add	r2, pc, #4	@ (adr r2, 80075d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80075d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075d8:	0800760d 	.word	0x0800760d
 80075dc:	08007711 	.word	0x08007711
 80075e0:	08007711 	.word	0x08007711
 80075e4:	08007711 	.word	0x08007711
 80075e8:	0800764d 	.word	0x0800764d
 80075ec:	08007711 	.word	0x08007711
 80075f0:	08007711 	.word	0x08007711
 80075f4:	08007711 	.word	0x08007711
 80075f8:	0800768f 	.word	0x0800768f
 80075fc:	08007711 	.word	0x08007711
 8007600:	08007711 	.word	0x08007711
 8007604:	08007711 	.word	0x08007711
 8007608:	080076cf 	.word	0x080076cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	68b9      	ldr	r1, [r7, #8]
 8007612:	4618      	mov	r0, r3
 8007614:	f000 f95a 	bl	80078cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	699a      	ldr	r2, [r3, #24]
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f042 0208 	orr.w	r2, r2, #8
 8007626:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	699a      	ldr	r2, [r3, #24]
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f022 0204 	bic.w	r2, r2, #4
 8007636:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	6999      	ldr	r1, [r3, #24]
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	691a      	ldr	r2, [r3, #16]
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	430a      	orrs	r2, r1
 8007648:	619a      	str	r2, [r3, #24]
      break;
 800764a:	e064      	b.n	8007716 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	68b9      	ldr	r1, [r7, #8]
 8007652:	4618      	mov	r0, r3
 8007654:	f000 f9aa 	bl	80079ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	699a      	ldr	r2, [r3, #24]
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007666:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	699a      	ldr	r2, [r3, #24]
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007676:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	6999      	ldr	r1, [r3, #24]
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	691b      	ldr	r3, [r3, #16]
 8007682:	021a      	lsls	r2, r3, #8
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	430a      	orrs	r2, r1
 800768a:	619a      	str	r2, [r3, #24]
      break;
 800768c:	e043      	b.n	8007716 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	68b9      	ldr	r1, [r7, #8]
 8007694:	4618      	mov	r0, r3
 8007696:	f000 f9ff 	bl	8007a98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	69da      	ldr	r2, [r3, #28]
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f042 0208 	orr.w	r2, r2, #8
 80076a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	69da      	ldr	r2, [r3, #28]
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f022 0204 	bic.w	r2, r2, #4
 80076b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	69d9      	ldr	r1, [r3, #28]
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	691a      	ldr	r2, [r3, #16]
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	430a      	orrs	r2, r1
 80076ca:	61da      	str	r2, [r3, #28]
      break;
 80076cc:	e023      	b.n	8007716 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	68b9      	ldr	r1, [r7, #8]
 80076d4:	4618      	mov	r0, r3
 80076d6:	f000 fa53 	bl	8007b80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	69da      	ldr	r2, [r3, #28]
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80076e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	69da      	ldr	r2, [r3, #28]
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80076f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	69d9      	ldr	r1, [r3, #28]
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	691b      	ldr	r3, [r3, #16]
 8007704:	021a      	lsls	r2, r3, #8
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	430a      	orrs	r2, r1
 800770c:	61da      	str	r2, [r3, #28]
      break;
 800770e:	e002      	b.n	8007716 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007710:	2301      	movs	r3, #1
 8007712:	75fb      	strb	r3, [r7, #23]
      break;
 8007714:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2200      	movs	r2, #0
 800771a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800771e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007720:	4618      	mov	r0, r3
 8007722:	3718      	adds	r7, #24
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}

08007728 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007728:	b480      	push	{r7}
 800772a:	b083      	sub	sp, #12
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007730:	bf00      	nop
 8007732:	370c      	adds	r7, #12
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr

0800773c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800773c:	b480      	push	{r7}
 800773e:	b083      	sub	sp, #12
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007744:	bf00      	nop
 8007746:	370c      	adds	r7, #12
 8007748:	46bd      	mov	sp, r7
 800774a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774e:	4770      	bx	lr

08007750 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007750:	b480      	push	{r7}
 8007752:	b083      	sub	sp, #12
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007758:	bf00      	nop
 800775a:	370c      	adds	r7, #12
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr

08007764 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007764:	b480      	push	{r7}
 8007766:	b083      	sub	sp, #12
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800776c:	bf00      	nop
 800776e:	370c      	adds	r7, #12
 8007770:	46bd      	mov	sp, r7
 8007772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007776:	4770      	bx	lr

08007778 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007778:	b480      	push	{r7}
 800777a:	b083      	sub	sp, #12
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007780:	bf00      	nop
 8007782:	370c      	adds	r7, #12
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr

0800778c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800778c:	b480      	push	{r7}
 800778e:	b085      	sub	sp, #20
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
 8007794:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	4a40      	ldr	r2, [pc, #256]	@ (80078a0 <TIM_Base_SetConfig+0x114>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d013      	beq.n	80077cc <TIM_Base_SetConfig+0x40>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077aa:	d00f      	beq.n	80077cc <TIM_Base_SetConfig+0x40>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	4a3d      	ldr	r2, [pc, #244]	@ (80078a4 <TIM_Base_SetConfig+0x118>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d00b      	beq.n	80077cc <TIM_Base_SetConfig+0x40>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	4a3c      	ldr	r2, [pc, #240]	@ (80078a8 <TIM_Base_SetConfig+0x11c>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d007      	beq.n	80077cc <TIM_Base_SetConfig+0x40>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	4a3b      	ldr	r2, [pc, #236]	@ (80078ac <TIM_Base_SetConfig+0x120>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d003      	beq.n	80077cc <TIM_Base_SetConfig+0x40>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	4a3a      	ldr	r2, [pc, #232]	@ (80078b0 <TIM_Base_SetConfig+0x124>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d108      	bne.n	80077de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	68fa      	ldr	r2, [r7, #12]
 80077da:	4313      	orrs	r3, r2
 80077dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	4a2f      	ldr	r2, [pc, #188]	@ (80078a0 <TIM_Base_SetConfig+0x114>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d02b      	beq.n	800783e <TIM_Base_SetConfig+0xb2>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077ec:	d027      	beq.n	800783e <TIM_Base_SetConfig+0xb2>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	4a2c      	ldr	r2, [pc, #176]	@ (80078a4 <TIM_Base_SetConfig+0x118>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d023      	beq.n	800783e <TIM_Base_SetConfig+0xb2>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	4a2b      	ldr	r2, [pc, #172]	@ (80078a8 <TIM_Base_SetConfig+0x11c>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d01f      	beq.n	800783e <TIM_Base_SetConfig+0xb2>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	4a2a      	ldr	r2, [pc, #168]	@ (80078ac <TIM_Base_SetConfig+0x120>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d01b      	beq.n	800783e <TIM_Base_SetConfig+0xb2>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	4a29      	ldr	r2, [pc, #164]	@ (80078b0 <TIM_Base_SetConfig+0x124>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d017      	beq.n	800783e <TIM_Base_SetConfig+0xb2>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	4a28      	ldr	r2, [pc, #160]	@ (80078b4 <TIM_Base_SetConfig+0x128>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d013      	beq.n	800783e <TIM_Base_SetConfig+0xb2>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	4a27      	ldr	r2, [pc, #156]	@ (80078b8 <TIM_Base_SetConfig+0x12c>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d00f      	beq.n	800783e <TIM_Base_SetConfig+0xb2>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	4a26      	ldr	r2, [pc, #152]	@ (80078bc <TIM_Base_SetConfig+0x130>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d00b      	beq.n	800783e <TIM_Base_SetConfig+0xb2>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	4a25      	ldr	r2, [pc, #148]	@ (80078c0 <TIM_Base_SetConfig+0x134>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d007      	beq.n	800783e <TIM_Base_SetConfig+0xb2>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	4a24      	ldr	r2, [pc, #144]	@ (80078c4 <TIM_Base_SetConfig+0x138>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d003      	beq.n	800783e <TIM_Base_SetConfig+0xb2>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	4a23      	ldr	r2, [pc, #140]	@ (80078c8 <TIM_Base_SetConfig+0x13c>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d108      	bne.n	8007850 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007844:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	68db      	ldr	r3, [r3, #12]
 800784a:	68fa      	ldr	r2, [r7, #12]
 800784c:	4313      	orrs	r3, r2
 800784e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	695b      	ldr	r3, [r3, #20]
 800785a:	4313      	orrs	r3, r2
 800785c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	68fa      	ldr	r2, [r7, #12]
 8007862:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	689a      	ldr	r2, [r3, #8]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	681a      	ldr	r2, [r3, #0]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	4a0a      	ldr	r2, [pc, #40]	@ (80078a0 <TIM_Base_SetConfig+0x114>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d003      	beq.n	8007884 <TIM_Base_SetConfig+0xf8>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	4a0c      	ldr	r2, [pc, #48]	@ (80078b0 <TIM_Base_SetConfig+0x124>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d103      	bne.n	800788c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	691a      	ldr	r2, [r3, #16]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2201      	movs	r2, #1
 8007890:	615a      	str	r2, [r3, #20]
}
 8007892:	bf00      	nop
 8007894:	3714      	adds	r7, #20
 8007896:	46bd      	mov	sp, r7
 8007898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789c:	4770      	bx	lr
 800789e:	bf00      	nop
 80078a0:	40010000 	.word	0x40010000
 80078a4:	40000400 	.word	0x40000400
 80078a8:	40000800 	.word	0x40000800
 80078ac:	40000c00 	.word	0x40000c00
 80078b0:	40010400 	.word	0x40010400
 80078b4:	40014000 	.word	0x40014000
 80078b8:	40014400 	.word	0x40014400
 80078bc:	40014800 	.word	0x40014800
 80078c0:	40001800 	.word	0x40001800
 80078c4:	40001c00 	.word	0x40001c00
 80078c8:	40002000 	.word	0x40002000

080078cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b087      	sub	sp, #28
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6a1b      	ldr	r3, [r3, #32]
 80078da:	f023 0201 	bic.w	r2, r3, #1
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6a1b      	ldr	r3, [r3, #32]
 80078e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	699b      	ldr	r3, [r3, #24]
 80078f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f023 0303 	bic.w	r3, r3, #3
 8007902:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	68fa      	ldr	r2, [r7, #12]
 800790a:	4313      	orrs	r3, r2
 800790c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	f023 0302 	bic.w	r3, r3, #2
 8007914:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	689b      	ldr	r3, [r3, #8]
 800791a:	697a      	ldr	r2, [r7, #20]
 800791c:	4313      	orrs	r3, r2
 800791e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	4a20      	ldr	r2, [pc, #128]	@ (80079a4 <TIM_OC1_SetConfig+0xd8>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d003      	beq.n	8007930 <TIM_OC1_SetConfig+0x64>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	4a1f      	ldr	r2, [pc, #124]	@ (80079a8 <TIM_OC1_SetConfig+0xdc>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d10c      	bne.n	800794a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	f023 0308 	bic.w	r3, r3, #8
 8007936:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	68db      	ldr	r3, [r3, #12]
 800793c:	697a      	ldr	r2, [r7, #20]
 800793e:	4313      	orrs	r3, r2
 8007940:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	f023 0304 	bic.w	r3, r3, #4
 8007948:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	4a15      	ldr	r2, [pc, #84]	@ (80079a4 <TIM_OC1_SetConfig+0xd8>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d003      	beq.n	800795a <TIM_OC1_SetConfig+0x8e>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	4a14      	ldr	r2, [pc, #80]	@ (80079a8 <TIM_OC1_SetConfig+0xdc>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d111      	bne.n	800797e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007960:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007968:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	695b      	ldr	r3, [r3, #20]
 800796e:	693a      	ldr	r2, [r7, #16]
 8007970:	4313      	orrs	r3, r2
 8007972:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	699b      	ldr	r3, [r3, #24]
 8007978:	693a      	ldr	r2, [r7, #16]
 800797a:	4313      	orrs	r3, r2
 800797c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	693a      	ldr	r2, [r7, #16]
 8007982:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	68fa      	ldr	r2, [r7, #12]
 8007988:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	685a      	ldr	r2, [r3, #4]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	697a      	ldr	r2, [r7, #20]
 8007996:	621a      	str	r2, [r3, #32]
}
 8007998:	bf00      	nop
 800799a:	371c      	adds	r7, #28
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr
 80079a4:	40010000 	.word	0x40010000
 80079a8:	40010400 	.word	0x40010400

080079ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b087      	sub	sp, #28
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6a1b      	ldr	r3, [r3, #32]
 80079ba:	f023 0210 	bic.w	r2, r3, #16
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6a1b      	ldr	r3, [r3, #32]
 80079c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	685b      	ldr	r3, [r3, #4]
 80079cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	699b      	ldr	r3, [r3, #24]
 80079d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80079da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80079e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	021b      	lsls	r3, r3, #8
 80079ea:	68fa      	ldr	r2, [r7, #12]
 80079ec:	4313      	orrs	r3, r2
 80079ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	f023 0320 	bic.w	r3, r3, #32
 80079f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	689b      	ldr	r3, [r3, #8]
 80079fc:	011b      	lsls	r3, r3, #4
 80079fe:	697a      	ldr	r2, [r7, #20]
 8007a00:	4313      	orrs	r3, r2
 8007a02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	4a22      	ldr	r2, [pc, #136]	@ (8007a90 <TIM_OC2_SetConfig+0xe4>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d003      	beq.n	8007a14 <TIM_OC2_SetConfig+0x68>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	4a21      	ldr	r2, [pc, #132]	@ (8007a94 <TIM_OC2_SetConfig+0xe8>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d10d      	bne.n	8007a30 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007a1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	68db      	ldr	r3, [r3, #12]
 8007a20:	011b      	lsls	r3, r3, #4
 8007a22:	697a      	ldr	r2, [r7, #20]
 8007a24:	4313      	orrs	r3, r2
 8007a26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a2e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	4a17      	ldr	r2, [pc, #92]	@ (8007a90 <TIM_OC2_SetConfig+0xe4>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d003      	beq.n	8007a40 <TIM_OC2_SetConfig+0x94>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	4a16      	ldr	r2, [pc, #88]	@ (8007a94 <TIM_OC2_SetConfig+0xe8>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d113      	bne.n	8007a68 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007a46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007a4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	695b      	ldr	r3, [r3, #20]
 8007a54:	009b      	lsls	r3, r3, #2
 8007a56:	693a      	ldr	r2, [r7, #16]
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	699b      	ldr	r3, [r3, #24]
 8007a60:	009b      	lsls	r3, r3, #2
 8007a62:	693a      	ldr	r2, [r7, #16]
 8007a64:	4313      	orrs	r3, r2
 8007a66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	693a      	ldr	r2, [r7, #16]
 8007a6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	68fa      	ldr	r2, [r7, #12]
 8007a72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	685a      	ldr	r2, [r3, #4]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	697a      	ldr	r2, [r7, #20]
 8007a80:	621a      	str	r2, [r3, #32]
}
 8007a82:	bf00      	nop
 8007a84:	371c      	adds	r7, #28
 8007a86:	46bd      	mov	sp, r7
 8007a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8c:	4770      	bx	lr
 8007a8e:	bf00      	nop
 8007a90:	40010000 	.word	0x40010000
 8007a94:	40010400 	.word	0x40010400

08007a98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b087      	sub	sp, #28
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6a1b      	ldr	r3, [r3, #32]
 8007aa6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6a1b      	ldr	r3, [r3, #32]
 8007ab2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	69db      	ldr	r3, [r3, #28]
 8007abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ac6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	f023 0303 	bic.w	r3, r3, #3
 8007ace:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	68fa      	ldr	r2, [r7, #12]
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007ae0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	689b      	ldr	r3, [r3, #8]
 8007ae6:	021b      	lsls	r3, r3, #8
 8007ae8:	697a      	ldr	r2, [r7, #20]
 8007aea:	4313      	orrs	r3, r2
 8007aec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	4a21      	ldr	r2, [pc, #132]	@ (8007b78 <TIM_OC3_SetConfig+0xe0>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d003      	beq.n	8007afe <TIM_OC3_SetConfig+0x66>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	4a20      	ldr	r2, [pc, #128]	@ (8007b7c <TIM_OC3_SetConfig+0xe4>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d10d      	bne.n	8007b1a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007b04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	68db      	ldr	r3, [r3, #12]
 8007b0a:	021b      	lsls	r3, r3, #8
 8007b0c:	697a      	ldr	r2, [r7, #20]
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007b18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	4a16      	ldr	r2, [pc, #88]	@ (8007b78 <TIM_OC3_SetConfig+0xe0>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d003      	beq.n	8007b2a <TIM_OC3_SetConfig+0x92>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	4a15      	ldr	r2, [pc, #84]	@ (8007b7c <TIM_OC3_SetConfig+0xe4>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d113      	bne.n	8007b52 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007b30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007b32:	693b      	ldr	r3, [r7, #16]
 8007b34:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007b38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	695b      	ldr	r3, [r3, #20]
 8007b3e:	011b      	lsls	r3, r3, #4
 8007b40:	693a      	ldr	r2, [r7, #16]
 8007b42:	4313      	orrs	r3, r2
 8007b44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	699b      	ldr	r3, [r3, #24]
 8007b4a:	011b      	lsls	r3, r3, #4
 8007b4c:	693a      	ldr	r2, [r7, #16]
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	693a      	ldr	r2, [r7, #16]
 8007b56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	68fa      	ldr	r2, [r7, #12]
 8007b5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	685a      	ldr	r2, [r3, #4]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	697a      	ldr	r2, [r7, #20]
 8007b6a:	621a      	str	r2, [r3, #32]
}
 8007b6c:	bf00      	nop
 8007b6e:	371c      	adds	r7, #28
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr
 8007b78:	40010000 	.word	0x40010000
 8007b7c:	40010400 	.word	0x40010400

08007b80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b087      	sub	sp, #28
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6a1b      	ldr	r3, [r3, #32]
 8007b8e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6a1b      	ldr	r3, [r3, #32]
 8007b9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	685b      	ldr	r3, [r3, #4]
 8007ba0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	69db      	ldr	r3, [r3, #28]
 8007ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007bae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007bb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	021b      	lsls	r3, r3, #8
 8007bbe:	68fa      	ldr	r2, [r7, #12]
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007bca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	031b      	lsls	r3, r3, #12
 8007bd2:	693a      	ldr	r2, [r7, #16]
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	4a12      	ldr	r2, [pc, #72]	@ (8007c24 <TIM_OC4_SetConfig+0xa4>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d003      	beq.n	8007be8 <TIM_OC4_SetConfig+0x68>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	4a11      	ldr	r2, [pc, #68]	@ (8007c28 <TIM_OC4_SetConfig+0xa8>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d109      	bne.n	8007bfc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007bee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	695b      	ldr	r3, [r3, #20]
 8007bf4:	019b      	lsls	r3, r3, #6
 8007bf6:	697a      	ldr	r2, [r7, #20]
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	697a      	ldr	r2, [r7, #20]
 8007c00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	68fa      	ldr	r2, [r7, #12]
 8007c06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	685a      	ldr	r2, [r3, #4]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	693a      	ldr	r2, [r7, #16]
 8007c14:	621a      	str	r2, [r3, #32]
}
 8007c16:	bf00      	nop
 8007c18:	371c      	adds	r7, #28
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c20:	4770      	bx	lr
 8007c22:	bf00      	nop
 8007c24:	40010000 	.word	0x40010000
 8007c28:	40010400 	.word	0x40010400

08007c2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b087      	sub	sp, #28
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	60f8      	str	r0, [r7, #12]
 8007c34:	60b9      	str	r1, [r7, #8]
 8007c36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	f003 031f 	and.w	r3, r3, #31
 8007c3e:	2201      	movs	r2, #1
 8007c40:	fa02 f303 	lsl.w	r3, r2, r3
 8007c44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	6a1a      	ldr	r2, [r3, #32]
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	43db      	mvns	r3, r3
 8007c4e:	401a      	ands	r2, r3
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	6a1a      	ldr	r2, [r3, #32]
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	f003 031f 	and.w	r3, r3, #31
 8007c5e:	6879      	ldr	r1, [r7, #4]
 8007c60:	fa01 f303 	lsl.w	r3, r1, r3
 8007c64:	431a      	orrs	r2, r3
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	621a      	str	r2, [r3, #32]
}
 8007c6a:	bf00      	nop
 8007c6c:	371c      	adds	r7, #28
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c74:	4770      	bx	lr
	...

08007c78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b085      	sub	sp, #20
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d101      	bne.n	8007c90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c8c:	2302      	movs	r3, #2
 8007c8e:	e05a      	b.n	8007d46 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2201      	movs	r2, #1
 8007c94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2202      	movs	r2, #2
 8007c9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	689b      	ldr	r3, [r3, #8]
 8007cae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007cb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	68fa      	ldr	r2, [r7, #12]
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	68fa      	ldr	r2, [r7, #12]
 8007cc8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	4a21      	ldr	r2, [pc, #132]	@ (8007d54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d022      	beq.n	8007d1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cdc:	d01d      	beq.n	8007d1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4a1d      	ldr	r2, [pc, #116]	@ (8007d58 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d018      	beq.n	8007d1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	4a1b      	ldr	r2, [pc, #108]	@ (8007d5c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d013      	beq.n	8007d1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4a1a      	ldr	r2, [pc, #104]	@ (8007d60 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d00e      	beq.n	8007d1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a18      	ldr	r2, [pc, #96]	@ (8007d64 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d009      	beq.n	8007d1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a17      	ldr	r2, [pc, #92]	@ (8007d68 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d004      	beq.n	8007d1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4a15      	ldr	r2, [pc, #84]	@ (8007d6c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d10c      	bne.n	8007d34 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007d20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	68ba      	ldr	r2, [r7, #8]
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	68ba      	ldr	r2, [r7, #8]
 8007d32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2201      	movs	r2, #1
 8007d38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007d44:	2300      	movs	r3, #0
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3714      	adds	r7, #20
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d50:	4770      	bx	lr
 8007d52:	bf00      	nop
 8007d54:	40010000 	.word	0x40010000
 8007d58:	40000400 	.word	0x40000400
 8007d5c:	40000800 	.word	0x40000800
 8007d60:	40000c00 	.word	0x40000c00
 8007d64:	40010400 	.word	0x40010400
 8007d68:	40014000 	.word	0x40014000
 8007d6c:	40001800 	.word	0x40001800

08007d70 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b085      	sub	sp, #20
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d84:	2b01      	cmp	r3, #1
 8007d86:	d101      	bne.n	8007d8c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007d88:	2302      	movs	r3, #2
 8007d8a:	e03d      	b.n	8007e08 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2201      	movs	r2, #1
 8007d90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	68db      	ldr	r3, [r3, #12]
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	689b      	ldr	r3, [r3, #8]
 8007dac:	4313      	orrs	r3, r2
 8007dae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	4313      	orrs	r3, r2
 8007dbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	691b      	ldr	r3, [r3, #16]
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	695b      	ldr	r3, [r3, #20]
 8007de4:	4313      	orrs	r3, r2
 8007de6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	69db      	ldr	r3, [r3, #28]
 8007df2:	4313      	orrs	r3, r2
 8007df4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	68fa      	ldr	r2, [r7, #12]
 8007dfc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2200      	movs	r2, #0
 8007e02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007e06:	2300      	movs	r3, #0
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3714      	adds	r7, #20
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr

08007e14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b083      	sub	sp, #12
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007e1c:	bf00      	nop
 8007e1e:	370c      	adds	r7, #12
 8007e20:	46bd      	mov	sp, r7
 8007e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e26:	4770      	bx	lr

08007e28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b083      	sub	sp, #12
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007e30:	bf00      	nop
 8007e32:	370c      	adds	r7, #12
 8007e34:	46bd      	mov	sp, r7
 8007e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3a:	4770      	bx	lr

08007e3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b082      	sub	sp, #8
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d101      	bne.n	8007e4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	e03f      	b.n	8007ece <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e54:	b2db      	uxtb	r3, r3
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d106      	bne.n	8007e68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f7fa f9a2 	bl	80021ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2224      	movs	r2, #36	@ 0x24
 8007e6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	68da      	ldr	r2, [r3, #12]
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007e7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f000 fe1d 	bl	8008ac0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	691a      	ldr	r2, [r3, #16]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007e94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	695a      	ldr	r2, [r3, #20]
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007ea4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	68da      	ldr	r2, [r3, #12]
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007eb4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2220      	movs	r2, #32
 8007ec0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2220      	movs	r2, #32
 8007ec8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8007ecc:	2300      	movs	r3, #0
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3708      	adds	r7, #8
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}

08007ed6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ed6:	b580      	push	{r7, lr}
 8007ed8:	b08a      	sub	sp, #40	@ 0x28
 8007eda:	af02      	add	r7, sp, #8
 8007edc:	60f8      	str	r0, [r7, #12]
 8007ede:	60b9      	str	r1, [r7, #8]
 8007ee0:	603b      	str	r3, [r7, #0]
 8007ee2:	4613      	mov	r3, r2
 8007ee4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ef0:	b2db      	uxtb	r3, r3
 8007ef2:	2b20      	cmp	r3, #32
 8007ef4:	d17c      	bne.n	8007ff0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d002      	beq.n	8007f02 <HAL_UART_Transmit+0x2c>
 8007efc:	88fb      	ldrh	r3, [r7, #6]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d101      	bne.n	8007f06 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007f02:	2301      	movs	r3, #1
 8007f04:	e075      	b.n	8007ff2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f0c:	2b01      	cmp	r3, #1
 8007f0e:	d101      	bne.n	8007f14 <HAL_UART_Transmit+0x3e>
 8007f10:	2302      	movs	r3, #2
 8007f12:	e06e      	b.n	8007ff2 <HAL_UART_Transmit+0x11c>
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	2201      	movs	r2, #1
 8007f18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	2221      	movs	r2, #33	@ 0x21
 8007f26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007f2a:	f7fa fb5d 	bl	80025e8 <HAL_GetTick>
 8007f2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	88fa      	ldrh	r2, [r7, #6]
 8007f34:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	88fa      	ldrh	r2, [r7, #6]
 8007f3a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	689b      	ldr	r3, [r3, #8]
 8007f40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f44:	d108      	bne.n	8007f58 <HAL_UART_Transmit+0x82>
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	691b      	ldr	r3, [r3, #16]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d104      	bne.n	8007f58 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	61bb      	str	r3, [r7, #24]
 8007f56:	e003      	b.n	8007f60 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	2200      	movs	r2, #0
 8007f64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8007f68:	e02a      	b.n	8007fc0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	9300      	str	r3, [sp, #0]
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	2200      	movs	r2, #0
 8007f72:	2180      	movs	r1, #128	@ 0x80
 8007f74:	68f8      	ldr	r0, [r7, #12]
 8007f76:	f000 fb9b 	bl	80086b0 <UART_WaitOnFlagUntilTimeout>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d001      	beq.n	8007f84 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007f80:	2303      	movs	r3, #3
 8007f82:	e036      	b.n	8007ff2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007f84:	69fb      	ldr	r3, [r7, #28]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d10b      	bne.n	8007fa2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007f8a:	69bb      	ldr	r3, [r7, #24]
 8007f8c:	881b      	ldrh	r3, [r3, #0]
 8007f8e:	461a      	mov	r2, r3
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f98:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007f9a:	69bb      	ldr	r3, [r7, #24]
 8007f9c:	3302      	adds	r3, #2
 8007f9e:	61bb      	str	r3, [r7, #24]
 8007fa0:	e007      	b.n	8007fb2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007fa2:	69fb      	ldr	r3, [r7, #28]
 8007fa4:	781a      	ldrb	r2, [r3, #0]
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007fac:	69fb      	ldr	r3, [r7, #28]
 8007fae:	3301      	adds	r3, #1
 8007fb0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007fb6:	b29b      	uxth	r3, r3
 8007fb8:	3b01      	subs	r3, #1
 8007fba:	b29a      	uxth	r2, r3
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007fc4:	b29b      	uxth	r3, r3
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d1cf      	bne.n	8007f6a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	9300      	str	r3, [sp, #0]
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	2140      	movs	r1, #64	@ 0x40
 8007fd4:	68f8      	ldr	r0, [r7, #12]
 8007fd6:	f000 fb6b 	bl	80086b0 <UART_WaitOnFlagUntilTimeout>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d001      	beq.n	8007fe4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007fe0:	2303      	movs	r3, #3
 8007fe2:	e006      	b.n	8007ff2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	2220      	movs	r2, #32
 8007fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8007fec:	2300      	movs	r3, #0
 8007fee:	e000      	b.n	8007ff2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007ff0:	2302      	movs	r3, #2
  }
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3720      	adds	r7, #32
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}

08007ffa <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ffa:	b580      	push	{r7, lr}
 8007ffc:	b08a      	sub	sp, #40	@ 0x28
 8007ffe:	af02      	add	r7, sp, #8
 8008000:	60f8      	str	r0, [r7, #12]
 8008002:	60b9      	str	r1, [r7, #8]
 8008004:	603b      	str	r3, [r7, #0]
 8008006:	4613      	mov	r3, r2
 8008008:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800800a:	2300      	movs	r3, #0
 800800c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008014:	b2db      	uxtb	r3, r3
 8008016:	2b20      	cmp	r3, #32
 8008018:	f040 808c 	bne.w	8008134 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d002      	beq.n	8008028 <HAL_UART_Receive+0x2e>
 8008022:	88fb      	ldrh	r3, [r7, #6]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d101      	bne.n	800802c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8008028:	2301      	movs	r3, #1
 800802a:	e084      	b.n	8008136 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008032:	2b01      	cmp	r3, #1
 8008034:	d101      	bne.n	800803a <HAL_UART_Receive+0x40>
 8008036:	2302      	movs	r3, #2
 8008038:	e07d      	b.n	8008136 <HAL_UART_Receive+0x13c>
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	2201      	movs	r2, #1
 800803e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2200      	movs	r2, #0
 8008046:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	2222      	movs	r2, #34	@ 0x22
 800804c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	2200      	movs	r2, #0
 8008054:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008056:	f7fa fac7 	bl	80025e8 <HAL_GetTick>
 800805a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	88fa      	ldrh	r2, [r7, #6]
 8008060:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	88fa      	ldrh	r2, [r7, #6]
 8008066:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	689b      	ldr	r3, [r3, #8]
 800806c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008070:	d108      	bne.n	8008084 <HAL_UART_Receive+0x8a>
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	691b      	ldr	r3, [r3, #16]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d104      	bne.n	8008084 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800807a:	2300      	movs	r3, #0
 800807c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	61bb      	str	r3, [r7, #24]
 8008082:	e003      	b.n	800808c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008088:	2300      	movs	r3, #0
 800808a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2200      	movs	r2, #0
 8008090:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8008094:	e043      	b.n	800811e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	9300      	str	r3, [sp, #0]
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	2200      	movs	r2, #0
 800809e:	2120      	movs	r1, #32
 80080a0:	68f8      	ldr	r0, [r7, #12]
 80080a2:	f000 fb05 	bl	80086b0 <UART_WaitOnFlagUntilTimeout>
 80080a6:	4603      	mov	r3, r0
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d001      	beq.n	80080b0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80080ac:	2303      	movs	r3, #3
 80080ae:	e042      	b.n	8008136 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80080b0:	69fb      	ldr	r3, [r7, #28]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d10c      	bne.n	80080d0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	b29b      	uxth	r3, r3
 80080be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080c2:	b29a      	uxth	r2, r3
 80080c4:	69bb      	ldr	r3, [r7, #24]
 80080c6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80080c8:	69bb      	ldr	r3, [r7, #24]
 80080ca:	3302      	adds	r3, #2
 80080cc:	61bb      	str	r3, [r7, #24]
 80080ce:	e01f      	b.n	8008110 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	689b      	ldr	r3, [r3, #8]
 80080d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080d8:	d007      	beq.n	80080ea <HAL_UART_Receive+0xf0>
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	689b      	ldr	r3, [r3, #8]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d10a      	bne.n	80080f8 <HAL_UART_Receive+0xfe>
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	691b      	ldr	r3, [r3, #16]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d106      	bne.n	80080f8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	b2da      	uxtb	r2, r3
 80080f2:	69fb      	ldr	r3, [r7, #28]
 80080f4:	701a      	strb	r2, [r3, #0]
 80080f6:	e008      	b.n	800810a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	b2db      	uxtb	r3, r3
 8008100:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008104:	b2da      	uxtb	r2, r3
 8008106:	69fb      	ldr	r3, [r7, #28]
 8008108:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800810a:	69fb      	ldr	r3, [r7, #28]
 800810c:	3301      	adds	r3, #1
 800810e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008114:	b29b      	uxth	r3, r3
 8008116:	3b01      	subs	r3, #1
 8008118:	b29a      	uxth	r2, r3
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008122:	b29b      	uxth	r3, r3
 8008124:	2b00      	cmp	r3, #0
 8008126:	d1b6      	bne.n	8008096 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	2220      	movs	r2, #32
 800812c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    return HAL_OK;
 8008130:	2300      	movs	r3, #0
 8008132:	e000      	b.n	8008136 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8008134:	2302      	movs	r3, #2
  }
}
 8008136:	4618      	mov	r0, r3
 8008138:	3720      	adds	r7, #32
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}
	...

08008140 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b0ba      	sub	sp, #232	@ 0xe8
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	68db      	ldr	r3, [r3, #12]
 8008158:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	695b      	ldr	r3, [r3, #20]
 8008162:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008166:	2300      	movs	r3, #0
 8008168:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800816c:	2300      	movs	r3, #0
 800816e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008172:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008176:	f003 030f 	and.w	r3, r3, #15
 800817a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800817e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008182:	2b00      	cmp	r3, #0
 8008184:	d10f      	bne.n	80081a6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008186:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800818a:	f003 0320 	and.w	r3, r3, #32
 800818e:	2b00      	cmp	r3, #0
 8008190:	d009      	beq.n	80081a6 <HAL_UART_IRQHandler+0x66>
 8008192:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008196:	f003 0320 	and.w	r3, r3, #32
 800819a:	2b00      	cmp	r3, #0
 800819c:	d003      	beq.n	80081a6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f000 fbd3 	bl	800894a <UART_Receive_IT>
      return;
 80081a4:	e256      	b.n	8008654 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80081a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	f000 80de 	beq.w	800836c <HAL_UART_IRQHandler+0x22c>
 80081b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80081b4:	f003 0301 	and.w	r3, r3, #1
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d106      	bne.n	80081ca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80081bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80081c0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	f000 80d1 	beq.w	800836c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80081ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081ce:	f003 0301 	and.w	r3, r3, #1
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d00b      	beq.n	80081ee <HAL_UART_IRQHandler+0xae>
 80081d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80081da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d005      	beq.n	80081ee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081e6:	f043 0201 	orr.w	r2, r3, #1
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80081ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081f2:	f003 0304 	and.w	r3, r3, #4
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d00b      	beq.n	8008212 <HAL_UART_IRQHandler+0xd2>
 80081fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80081fe:	f003 0301 	and.w	r3, r3, #1
 8008202:	2b00      	cmp	r3, #0
 8008204:	d005      	beq.n	8008212 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800820a:	f043 0202 	orr.w	r2, r3, #2
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008212:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008216:	f003 0302 	and.w	r3, r3, #2
 800821a:	2b00      	cmp	r3, #0
 800821c:	d00b      	beq.n	8008236 <HAL_UART_IRQHandler+0xf6>
 800821e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008222:	f003 0301 	and.w	r3, r3, #1
 8008226:	2b00      	cmp	r3, #0
 8008228:	d005      	beq.n	8008236 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800822e:	f043 0204 	orr.w	r2, r3, #4
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008236:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800823a:	f003 0308 	and.w	r3, r3, #8
 800823e:	2b00      	cmp	r3, #0
 8008240:	d011      	beq.n	8008266 <HAL_UART_IRQHandler+0x126>
 8008242:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008246:	f003 0320 	and.w	r3, r3, #32
 800824a:	2b00      	cmp	r3, #0
 800824c:	d105      	bne.n	800825a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800824e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008252:	f003 0301 	and.w	r3, r3, #1
 8008256:	2b00      	cmp	r3, #0
 8008258:	d005      	beq.n	8008266 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800825e:	f043 0208 	orr.w	r2, r3, #8
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800826a:	2b00      	cmp	r3, #0
 800826c:	f000 81ed 	beq.w	800864a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008270:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008274:	f003 0320 	and.w	r3, r3, #32
 8008278:	2b00      	cmp	r3, #0
 800827a:	d008      	beq.n	800828e <HAL_UART_IRQHandler+0x14e>
 800827c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008280:	f003 0320 	and.w	r3, r3, #32
 8008284:	2b00      	cmp	r3, #0
 8008286:	d002      	beq.n	800828e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f000 fb5e 	bl	800894a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	695b      	ldr	r3, [r3, #20]
 8008294:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008298:	2b40      	cmp	r3, #64	@ 0x40
 800829a:	bf0c      	ite	eq
 800829c:	2301      	moveq	r3, #1
 800829e:	2300      	movne	r3, #0
 80082a0:	b2db      	uxtb	r3, r3
 80082a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082aa:	f003 0308 	and.w	r3, r3, #8
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d103      	bne.n	80082ba <HAL_UART_IRQHandler+0x17a>
 80082b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d04f      	beq.n	800835a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f000 fa66 	bl	800878c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	695b      	ldr	r3, [r3, #20]
 80082c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082ca:	2b40      	cmp	r3, #64	@ 0x40
 80082cc:	d141      	bne.n	8008352 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	3314      	adds	r3, #20
 80082d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80082dc:	e853 3f00 	ldrex	r3, [r3]
 80082e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80082e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80082e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80082ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	3314      	adds	r3, #20
 80082f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80082fa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80082fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008302:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008306:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800830a:	e841 2300 	strex	r3, r2, [r1]
 800830e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008312:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008316:	2b00      	cmp	r3, #0
 8008318:	d1d9      	bne.n	80082ce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800831e:	2b00      	cmp	r3, #0
 8008320:	d013      	beq.n	800834a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008326:	4a7d      	ldr	r2, [pc, #500]	@ (800851c <HAL_UART_IRQHandler+0x3dc>)
 8008328:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800832e:	4618      	mov	r0, r3
 8008330:	f7fa feda 	bl	80030e8 <HAL_DMA_Abort_IT>
 8008334:	4603      	mov	r3, r0
 8008336:	2b00      	cmp	r3, #0
 8008338:	d016      	beq.n	8008368 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800833e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008340:	687a      	ldr	r2, [r7, #4]
 8008342:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008344:	4610      	mov	r0, r2
 8008346:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008348:	e00e      	b.n	8008368 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f000 f99a 	bl	8008684 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008350:	e00a      	b.n	8008368 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f000 f996 	bl	8008684 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008358:	e006      	b.n	8008368 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f000 f992 	bl	8008684 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2200      	movs	r2, #0
 8008364:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8008366:	e170      	b.n	800864a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008368:	bf00      	nop
    return;
 800836a:	e16e      	b.n	800864a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008370:	2b01      	cmp	r3, #1
 8008372:	f040 814a 	bne.w	800860a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800837a:	f003 0310 	and.w	r3, r3, #16
 800837e:	2b00      	cmp	r3, #0
 8008380:	f000 8143 	beq.w	800860a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008384:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008388:	f003 0310 	and.w	r3, r3, #16
 800838c:	2b00      	cmp	r3, #0
 800838e:	f000 813c 	beq.w	800860a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008392:	2300      	movs	r3, #0
 8008394:	60bb      	str	r3, [r7, #8]
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	60bb      	str	r3, [r7, #8]
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	685b      	ldr	r3, [r3, #4]
 80083a4:	60bb      	str	r3, [r7, #8]
 80083a6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	695b      	ldr	r3, [r3, #20]
 80083ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083b2:	2b40      	cmp	r3, #64	@ 0x40
 80083b4:	f040 80b4 	bne.w	8008520 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	685b      	ldr	r3, [r3, #4]
 80083c0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80083c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	f000 8140 	beq.w	800864e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80083d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80083d6:	429a      	cmp	r2, r3
 80083d8:	f080 8139 	bcs.w	800864e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80083e2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083e8:	69db      	ldr	r3, [r3, #28]
 80083ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80083ee:	f000 8088 	beq.w	8008502 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	330c      	adds	r3, #12
 80083f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008400:	e853 3f00 	ldrex	r3, [r3]
 8008404:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008408:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800840c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008410:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	330c      	adds	r3, #12
 800841a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800841e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008422:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008426:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800842a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800842e:	e841 2300 	strex	r3, r2, [r1]
 8008432:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008436:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800843a:	2b00      	cmp	r3, #0
 800843c:	d1d9      	bne.n	80083f2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	3314      	adds	r3, #20
 8008444:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008446:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008448:	e853 3f00 	ldrex	r3, [r3]
 800844c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800844e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008450:	f023 0301 	bic.w	r3, r3, #1
 8008454:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	3314      	adds	r3, #20
 800845e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008462:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008466:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008468:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800846a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800846e:	e841 2300 	strex	r3, r2, [r1]
 8008472:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008474:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008476:	2b00      	cmp	r3, #0
 8008478:	d1e1      	bne.n	800843e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	3314      	adds	r3, #20
 8008480:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008482:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008484:	e853 3f00 	ldrex	r3, [r3]
 8008488:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800848a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800848c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008490:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	3314      	adds	r3, #20
 800849a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800849e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80084a0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084a2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80084a4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80084a6:	e841 2300 	strex	r3, r2, [r1]
 80084aa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80084ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d1e3      	bne.n	800847a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2220      	movs	r2, #32
 80084b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2200      	movs	r2, #0
 80084be:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	330c      	adds	r3, #12
 80084c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80084ca:	e853 3f00 	ldrex	r3, [r3]
 80084ce:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80084d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80084d2:	f023 0310 	bic.w	r3, r3, #16
 80084d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	330c      	adds	r3, #12
 80084e0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80084e4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80084e6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084e8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80084ea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80084ec:	e841 2300 	strex	r3, r2, [r1]
 80084f0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80084f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d1e3      	bne.n	80084c0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084fc:	4618      	mov	r0, r3
 80084fe:	f7fa fd83 	bl	8003008 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800850a:	b29b      	uxth	r3, r3
 800850c:	1ad3      	subs	r3, r2, r3
 800850e:	b29b      	uxth	r3, r3
 8008510:	4619      	mov	r1, r3
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f000 f8c0 	bl	8008698 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008518:	e099      	b.n	800864e <HAL_UART_IRQHandler+0x50e>
 800851a:	bf00      	nop
 800851c:	08008853 	.word	0x08008853
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008528:	b29b      	uxth	r3, r3
 800852a:	1ad3      	subs	r3, r2, r3
 800852c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008534:	b29b      	uxth	r3, r3
 8008536:	2b00      	cmp	r3, #0
 8008538:	f000 808b 	beq.w	8008652 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800853c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008540:	2b00      	cmp	r3, #0
 8008542:	f000 8086 	beq.w	8008652 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	330c      	adds	r3, #12
 800854c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800854e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008550:	e853 3f00 	ldrex	r3, [r3]
 8008554:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008556:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008558:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800855c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	330c      	adds	r3, #12
 8008566:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800856a:	647a      	str	r2, [r7, #68]	@ 0x44
 800856c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800856e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008570:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008572:	e841 2300 	strex	r3, r2, [r1]
 8008576:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008578:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800857a:	2b00      	cmp	r3, #0
 800857c:	d1e3      	bne.n	8008546 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	3314      	adds	r3, #20
 8008584:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008588:	e853 3f00 	ldrex	r3, [r3]
 800858c:	623b      	str	r3, [r7, #32]
   return(result);
 800858e:	6a3b      	ldr	r3, [r7, #32]
 8008590:	f023 0301 	bic.w	r3, r3, #1
 8008594:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	3314      	adds	r3, #20
 800859e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80085a2:	633a      	str	r2, [r7, #48]	@ 0x30
 80085a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80085a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80085aa:	e841 2300 	strex	r3, r2, [r1]
 80085ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80085b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d1e3      	bne.n	800857e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2220      	movs	r2, #32
 80085ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2200      	movs	r2, #0
 80085c2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	330c      	adds	r3, #12
 80085ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085cc:	693b      	ldr	r3, [r7, #16]
 80085ce:	e853 3f00 	ldrex	r3, [r3]
 80085d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	f023 0310 	bic.w	r3, r3, #16
 80085da:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	330c      	adds	r3, #12
 80085e4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80085e8:	61fa      	str	r2, [r7, #28]
 80085ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ec:	69b9      	ldr	r1, [r7, #24]
 80085ee:	69fa      	ldr	r2, [r7, #28]
 80085f0:	e841 2300 	strex	r3, r2, [r1]
 80085f4:	617b      	str	r3, [r7, #20]
   return(result);
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d1e3      	bne.n	80085c4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80085fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008600:	4619      	mov	r1, r3
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f000 f848 	bl	8008698 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008608:	e023      	b.n	8008652 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800860a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800860e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008612:	2b00      	cmp	r3, #0
 8008614:	d009      	beq.n	800862a <HAL_UART_IRQHandler+0x4ea>
 8008616:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800861a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800861e:	2b00      	cmp	r3, #0
 8008620:	d003      	beq.n	800862a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f000 f929 	bl	800887a <UART_Transmit_IT>
    return;
 8008628:	e014      	b.n	8008654 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800862a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800862e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008632:	2b00      	cmp	r3, #0
 8008634:	d00e      	beq.n	8008654 <HAL_UART_IRQHandler+0x514>
 8008636:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800863a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800863e:	2b00      	cmp	r3, #0
 8008640:	d008      	beq.n	8008654 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f000 f969 	bl	800891a <UART_EndTransmit_IT>
    return;
 8008648:	e004      	b.n	8008654 <HAL_UART_IRQHandler+0x514>
    return;
 800864a:	bf00      	nop
 800864c:	e002      	b.n	8008654 <HAL_UART_IRQHandler+0x514>
      return;
 800864e:	bf00      	nop
 8008650:	e000      	b.n	8008654 <HAL_UART_IRQHandler+0x514>
      return;
 8008652:	bf00      	nop
  }
}
 8008654:	37e8      	adds	r7, #232	@ 0xe8
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}
 800865a:	bf00      	nop

0800865c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800865c:	b480      	push	{r7}
 800865e:	b083      	sub	sp, #12
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008664:	bf00      	nop
 8008666:	370c      	adds	r7, #12
 8008668:	46bd      	mov	sp, r7
 800866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866e:	4770      	bx	lr

08008670 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008670:	b480      	push	{r7}
 8008672:	b083      	sub	sp, #12
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008678:	bf00      	nop
 800867a:	370c      	adds	r7, #12
 800867c:	46bd      	mov	sp, r7
 800867e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008682:	4770      	bx	lr

08008684 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008684:	b480      	push	{r7}
 8008686:	b083      	sub	sp, #12
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800868c:	bf00      	nop
 800868e:	370c      	adds	r7, #12
 8008690:	46bd      	mov	sp, r7
 8008692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008696:	4770      	bx	lr

08008698 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008698:	b480      	push	{r7}
 800869a:	b083      	sub	sp, #12
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
 80086a0:	460b      	mov	r3, r1
 80086a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80086a4:	bf00      	nop
 80086a6:	370c      	adds	r7, #12
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr

080086b0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b090      	sub	sp, #64	@ 0x40
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	60f8      	str	r0, [r7, #12]
 80086b8:	60b9      	str	r1, [r7, #8]
 80086ba:	603b      	str	r3, [r7, #0]
 80086bc:	4613      	mov	r3, r2
 80086be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086c0:	e050      	b.n	8008764 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80086c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80086c8:	d04c      	beq.n	8008764 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80086ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d007      	beq.n	80086e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80086d0:	f7f9 ff8a 	bl	80025e8 <HAL_GetTick>
 80086d4:	4602      	mov	r2, r0
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	1ad3      	subs	r3, r2, r3
 80086da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80086dc:	429a      	cmp	r2, r3
 80086de:	d241      	bcs.n	8008764 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	330c      	adds	r3, #12
 80086e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086ea:	e853 3f00 	ldrex	r3, [r3]
 80086ee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80086f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086f2:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80086f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	330c      	adds	r3, #12
 80086fe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008700:	637a      	str	r2, [r7, #52]	@ 0x34
 8008702:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008704:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008706:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008708:	e841 2300 	strex	r3, r2, [r1]
 800870c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800870e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008710:	2b00      	cmp	r3, #0
 8008712:	d1e5      	bne.n	80086e0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	3314      	adds	r3, #20
 800871a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	e853 3f00 	ldrex	r3, [r3]
 8008722:	613b      	str	r3, [r7, #16]
   return(result);
 8008724:	693b      	ldr	r3, [r7, #16]
 8008726:	f023 0301 	bic.w	r3, r3, #1
 800872a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	3314      	adds	r3, #20
 8008732:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008734:	623a      	str	r2, [r7, #32]
 8008736:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008738:	69f9      	ldr	r1, [r7, #28]
 800873a:	6a3a      	ldr	r2, [r7, #32]
 800873c:	e841 2300 	strex	r3, r2, [r1]
 8008740:	61bb      	str	r3, [r7, #24]
   return(result);
 8008742:	69bb      	ldr	r3, [r7, #24]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d1e5      	bne.n	8008714 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	2220      	movs	r2, #32
 800874c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	2220      	movs	r2, #32
 8008754:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	2200      	movs	r2, #0
 800875c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8008760:	2303      	movs	r3, #3
 8008762:	e00f      	b.n	8008784 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	681a      	ldr	r2, [r3, #0]
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	4013      	ands	r3, r2
 800876e:	68ba      	ldr	r2, [r7, #8]
 8008770:	429a      	cmp	r2, r3
 8008772:	bf0c      	ite	eq
 8008774:	2301      	moveq	r3, #1
 8008776:	2300      	movne	r3, #0
 8008778:	b2db      	uxtb	r3, r3
 800877a:	461a      	mov	r2, r3
 800877c:	79fb      	ldrb	r3, [r7, #7]
 800877e:	429a      	cmp	r2, r3
 8008780:	d09f      	beq.n	80086c2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008782:	2300      	movs	r3, #0
}
 8008784:	4618      	mov	r0, r3
 8008786:	3740      	adds	r7, #64	@ 0x40
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}

0800878c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800878c:	b480      	push	{r7}
 800878e:	b095      	sub	sp, #84	@ 0x54
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	330c      	adds	r3, #12
 800879a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800879c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800879e:	e853 3f00 	ldrex	r3, [r3]
 80087a2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80087a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80087aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	330c      	adds	r3, #12
 80087b2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80087b4:	643a      	str	r2, [r7, #64]	@ 0x40
 80087b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087b8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80087ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80087bc:	e841 2300 	strex	r3, r2, [r1]
 80087c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80087c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d1e5      	bne.n	8008794 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	3314      	adds	r3, #20
 80087ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087d0:	6a3b      	ldr	r3, [r7, #32]
 80087d2:	e853 3f00 	ldrex	r3, [r3]
 80087d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80087d8:	69fb      	ldr	r3, [r7, #28]
 80087da:	f023 0301 	bic.w	r3, r3, #1
 80087de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	3314      	adds	r3, #20
 80087e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80087e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80087ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80087ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80087f0:	e841 2300 	strex	r3, r2, [r1]
 80087f4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80087f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d1e5      	bne.n	80087c8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008800:	2b01      	cmp	r3, #1
 8008802:	d119      	bne.n	8008838 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	330c      	adds	r3, #12
 800880a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	e853 3f00 	ldrex	r3, [r3]
 8008812:	60bb      	str	r3, [r7, #8]
   return(result);
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	f023 0310 	bic.w	r3, r3, #16
 800881a:	647b      	str	r3, [r7, #68]	@ 0x44
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	330c      	adds	r3, #12
 8008822:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008824:	61ba      	str	r2, [r7, #24]
 8008826:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008828:	6979      	ldr	r1, [r7, #20]
 800882a:	69ba      	ldr	r2, [r7, #24]
 800882c:	e841 2300 	strex	r3, r2, [r1]
 8008830:	613b      	str	r3, [r7, #16]
   return(result);
 8008832:	693b      	ldr	r3, [r7, #16]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d1e5      	bne.n	8008804 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2220      	movs	r2, #32
 800883c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2200      	movs	r2, #0
 8008844:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008846:	bf00      	nop
 8008848:	3754      	adds	r7, #84	@ 0x54
 800884a:	46bd      	mov	sp, r7
 800884c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008850:	4770      	bx	lr

08008852 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008852:	b580      	push	{r7, lr}
 8008854:	b084      	sub	sp, #16
 8008856:	af00      	add	r7, sp, #0
 8008858:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800885e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	2200      	movs	r2, #0
 8008864:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	2200      	movs	r2, #0
 800886a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800886c:	68f8      	ldr	r0, [r7, #12]
 800886e:	f7ff ff09 	bl	8008684 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008872:	bf00      	nop
 8008874:	3710      	adds	r7, #16
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}

0800887a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800887a:	b480      	push	{r7}
 800887c:	b085      	sub	sp, #20
 800887e:	af00      	add	r7, sp, #0
 8008880:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008888:	b2db      	uxtb	r3, r3
 800888a:	2b21      	cmp	r3, #33	@ 0x21
 800888c:	d13e      	bne.n	800890c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	689b      	ldr	r3, [r3, #8]
 8008892:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008896:	d114      	bne.n	80088c2 <UART_Transmit_IT+0x48>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	691b      	ldr	r3, [r3, #16]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d110      	bne.n	80088c2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	6a1b      	ldr	r3, [r3, #32]
 80088a4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	881b      	ldrh	r3, [r3, #0]
 80088aa:	461a      	mov	r2, r3
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80088b4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6a1b      	ldr	r3, [r3, #32]
 80088ba:	1c9a      	adds	r2, r3, #2
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	621a      	str	r2, [r3, #32]
 80088c0:	e008      	b.n	80088d4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6a1b      	ldr	r3, [r3, #32]
 80088c6:	1c59      	adds	r1, r3, #1
 80088c8:	687a      	ldr	r2, [r7, #4]
 80088ca:	6211      	str	r1, [r2, #32]
 80088cc:	781a      	ldrb	r2, [r3, #0]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80088d8:	b29b      	uxth	r3, r3
 80088da:	3b01      	subs	r3, #1
 80088dc:	b29b      	uxth	r3, r3
 80088de:	687a      	ldr	r2, [r7, #4]
 80088e0:	4619      	mov	r1, r3
 80088e2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d10f      	bne.n	8008908 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	68da      	ldr	r2, [r3, #12]
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80088f6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	68da      	ldr	r2, [r3, #12]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008906:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008908:	2300      	movs	r3, #0
 800890a:	e000      	b.n	800890e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800890c:	2302      	movs	r3, #2
  }
}
 800890e:	4618      	mov	r0, r3
 8008910:	3714      	adds	r7, #20
 8008912:	46bd      	mov	sp, r7
 8008914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008918:	4770      	bx	lr

0800891a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800891a:	b580      	push	{r7, lr}
 800891c:	b082      	sub	sp, #8
 800891e:	af00      	add	r7, sp, #0
 8008920:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	68da      	ldr	r2, [r3, #12]
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008930:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2220      	movs	r2, #32
 8008936:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f7ff fe8e 	bl	800865c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008940:	2300      	movs	r3, #0
}
 8008942:	4618      	mov	r0, r3
 8008944:	3708      	adds	r7, #8
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}

0800894a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800894a:	b580      	push	{r7, lr}
 800894c:	b08c      	sub	sp, #48	@ 0x30
 800894e:	af00      	add	r7, sp, #0
 8008950:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008958:	b2db      	uxtb	r3, r3
 800895a:	2b22      	cmp	r3, #34	@ 0x22
 800895c:	f040 80ab 	bne.w	8008ab6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	689b      	ldr	r3, [r3, #8]
 8008964:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008968:	d117      	bne.n	800899a <UART_Receive_IT+0x50>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	691b      	ldr	r3, [r3, #16]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d113      	bne.n	800899a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008972:	2300      	movs	r3, #0
 8008974:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800897a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	685b      	ldr	r3, [r3, #4]
 8008982:	b29b      	uxth	r3, r3
 8008984:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008988:	b29a      	uxth	r2, r3
 800898a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800898c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008992:	1c9a      	adds	r2, r3, #2
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	629a      	str	r2, [r3, #40]	@ 0x28
 8008998:	e026      	b.n	80089e8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800899e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80089a0:	2300      	movs	r3, #0
 80089a2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	689b      	ldr	r3, [r3, #8]
 80089a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80089ac:	d007      	beq.n	80089be <UART_Receive_IT+0x74>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	689b      	ldr	r3, [r3, #8]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d10a      	bne.n	80089cc <UART_Receive_IT+0x82>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	691b      	ldr	r3, [r3, #16]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d106      	bne.n	80089cc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	b2da      	uxtb	r2, r3
 80089c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089c8:	701a      	strb	r2, [r3, #0]
 80089ca:	e008      	b.n	80089de <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	685b      	ldr	r3, [r3, #4]
 80089d2:	b2db      	uxtb	r3, r3
 80089d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80089d8:	b2da      	uxtb	r2, r3
 80089da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089dc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089e2:	1c5a      	adds	r2, r3, #1
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80089ec:	b29b      	uxth	r3, r3
 80089ee:	3b01      	subs	r3, #1
 80089f0:	b29b      	uxth	r3, r3
 80089f2:	687a      	ldr	r2, [r7, #4]
 80089f4:	4619      	mov	r1, r3
 80089f6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d15a      	bne.n	8008ab2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	68da      	ldr	r2, [r3, #12]
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f022 0220 	bic.w	r2, r2, #32
 8008a0a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	68da      	ldr	r2, [r3, #12]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008a1a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	695a      	ldr	r2, [r3, #20]
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f022 0201 	bic.w	r2, r2, #1
 8008a2a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2220      	movs	r2, #32
 8008a30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a38:	2b01      	cmp	r3, #1
 8008a3a:	d135      	bne.n	8008aa8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	330c      	adds	r3, #12
 8008a48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	e853 3f00 	ldrex	r3, [r3]
 8008a50:	613b      	str	r3, [r7, #16]
   return(result);
 8008a52:	693b      	ldr	r3, [r7, #16]
 8008a54:	f023 0310 	bic.w	r3, r3, #16
 8008a58:	627b      	str	r3, [r7, #36]	@ 0x24
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	330c      	adds	r3, #12
 8008a60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a62:	623a      	str	r2, [r7, #32]
 8008a64:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a66:	69f9      	ldr	r1, [r7, #28]
 8008a68:	6a3a      	ldr	r2, [r7, #32]
 8008a6a:	e841 2300 	strex	r3, r2, [r1]
 8008a6e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008a70:	69bb      	ldr	r3, [r7, #24]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d1e5      	bne.n	8008a42 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f003 0310 	and.w	r3, r3, #16
 8008a80:	2b10      	cmp	r3, #16
 8008a82:	d10a      	bne.n	8008a9a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008a84:	2300      	movs	r3, #0
 8008a86:	60fb      	str	r3, [r7, #12]
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	60fb      	str	r3, [r7, #12]
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	685b      	ldr	r3, [r3, #4]
 8008a96:	60fb      	str	r3, [r7, #12]
 8008a98:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008a9e:	4619      	mov	r1, r3
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f7ff fdf9 	bl	8008698 <HAL_UARTEx_RxEventCallback>
 8008aa6:	e002      	b.n	8008aae <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f7ff fde1 	bl	8008670 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	e002      	b.n	8008ab8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	e000      	b.n	8008ab8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008ab6:	2302      	movs	r3, #2
  }
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	3730      	adds	r7, #48	@ 0x30
 8008abc:	46bd      	mov	sp, r7
 8008abe:	bd80      	pop	{r7, pc}

08008ac0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ac0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ac4:	b0c0      	sub	sp, #256	@ 0x100
 8008ac6:	af00      	add	r7, sp, #0
 8008ac8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	691b      	ldr	r3, [r3, #16]
 8008ad4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008adc:	68d9      	ldr	r1, [r3, #12]
 8008ade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ae2:	681a      	ldr	r2, [r3, #0]
 8008ae4:	ea40 0301 	orr.w	r3, r0, r1
 8008ae8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008aee:	689a      	ldr	r2, [r3, #8]
 8008af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008af4:	691b      	ldr	r3, [r3, #16]
 8008af6:	431a      	orrs	r2, r3
 8008af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008afc:	695b      	ldr	r3, [r3, #20]
 8008afe:	431a      	orrs	r2, r3
 8008b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b04:	69db      	ldr	r3, [r3, #28]
 8008b06:	4313      	orrs	r3, r2
 8008b08:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	68db      	ldr	r3, [r3, #12]
 8008b14:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008b18:	f021 010c 	bic.w	r1, r1, #12
 8008b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b20:	681a      	ldr	r2, [r3, #0]
 8008b22:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008b26:	430b      	orrs	r3, r1
 8008b28:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008b2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	695b      	ldr	r3, [r3, #20]
 8008b32:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008b36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b3a:	6999      	ldr	r1, [r3, #24]
 8008b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b40:	681a      	ldr	r2, [r3, #0]
 8008b42:	ea40 0301 	orr.w	r3, r0, r1
 8008b46:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b4c:	681a      	ldr	r2, [r3, #0]
 8008b4e:	4b8f      	ldr	r3, [pc, #572]	@ (8008d8c <UART_SetConfig+0x2cc>)
 8008b50:	429a      	cmp	r2, r3
 8008b52:	d005      	beq.n	8008b60 <UART_SetConfig+0xa0>
 8008b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b58:	681a      	ldr	r2, [r3, #0]
 8008b5a:	4b8d      	ldr	r3, [pc, #564]	@ (8008d90 <UART_SetConfig+0x2d0>)
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	d104      	bne.n	8008b6a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008b60:	f7fd faa6 	bl	80060b0 <HAL_RCC_GetPCLK2Freq>
 8008b64:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008b68:	e003      	b.n	8008b72 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008b6a:	f7fd fa8d 	bl	8006088 <HAL_RCC_GetPCLK1Freq>
 8008b6e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b76:	69db      	ldr	r3, [r3, #28]
 8008b78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008b7c:	f040 810c 	bne.w	8008d98 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008b80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008b84:	2200      	movs	r2, #0
 8008b86:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008b8a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008b8e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008b92:	4622      	mov	r2, r4
 8008b94:	462b      	mov	r3, r5
 8008b96:	1891      	adds	r1, r2, r2
 8008b98:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008b9a:	415b      	adcs	r3, r3
 8008b9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008b9e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008ba2:	4621      	mov	r1, r4
 8008ba4:	eb12 0801 	adds.w	r8, r2, r1
 8008ba8:	4629      	mov	r1, r5
 8008baa:	eb43 0901 	adc.w	r9, r3, r1
 8008bae:	f04f 0200 	mov.w	r2, #0
 8008bb2:	f04f 0300 	mov.w	r3, #0
 8008bb6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008bba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008bbe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008bc2:	4690      	mov	r8, r2
 8008bc4:	4699      	mov	r9, r3
 8008bc6:	4623      	mov	r3, r4
 8008bc8:	eb18 0303 	adds.w	r3, r8, r3
 8008bcc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008bd0:	462b      	mov	r3, r5
 8008bd2:	eb49 0303 	adc.w	r3, r9, r3
 8008bd6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bde:	685b      	ldr	r3, [r3, #4]
 8008be0:	2200      	movs	r2, #0
 8008be2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008be6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008bea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008bee:	460b      	mov	r3, r1
 8008bf0:	18db      	adds	r3, r3, r3
 8008bf2:	653b      	str	r3, [r7, #80]	@ 0x50
 8008bf4:	4613      	mov	r3, r2
 8008bf6:	eb42 0303 	adc.w	r3, r2, r3
 8008bfa:	657b      	str	r3, [r7, #84]	@ 0x54
 8008bfc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008c00:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008c04:	f7f7 fff0 	bl	8000be8 <__aeabi_uldivmod>
 8008c08:	4602      	mov	r2, r0
 8008c0a:	460b      	mov	r3, r1
 8008c0c:	4b61      	ldr	r3, [pc, #388]	@ (8008d94 <UART_SetConfig+0x2d4>)
 8008c0e:	fba3 2302 	umull	r2, r3, r3, r2
 8008c12:	095b      	lsrs	r3, r3, #5
 8008c14:	011c      	lsls	r4, r3, #4
 8008c16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008c20:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008c24:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008c28:	4642      	mov	r2, r8
 8008c2a:	464b      	mov	r3, r9
 8008c2c:	1891      	adds	r1, r2, r2
 8008c2e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008c30:	415b      	adcs	r3, r3
 8008c32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008c34:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008c38:	4641      	mov	r1, r8
 8008c3a:	eb12 0a01 	adds.w	sl, r2, r1
 8008c3e:	4649      	mov	r1, r9
 8008c40:	eb43 0b01 	adc.w	fp, r3, r1
 8008c44:	f04f 0200 	mov.w	r2, #0
 8008c48:	f04f 0300 	mov.w	r3, #0
 8008c4c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008c50:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008c54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008c58:	4692      	mov	sl, r2
 8008c5a:	469b      	mov	fp, r3
 8008c5c:	4643      	mov	r3, r8
 8008c5e:	eb1a 0303 	adds.w	r3, sl, r3
 8008c62:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008c66:	464b      	mov	r3, r9
 8008c68:	eb4b 0303 	adc.w	r3, fp, r3
 8008c6c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c74:	685b      	ldr	r3, [r3, #4]
 8008c76:	2200      	movs	r2, #0
 8008c78:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008c7c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008c80:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008c84:	460b      	mov	r3, r1
 8008c86:	18db      	adds	r3, r3, r3
 8008c88:	643b      	str	r3, [r7, #64]	@ 0x40
 8008c8a:	4613      	mov	r3, r2
 8008c8c:	eb42 0303 	adc.w	r3, r2, r3
 8008c90:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c92:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008c96:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008c9a:	f7f7 ffa5 	bl	8000be8 <__aeabi_uldivmod>
 8008c9e:	4602      	mov	r2, r0
 8008ca0:	460b      	mov	r3, r1
 8008ca2:	4611      	mov	r1, r2
 8008ca4:	4b3b      	ldr	r3, [pc, #236]	@ (8008d94 <UART_SetConfig+0x2d4>)
 8008ca6:	fba3 2301 	umull	r2, r3, r3, r1
 8008caa:	095b      	lsrs	r3, r3, #5
 8008cac:	2264      	movs	r2, #100	@ 0x64
 8008cae:	fb02 f303 	mul.w	r3, r2, r3
 8008cb2:	1acb      	subs	r3, r1, r3
 8008cb4:	00db      	lsls	r3, r3, #3
 8008cb6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008cba:	4b36      	ldr	r3, [pc, #216]	@ (8008d94 <UART_SetConfig+0x2d4>)
 8008cbc:	fba3 2302 	umull	r2, r3, r3, r2
 8008cc0:	095b      	lsrs	r3, r3, #5
 8008cc2:	005b      	lsls	r3, r3, #1
 8008cc4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008cc8:	441c      	add	r4, r3
 8008cca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008cce:	2200      	movs	r2, #0
 8008cd0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008cd4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008cd8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008cdc:	4642      	mov	r2, r8
 8008cde:	464b      	mov	r3, r9
 8008ce0:	1891      	adds	r1, r2, r2
 8008ce2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008ce4:	415b      	adcs	r3, r3
 8008ce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ce8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008cec:	4641      	mov	r1, r8
 8008cee:	1851      	adds	r1, r2, r1
 8008cf0:	6339      	str	r1, [r7, #48]	@ 0x30
 8008cf2:	4649      	mov	r1, r9
 8008cf4:	414b      	adcs	r3, r1
 8008cf6:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cf8:	f04f 0200 	mov.w	r2, #0
 8008cfc:	f04f 0300 	mov.w	r3, #0
 8008d00:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008d04:	4659      	mov	r1, fp
 8008d06:	00cb      	lsls	r3, r1, #3
 8008d08:	4651      	mov	r1, sl
 8008d0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008d0e:	4651      	mov	r1, sl
 8008d10:	00ca      	lsls	r2, r1, #3
 8008d12:	4610      	mov	r0, r2
 8008d14:	4619      	mov	r1, r3
 8008d16:	4603      	mov	r3, r0
 8008d18:	4642      	mov	r2, r8
 8008d1a:	189b      	adds	r3, r3, r2
 8008d1c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008d20:	464b      	mov	r3, r9
 8008d22:	460a      	mov	r2, r1
 8008d24:	eb42 0303 	adc.w	r3, r2, r3
 8008d28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d30:	685b      	ldr	r3, [r3, #4]
 8008d32:	2200      	movs	r2, #0
 8008d34:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008d38:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008d3c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008d40:	460b      	mov	r3, r1
 8008d42:	18db      	adds	r3, r3, r3
 8008d44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008d46:	4613      	mov	r3, r2
 8008d48:	eb42 0303 	adc.w	r3, r2, r3
 8008d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008d4e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008d52:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008d56:	f7f7 ff47 	bl	8000be8 <__aeabi_uldivmod>
 8008d5a:	4602      	mov	r2, r0
 8008d5c:	460b      	mov	r3, r1
 8008d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8008d94 <UART_SetConfig+0x2d4>)
 8008d60:	fba3 1302 	umull	r1, r3, r3, r2
 8008d64:	095b      	lsrs	r3, r3, #5
 8008d66:	2164      	movs	r1, #100	@ 0x64
 8008d68:	fb01 f303 	mul.w	r3, r1, r3
 8008d6c:	1ad3      	subs	r3, r2, r3
 8008d6e:	00db      	lsls	r3, r3, #3
 8008d70:	3332      	adds	r3, #50	@ 0x32
 8008d72:	4a08      	ldr	r2, [pc, #32]	@ (8008d94 <UART_SetConfig+0x2d4>)
 8008d74:	fba2 2303 	umull	r2, r3, r2, r3
 8008d78:	095b      	lsrs	r3, r3, #5
 8008d7a:	f003 0207 	and.w	r2, r3, #7
 8008d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	4422      	add	r2, r4
 8008d86:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008d88:	e106      	b.n	8008f98 <UART_SetConfig+0x4d8>
 8008d8a:	bf00      	nop
 8008d8c:	40011000 	.word	0x40011000
 8008d90:	40011400 	.word	0x40011400
 8008d94:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008d98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008da2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008da6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008daa:	4642      	mov	r2, r8
 8008dac:	464b      	mov	r3, r9
 8008dae:	1891      	adds	r1, r2, r2
 8008db0:	6239      	str	r1, [r7, #32]
 8008db2:	415b      	adcs	r3, r3
 8008db4:	627b      	str	r3, [r7, #36]	@ 0x24
 8008db6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008dba:	4641      	mov	r1, r8
 8008dbc:	1854      	adds	r4, r2, r1
 8008dbe:	4649      	mov	r1, r9
 8008dc0:	eb43 0501 	adc.w	r5, r3, r1
 8008dc4:	f04f 0200 	mov.w	r2, #0
 8008dc8:	f04f 0300 	mov.w	r3, #0
 8008dcc:	00eb      	lsls	r3, r5, #3
 8008dce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008dd2:	00e2      	lsls	r2, r4, #3
 8008dd4:	4614      	mov	r4, r2
 8008dd6:	461d      	mov	r5, r3
 8008dd8:	4643      	mov	r3, r8
 8008dda:	18e3      	adds	r3, r4, r3
 8008ddc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008de0:	464b      	mov	r3, r9
 8008de2:	eb45 0303 	adc.w	r3, r5, r3
 8008de6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008dee:	685b      	ldr	r3, [r3, #4]
 8008df0:	2200      	movs	r2, #0
 8008df2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008df6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008dfa:	f04f 0200 	mov.w	r2, #0
 8008dfe:	f04f 0300 	mov.w	r3, #0
 8008e02:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008e06:	4629      	mov	r1, r5
 8008e08:	008b      	lsls	r3, r1, #2
 8008e0a:	4621      	mov	r1, r4
 8008e0c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008e10:	4621      	mov	r1, r4
 8008e12:	008a      	lsls	r2, r1, #2
 8008e14:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008e18:	f7f7 fee6 	bl	8000be8 <__aeabi_uldivmod>
 8008e1c:	4602      	mov	r2, r0
 8008e1e:	460b      	mov	r3, r1
 8008e20:	4b60      	ldr	r3, [pc, #384]	@ (8008fa4 <UART_SetConfig+0x4e4>)
 8008e22:	fba3 2302 	umull	r2, r3, r3, r2
 8008e26:	095b      	lsrs	r3, r3, #5
 8008e28:	011c      	lsls	r4, r3, #4
 8008e2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008e2e:	2200      	movs	r2, #0
 8008e30:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008e34:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008e38:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008e3c:	4642      	mov	r2, r8
 8008e3e:	464b      	mov	r3, r9
 8008e40:	1891      	adds	r1, r2, r2
 8008e42:	61b9      	str	r1, [r7, #24]
 8008e44:	415b      	adcs	r3, r3
 8008e46:	61fb      	str	r3, [r7, #28]
 8008e48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008e4c:	4641      	mov	r1, r8
 8008e4e:	1851      	adds	r1, r2, r1
 8008e50:	6139      	str	r1, [r7, #16]
 8008e52:	4649      	mov	r1, r9
 8008e54:	414b      	adcs	r3, r1
 8008e56:	617b      	str	r3, [r7, #20]
 8008e58:	f04f 0200 	mov.w	r2, #0
 8008e5c:	f04f 0300 	mov.w	r3, #0
 8008e60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008e64:	4659      	mov	r1, fp
 8008e66:	00cb      	lsls	r3, r1, #3
 8008e68:	4651      	mov	r1, sl
 8008e6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008e6e:	4651      	mov	r1, sl
 8008e70:	00ca      	lsls	r2, r1, #3
 8008e72:	4610      	mov	r0, r2
 8008e74:	4619      	mov	r1, r3
 8008e76:	4603      	mov	r3, r0
 8008e78:	4642      	mov	r2, r8
 8008e7a:	189b      	adds	r3, r3, r2
 8008e7c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008e80:	464b      	mov	r3, r9
 8008e82:	460a      	mov	r2, r1
 8008e84:	eb42 0303 	adc.w	r3, r2, r3
 8008e88:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e90:	685b      	ldr	r3, [r3, #4]
 8008e92:	2200      	movs	r2, #0
 8008e94:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008e96:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008e98:	f04f 0200 	mov.w	r2, #0
 8008e9c:	f04f 0300 	mov.w	r3, #0
 8008ea0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008ea4:	4649      	mov	r1, r9
 8008ea6:	008b      	lsls	r3, r1, #2
 8008ea8:	4641      	mov	r1, r8
 8008eaa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008eae:	4641      	mov	r1, r8
 8008eb0:	008a      	lsls	r2, r1, #2
 8008eb2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008eb6:	f7f7 fe97 	bl	8000be8 <__aeabi_uldivmod>
 8008eba:	4602      	mov	r2, r0
 8008ebc:	460b      	mov	r3, r1
 8008ebe:	4611      	mov	r1, r2
 8008ec0:	4b38      	ldr	r3, [pc, #224]	@ (8008fa4 <UART_SetConfig+0x4e4>)
 8008ec2:	fba3 2301 	umull	r2, r3, r3, r1
 8008ec6:	095b      	lsrs	r3, r3, #5
 8008ec8:	2264      	movs	r2, #100	@ 0x64
 8008eca:	fb02 f303 	mul.w	r3, r2, r3
 8008ece:	1acb      	subs	r3, r1, r3
 8008ed0:	011b      	lsls	r3, r3, #4
 8008ed2:	3332      	adds	r3, #50	@ 0x32
 8008ed4:	4a33      	ldr	r2, [pc, #204]	@ (8008fa4 <UART_SetConfig+0x4e4>)
 8008ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8008eda:	095b      	lsrs	r3, r3, #5
 8008edc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008ee0:	441c      	add	r4, r3
 8008ee2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	673b      	str	r3, [r7, #112]	@ 0x70
 8008eea:	677a      	str	r2, [r7, #116]	@ 0x74
 8008eec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008ef0:	4642      	mov	r2, r8
 8008ef2:	464b      	mov	r3, r9
 8008ef4:	1891      	adds	r1, r2, r2
 8008ef6:	60b9      	str	r1, [r7, #8]
 8008ef8:	415b      	adcs	r3, r3
 8008efa:	60fb      	str	r3, [r7, #12]
 8008efc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008f00:	4641      	mov	r1, r8
 8008f02:	1851      	adds	r1, r2, r1
 8008f04:	6039      	str	r1, [r7, #0]
 8008f06:	4649      	mov	r1, r9
 8008f08:	414b      	adcs	r3, r1
 8008f0a:	607b      	str	r3, [r7, #4]
 8008f0c:	f04f 0200 	mov.w	r2, #0
 8008f10:	f04f 0300 	mov.w	r3, #0
 8008f14:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008f18:	4659      	mov	r1, fp
 8008f1a:	00cb      	lsls	r3, r1, #3
 8008f1c:	4651      	mov	r1, sl
 8008f1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008f22:	4651      	mov	r1, sl
 8008f24:	00ca      	lsls	r2, r1, #3
 8008f26:	4610      	mov	r0, r2
 8008f28:	4619      	mov	r1, r3
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	4642      	mov	r2, r8
 8008f2e:	189b      	adds	r3, r3, r2
 8008f30:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008f32:	464b      	mov	r3, r9
 8008f34:	460a      	mov	r2, r1
 8008f36:	eb42 0303 	adc.w	r3, r2, r3
 8008f3a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f40:	685b      	ldr	r3, [r3, #4]
 8008f42:	2200      	movs	r2, #0
 8008f44:	663b      	str	r3, [r7, #96]	@ 0x60
 8008f46:	667a      	str	r2, [r7, #100]	@ 0x64
 8008f48:	f04f 0200 	mov.w	r2, #0
 8008f4c:	f04f 0300 	mov.w	r3, #0
 8008f50:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008f54:	4649      	mov	r1, r9
 8008f56:	008b      	lsls	r3, r1, #2
 8008f58:	4641      	mov	r1, r8
 8008f5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f5e:	4641      	mov	r1, r8
 8008f60:	008a      	lsls	r2, r1, #2
 8008f62:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008f66:	f7f7 fe3f 	bl	8000be8 <__aeabi_uldivmod>
 8008f6a:	4602      	mov	r2, r0
 8008f6c:	460b      	mov	r3, r1
 8008f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8008fa4 <UART_SetConfig+0x4e4>)
 8008f70:	fba3 1302 	umull	r1, r3, r3, r2
 8008f74:	095b      	lsrs	r3, r3, #5
 8008f76:	2164      	movs	r1, #100	@ 0x64
 8008f78:	fb01 f303 	mul.w	r3, r1, r3
 8008f7c:	1ad3      	subs	r3, r2, r3
 8008f7e:	011b      	lsls	r3, r3, #4
 8008f80:	3332      	adds	r3, #50	@ 0x32
 8008f82:	4a08      	ldr	r2, [pc, #32]	@ (8008fa4 <UART_SetConfig+0x4e4>)
 8008f84:	fba2 2303 	umull	r2, r3, r2, r3
 8008f88:	095b      	lsrs	r3, r3, #5
 8008f8a:	f003 020f 	and.w	r2, r3, #15
 8008f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	4422      	add	r2, r4
 8008f96:	609a      	str	r2, [r3, #8]
}
 8008f98:	bf00      	nop
 8008f9a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008fa4:	51eb851f 	.word	0x51eb851f

08008fa8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008fa8:	b084      	sub	sp, #16
 8008faa:	b580      	push	{r7, lr}
 8008fac:	b084      	sub	sp, #16
 8008fae:	af00      	add	r7, sp, #0
 8008fb0:	6078      	str	r0, [r7, #4]
 8008fb2:	f107 001c 	add.w	r0, r7, #28
 8008fb6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fbc:	2b01      	cmp	r3, #1
 8008fbe:	d122      	bne.n	8009006 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fc4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	68db      	ldr	r3, [r3, #12]
 8008fd0:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8008fd4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008fd8:	687a      	ldr	r2, [r7, #4]
 8008fda:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	68db      	ldr	r3, [r3, #12]
 8008fe0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008fe8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008fea:	2b01      	cmp	r3, #1
 8008fec:	d105      	bne.n	8008ffa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	68db      	ldr	r3, [r3, #12]
 8008ff2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f000 fa9c 	bl	8009538 <USB_CoreReset>
 8009000:	4603      	mov	r3, r0
 8009002:	73fb      	strb	r3, [r7, #15]
 8009004:	e01a      	b.n	800903c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	68db      	ldr	r3, [r3, #12]
 800900a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f000 fa90 	bl	8009538 <USB_CoreReset>
 8009018:	4603      	mov	r3, r0
 800901a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800901c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800901e:	2b00      	cmp	r3, #0
 8009020:	d106      	bne.n	8009030 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009026:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	639a      	str	r2, [r3, #56]	@ 0x38
 800902e:	e005      	b.n	800903c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009034:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800903c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800903e:	2b01      	cmp	r3, #1
 8009040:	d10b      	bne.n	800905a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	689b      	ldr	r3, [r3, #8]
 8009046:	f043 0206 	orr.w	r2, r3, #6
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	689b      	ldr	r3, [r3, #8]
 8009052:	f043 0220 	orr.w	r2, r3, #32
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800905a:	7bfb      	ldrb	r3, [r7, #15]
}
 800905c:	4618      	mov	r0, r3
 800905e:	3710      	adds	r7, #16
 8009060:	46bd      	mov	sp, r7
 8009062:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009066:	b004      	add	sp, #16
 8009068:	4770      	bx	lr

0800906a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800906a:	b480      	push	{r7}
 800906c:	b083      	sub	sp, #12
 800906e:	af00      	add	r7, sp, #0
 8009070:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	689b      	ldr	r3, [r3, #8]
 8009076:	f023 0201 	bic.w	r2, r3, #1
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800907e:	2300      	movs	r3, #0
}
 8009080:	4618      	mov	r0, r3
 8009082:	370c      	adds	r7, #12
 8009084:	46bd      	mov	sp, r7
 8009086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908a:	4770      	bx	lr

0800908c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b084      	sub	sp, #16
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
 8009094:	460b      	mov	r3, r1
 8009096:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009098:	2300      	movs	r3, #0
 800909a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	68db      	ldr	r3, [r3, #12]
 80090a0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80090a8:	78fb      	ldrb	r3, [r7, #3]
 80090aa:	2b01      	cmp	r3, #1
 80090ac:	d115      	bne.n	80090da <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	68db      	ldr	r3, [r3, #12]
 80090b2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80090ba:	2001      	movs	r0, #1
 80090bc:	f7f9 faa0 	bl	8002600 <HAL_Delay>
      ms++;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	3301      	adds	r3, #1
 80090c4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f000 fa28 	bl	800951c <USB_GetMode>
 80090cc:	4603      	mov	r3, r0
 80090ce:	2b01      	cmp	r3, #1
 80090d0:	d01e      	beq.n	8009110 <USB_SetCurrentMode+0x84>
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	2b31      	cmp	r3, #49	@ 0x31
 80090d6:	d9f0      	bls.n	80090ba <USB_SetCurrentMode+0x2e>
 80090d8:	e01a      	b.n	8009110 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80090da:	78fb      	ldrb	r3, [r7, #3]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d115      	bne.n	800910c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	68db      	ldr	r3, [r3, #12]
 80090e4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80090ec:	2001      	movs	r0, #1
 80090ee:	f7f9 fa87 	bl	8002600 <HAL_Delay>
      ms++;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	3301      	adds	r3, #1
 80090f6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f000 fa0f 	bl	800951c <USB_GetMode>
 80090fe:	4603      	mov	r3, r0
 8009100:	2b00      	cmp	r3, #0
 8009102:	d005      	beq.n	8009110 <USB_SetCurrentMode+0x84>
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	2b31      	cmp	r3, #49	@ 0x31
 8009108:	d9f0      	bls.n	80090ec <USB_SetCurrentMode+0x60>
 800910a:	e001      	b.n	8009110 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800910c:	2301      	movs	r3, #1
 800910e:	e005      	b.n	800911c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	2b32      	cmp	r3, #50	@ 0x32
 8009114:	d101      	bne.n	800911a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009116:	2301      	movs	r3, #1
 8009118:	e000      	b.n	800911c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800911a:	2300      	movs	r3, #0
}
 800911c:	4618      	mov	r0, r3
 800911e:	3710      	adds	r7, #16
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}

08009124 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009124:	b084      	sub	sp, #16
 8009126:	b580      	push	{r7, lr}
 8009128:	b086      	sub	sp, #24
 800912a:	af00      	add	r7, sp, #0
 800912c:	6078      	str	r0, [r7, #4]
 800912e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009132:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009136:	2300      	movs	r3, #0
 8009138:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800913e:	2300      	movs	r3, #0
 8009140:	613b      	str	r3, [r7, #16]
 8009142:	e009      	b.n	8009158 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009144:	687a      	ldr	r2, [r7, #4]
 8009146:	693b      	ldr	r3, [r7, #16]
 8009148:	3340      	adds	r3, #64	@ 0x40
 800914a:	009b      	lsls	r3, r3, #2
 800914c:	4413      	add	r3, r2
 800914e:	2200      	movs	r2, #0
 8009150:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009152:	693b      	ldr	r3, [r7, #16]
 8009154:	3301      	adds	r3, #1
 8009156:	613b      	str	r3, [r7, #16]
 8009158:	693b      	ldr	r3, [r7, #16]
 800915a:	2b0e      	cmp	r3, #14
 800915c:	d9f2      	bls.n	8009144 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800915e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009160:	2b00      	cmp	r3, #0
 8009162:	d11c      	bne.n	800919e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800916a:	685b      	ldr	r3, [r3, #4]
 800916c:	68fa      	ldr	r2, [r7, #12]
 800916e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009172:	f043 0302 	orr.w	r3, r3, #2
 8009176:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800917c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	601a      	str	r2, [r3, #0]
 800919c:	e005      	b.n	80091aa <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091a2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80091b0:	461a      	mov	r2, r3
 80091b2:	2300      	movs	r3, #0
 80091b4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091bc:	4619      	mov	r1, r3
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091c4:	461a      	mov	r2, r3
 80091c6:	680b      	ldr	r3, [r1, #0]
 80091c8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80091ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091cc:	2b01      	cmp	r3, #1
 80091ce:	d10c      	bne.n	80091ea <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80091d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d104      	bne.n	80091e0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80091d6:	2100      	movs	r1, #0
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f000 f965 	bl	80094a8 <USB_SetDevSpeed>
 80091de:	e008      	b.n	80091f2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80091e0:	2101      	movs	r1, #1
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f000 f960 	bl	80094a8 <USB_SetDevSpeed>
 80091e8:	e003      	b.n	80091f2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80091ea:	2103      	movs	r1, #3
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f000 f95b 	bl	80094a8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80091f2:	2110      	movs	r1, #16
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f000 f8f3 	bl	80093e0 <USB_FlushTxFifo>
 80091fa:	4603      	mov	r3, r0
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d001      	beq.n	8009204 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8009200:	2301      	movs	r3, #1
 8009202:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f000 f91f 	bl	8009448 <USB_FlushRxFifo>
 800920a:	4603      	mov	r3, r0
 800920c:	2b00      	cmp	r3, #0
 800920e:	d001      	beq.n	8009214 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8009210:	2301      	movs	r3, #1
 8009212:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800921a:	461a      	mov	r2, r3
 800921c:	2300      	movs	r3, #0
 800921e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009226:	461a      	mov	r2, r3
 8009228:	2300      	movs	r3, #0
 800922a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009232:	461a      	mov	r2, r3
 8009234:	2300      	movs	r3, #0
 8009236:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009238:	2300      	movs	r3, #0
 800923a:	613b      	str	r3, [r7, #16]
 800923c:	e043      	b.n	80092c6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800923e:	693b      	ldr	r3, [r7, #16]
 8009240:	015a      	lsls	r2, r3, #5
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	4413      	add	r3, r2
 8009246:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009250:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009254:	d118      	bne.n	8009288 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8009256:	693b      	ldr	r3, [r7, #16]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d10a      	bne.n	8009272 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800925c:	693b      	ldr	r3, [r7, #16]
 800925e:	015a      	lsls	r2, r3, #5
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	4413      	add	r3, r2
 8009264:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009268:	461a      	mov	r2, r3
 800926a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800926e:	6013      	str	r3, [r2, #0]
 8009270:	e013      	b.n	800929a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	015a      	lsls	r2, r3, #5
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	4413      	add	r3, r2
 800927a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800927e:	461a      	mov	r2, r3
 8009280:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009284:	6013      	str	r3, [r2, #0]
 8009286:	e008      	b.n	800929a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	015a      	lsls	r2, r3, #5
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	4413      	add	r3, r2
 8009290:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009294:	461a      	mov	r2, r3
 8009296:	2300      	movs	r3, #0
 8009298:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800929a:	693b      	ldr	r3, [r7, #16]
 800929c:	015a      	lsls	r2, r3, #5
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	4413      	add	r3, r2
 80092a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092a6:	461a      	mov	r2, r3
 80092a8:	2300      	movs	r3, #0
 80092aa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80092ac:	693b      	ldr	r3, [r7, #16]
 80092ae:	015a      	lsls	r2, r3, #5
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	4413      	add	r3, r2
 80092b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092b8:	461a      	mov	r2, r3
 80092ba:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80092be:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80092c0:	693b      	ldr	r3, [r7, #16]
 80092c2:	3301      	adds	r3, #1
 80092c4:	613b      	str	r3, [r7, #16]
 80092c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092c8:	693a      	ldr	r2, [r7, #16]
 80092ca:	429a      	cmp	r2, r3
 80092cc:	d3b7      	bcc.n	800923e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80092ce:	2300      	movs	r3, #0
 80092d0:	613b      	str	r3, [r7, #16]
 80092d2:	e043      	b.n	800935c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80092d4:	693b      	ldr	r3, [r7, #16]
 80092d6:	015a      	lsls	r2, r3, #5
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	4413      	add	r3, r2
 80092dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80092e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80092ea:	d118      	bne.n	800931e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80092ec:	693b      	ldr	r3, [r7, #16]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d10a      	bne.n	8009308 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80092f2:	693b      	ldr	r3, [r7, #16]
 80092f4:	015a      	lsls	r2, r3, #5
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	4413      	add	r3, r2
 80092fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092fe:	461a      	mov	r2, r3
 8009300:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009304:	6013      	str	r3, [r2, #0]
 8009306:	e013      	b.n	8009330 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	015a      	lsls	r2, r3, #5
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	4413      	add	r3, r2
 8009310:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009314:	461a      	mov	r2, r3
 8009316:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800931a:	6013      	str	r3, [r2, #0]
 800931c:	e008      	b.n	8009330 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	015a      	lsls	r2, r3, #5
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	4413      	add	r3, r2
 8009326:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800932a:	461a      	mov	r2, r3
 800932c:	2300      	movs	r3, #0
 800932e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009330:	693b      	ldr	r3, [r7, #16]
 8009332:	015a      	lsls	r2, r3, #5
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	4413      	add	r3, r2
 8009338:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800933c:	461a      	mov	r2, r3
 800933e:	2300      	movs	r3, #0
 8009340:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009342:	693b      	ldr	r3, [r7, #16]
 8009344:	015a      	lsls	r2, r3, #5
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	4413      	add	r3, r2
 800934a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800934e:	461a      	mov	r2, r3
 8009350:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009354:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009356:	693b      	ldr	r3, [r7, #16]
 8009358:	3301      	adds	r3, #1
 800935a:	613b      	str	r3, [r7, #16]
 800935c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800935e:	693a      	ldr	r2, [r7, #16]
 8009360:	429a      	cmp	r2, r3
 8009362:	d3b7      	bcc.n	80092d4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800936a:	691b      	ldr	r3, [r3, #16]
 800936c:	68fa      	ldr	r2, [r7, #12]
 800936e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009372:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009376:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2200      	movs	r2, #0
 800937c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009384:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009388:	2b00      	cmp	r3, #0
 800938a:	d105      	bne.n	8009398 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	699b      	ldr	r3, [r3, #24]
 8009390:	f043 0210 	orr.w	r2, r3, #16
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	699a      	ldr	r2, [r3, #24]
 800939c:	4b0f      	ldr	r3, [pc, #60]	@ (80093dc <USB_DevInit+0x2b8>)
 800939e:	4313      	orrs	r3, r2
 80093a0:	687a      	ldr	r2, [r7, #4]
 80093a2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80093a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d005      	beq.n	80093b6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	699b      	ldr	r3, [r3, #24]
 80093ae:	f043 0208 	orr.w	r2, r3, #8
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80093b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80093b8:	2b01      	cmp	r3, #1
 80093ba:	d107      	bne.n	80093cc <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	699b      	ldr	r3, [r3, #24]
 80093c0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80093c4:	f043 0304 	orr.w	r3, r3, #4
 80093c8:	687a      	ldr	r2, [r7, #4]
 80093ca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80093cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	3718      	adds	r7, #24
 80093d2:	46bd      	mov	sp, r7
 80093d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80093d8:	b004      	add	sp, #16
 80093da:	4770      	bx	lr
 80093dc:	803c3800 	.word	0x803c3800

080093e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80093e0:	b480      	push	{r7}
 80093e2:	b085      	sub	sp, #20
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
 80093e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80093ea:	2300      	movs	r3, #0
 80093ec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	3301      	adds	r3, #1
 80093f2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	4a13      	ldr	r2, [pc, #76]	@ (8009444 <USB_FlushTxFifo+0x64>)
 80093f8:	4293      	cmp	r3, r2
 80093fa:	d901      	bls.n	8009400 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80093fc:	2303      	movs	r3, #3
 80093fe:	e01b      	b.n	8009438 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	691b      	ldr	r3, [r3, #16]
 8009404:	2b00      	cmp	r3, #0
 8009406:	daf2      	bge.n	80093ee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009408:	2300      	movs	r3, #0
 800940a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	019b      	lsls	r3, r3, #6
 8009410:	f043 0220 	orr.w	r2, r3, #32
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	3301      	adds	r3, #1
 800941c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	4a08      	ldr	r2, [pc, #32]	@ (8009444 <USB_FlushTxFifo+0x64>)
 8009422:	4293      	cmp	r3, r2
 8009424:	d901      	bls.n	800942a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009426:	2303      	movs	r3, #3
 8009428:	e006      	b.n	8009438 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	691b      	ldr	r3, [r3, #16]
 800942e:	f003 0320 	and.w	r3, r3, #32
 8009432:	2b20      	cmp	r3, #32
 8009434:	d0f0      	beq.n	8009418 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009436:	2300      	movs	r3, #0
}
 8009438:	4618      	mov	r0, r3
 800943a:	3714      	adds	r7, #20
 800943c:	46bd      	mov	sp, r7
 800943e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009442:	4770      	bx	lr
 8009444:	00030d40 	.word	0x00030d40

08009448 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009448:	b480      	push	{r7}
 800944a:	b085      	sub	sp, #20
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009450:	2300      	movs	r3, #0
 8009452:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	3301      	adds	r3, #1
 8009458:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	4a11      	ldr	r2, [pc, #68]	@ (80094a4 <USB_FlushRxFifo+0x5c>)
 800945e:	4293      	cmp	r3, r2
 8009460:	d901      	bls.n	8009466 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009462:	2303      	movs	r3, #3
 8009464:	e018      	b.n	8009498 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	691b      	ldr	r3, [r3, #16]
 800946a:	2b00      	cmp	r3, #0
 800946c:	daf2      	bge.n	8009454 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800946e:	2300      	movs	r3, #0
 8009470:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	2210      	movs	r2, #16
 8009476:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	3301      	adds	r3, #1
 800947c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	4a08      	ldr	r2, [pc, #32]	@ (80094a4 <USB_FlushRxFifo+0x5c>)
 8009482:	4293      	cmp	r3, r2
 8009484:	d901      	bls.n	800948a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009486:	2303      	movs	r3, #3
 8009488:	e006      	b.n	8009498 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	691b      	ldr	r3, [r3, #16]
 800948e:	f003 0310 	and.w	r3, r3, #16
 8009492:	2b10      	cmp	r3, #16
 8009494:	d0f0      	beq.n	8009478 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009496:	2300      	movs	r3, #0
}
 8009498:	4618      	mov	r0, r3
 800949a:	3714      	adds	r7, #20
 800949c:	46bd      	mov	sp, r7
 800949e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a2:	4770      	bx	lr
 80094a4:	00030d40 	.word	0x00030d40

080094a8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80094a8:	b480      	push	{r7}
 80094aa:	b085      	sub	sp, #20
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
 80094b0:	460b      	mov	r3, r1
 80094b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80094be:	681a      	ldr	r2, [r3, #0]
 80094c0:	78fb      	ldrb	r3, [r7, #3]
 80094c2:	68f9      	ldr	r1, [r7, #12]
 80094c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80094c8:	4313      	orrs	r3, r2
 80094ca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80094cc:	2300      	movs	r3, #0
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	3714      	adds	r7, #20
 80094d2:	46bd      	mov	sp, r7
 80094d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d8:	4770      	bx	lr

080094da <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80094da:	b480      	push	{r7}
 80094dc:	b085      	sub	sp, #20
 80094de:	af00      	add	r7, sp, #0
 80094e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	68fa      	ldr	r2, [r7, #12]
 80094f0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80094f4:	f023 0303 	bic.w	r3, r3, #3
 80094f8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009500:	685b      	ldr	r3, [r3, #4]
 8009502:	68fa      	ldr	r2, [r7, #12]
 8009504:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009508:	f043 0302 	orr.w	r3, r3, #2
 800950c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800950e:	2300      	movs	r3, #0
}
 8009510:	4618      	mov	r0, r3
 8009512:	3714      	adds	r7, #20
 8009514:	46bd      	mov	sp, r7
 8009516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951a:	4770      	bx	lr

0800951c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800951c:	b480      	push	{r7}
 800951e:	b083      	sub	sp, #12
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	695b      	ldr	r3, [r3, #20]
 8009528:	f003 0301 	and.w	r3, r3, #1
}
 800952c:	4618      	mov	r0, r3
 800952e:	370c      	adds	r7, #12
 8009530:	46bd      	mov	sp, r7
 8009532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009536:	4770      	bx	lr

08009538 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009538:	b480      	push	{r7}
 800953a:	b085      	sub	sp, #20
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009540:	2300      	movs	r3, #0
 8009542:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	3301      	adds	r3, #1
 8009548:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	4a13      	ldr	r2, [pc, #76]	@ (800959c <USB_CoreReset+0x64>)
 800954e:	4293      	cmp	r3, r2
 8009550:	d901      	bls.n	8009556 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009552:	2303      	movs	r3, #3
 8009554:	e01b      	b.n	800958e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	691b      	ldr	r3, [r3, #16]
 800955a:	2b00      	cmp	r3, #0
 800955c:	daf2      	bge.n	8009544 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800955e:	2300      	movs	r3, #0
 8009560:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	691b      	ldr	r3, [r3, #16]
 8009566:	f043 0201 	orr.w	r2, r3, #1
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	3301      	adds	r3, #1
 8009572:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	4a09      	ldr	r2, [pc, #36]	@ (800959c <USB_CoreReset+0x64>)
 8009578:	4293      	cmp	r3, r2
 800957a:	d901      	bls.n	8009580 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800957c:	2303      	movs	r3, #3
 800957e:	e006      	b.n	800958e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	691b      	ldr	r3, [r3, #16]
 8009584:	f003 0301 	and.w	r3, r3, #1
 8009588:	2b01      	cmp	r3, #1
 800958a:	d0f0      	beq.n	800956e <USB_CoreReset+0x36>

  return HAL_OK;
 800958c:	2300      	movs	r3, #0
}
 800958e:	4618      	mov	r0, r3
 8009590:	3714      	adds	r7, #20
 8009592:	46bd      	mov	sp, r7
 8009594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009598:	4770      	bx	lr
 800959a:	bf00      	nop
 800959c:	00030d40 	.word	0x00030d40

080095a0 <__cvt>:
 80095a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80095a4:	ec57 6b10 	vmov	r6, r7, d0
 80095a8:	2f00      	cmp	r7, #0
 80095aa:	460c      	mov	r4, r1
 80095ac:	4619      	mov	r1, r3
 80095ae:	463b      	mov	r3, r7
 80095b0:	bfbb      	ittet	lt
 80095b2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80095b6:	461f      	movlt	r7, r3
 80095b8:	2300      	movge	r3, #0
 80095ba:	232d      	movlt	r3, #45	@ 0x2d
 80095bc:	700b      	strb	r3, [r1, #0]
 80095be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80095c0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80095c4:	4691      	mov	r9, r2
 80095c6:	f023 0820 	bic.w	r8, r3, #32
 80095ca:	bfbc      	itt	lt
 80095cc:	4632      	movlt	r2, r6
 80095ce:	4616      	movlt	r6, r2
 80095d0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80095d4:	d005      	beq.n	80095e2 <__cvt+0x42>
 80095d6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80095da:	d100      	bne.n	80095de <__cvt+0x3e>
 80095dc:	3401      	adds	r4, #1
 80095de:	2102      	movs	r1, #2
 80095e0:	e000      	b.n	80095e4 <__cvt+0x44>
 80095e2:	2103      	movs	r1, #3
 80095e4:	ab03      	add	r3, sp, #12
 80095e6:	9301      	str	r3, [sp, #4]
 80095e8:	ab02      	add	r3, sp, #8
 80095ea:	9300      	str	r3, [sp, #0]
 80095ec:	ec47 6b10 	vmov	d0, r6, r7
 80095f0:	4653      	mov	r3, sl
 80095f2:	4622      	mov	r2, r4
 80095f4:	f000 fdcc 	bl	800a190 <_dtoa_r>
 80095f8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80095fc:	4605      	mov	r5, r0
 80095fe:	d119      	bne.n	8009634 <__cvt+0x94>
 8009600:	f019 0f01 	tst.w	r9, #1
 8009604:	d00e      	beq.n	8009624 <__cvt+0x84>
 8009606:	eb00 0904 	add.w	r9, r0, r4
 800960a:	2200      	movs	r2, #0
 800960c:	2300      	movs	r3, #0
 800960e:	4630      	mov	r0, r6
 8009610:	4639      	mov	r1, r7
 8009612:	f7f7 fa79 	bl	8000b08 <__aeabi_dcmpeq>
 8009616:	b108      	cbz	r0, 800961c <__cvt+0x7c>
 8009618:	f8cd 900c 	str.w	r9, [sp, #12]
 800961c:	2230      	movs	r2, #48	@ 0x30
 800961e:	9b03      	ldr	r3, [sp, #12]
 8009620:	454b      	cmp	r3, r9
 8009622:	d31e      	bcc.n	8009662 <__cvt+0xc2>
 8009624:	9b03      	ldr	r3, [sp, #12]
 8009626:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009628:	1b5b      	subs	r3, r3, r5
 800962a:	4628      	mov	r0, r5
 800962c:	6013      	str	r3, [r2, #0]
 800962e:	b004      	add	sp, #16
 8009630:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009634:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009638:	eb00 0904 	add.w	r9, r0, r4
 800963c:	d1e5      	bne.n	800960a <__cvt+0x6a>
 800963e:	7803      	ldrb	r3, [r0, #0]
 8009640:	2b30      	cmp	r3, #48	@ 0x30
 8009642:	d10a      	bne.n	800965a <__cvt+0xba>
 8009644:	2200      	movs	r2, #0
 8009646:	2300      	movs	r3, #0
 8009648:	4630      	mov	r0, r6
 800964a:	4639      	mov	r1, r7
 800964c:	f7f7 fa5c 	bl	8000b08 <__aeabi_dcmpeq>
 8009650:	b918      	cbnz	r0, 800965a <__cvt+0xba>
 8009652:	f1c4 0401 	rsb	r4, r4, #1
 8009656:	f8ca 4000 	str.w	r4, [sl]
 800965a:	f8da 3000 	ldr.w	r3, [sl]
 800965e:	4499      	add	r9, r3
 8009660:	e7d3      	b.n	800960a <__cvt+0x6a>
 8009662:	1c59      	adds	r1, r3, #1
 8009664:	9103      	str	r1, [sp, #12]
 8009666:	701a      	strb	r2, [r3, #0]
 8009668:	e7d9      	b.n	800961e <__cvt+0x7e>

0800966a <__exponent>:
 800966a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800966c:	2900      	cmp	r1, #0
 800966e:	bfba      	itte	lt
 8009670:	4249      	neglt	r1, r1
 8009672:	232d      	movlt	r3, #45	@ 0x2d
 8009674:	232b      	movge	r3, #43	@ 0x2b
 8009676:	2909      	cmp	r1, #9
 8009678:	7002      	strb	r2, [r0, #0]
 800967a:	7043      	strb	r3, [r0, #1]
 800967c:	dd29      	ble.n	80096d2 <__exponent+0x68>
 800967e:	f10d 0307 	add.w	r3, sp, #7
 8009682:	461d      	mov	r5, r3
 8009684:	270a      	movs	r7, #10
 8009686:	461a      	mov	r2, r3
 8009688:	fbb1 f6f7 	udiv	r6, r1, r7
 800968c:	fb07 1416 	mls	r4, r7, r6, r1
 8009690:	3430      	adds	r4, #48	@ 0x30
 8009692:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009696:	460c      	mov	r4, r1
 8009698:	2c63      	cmp	r4, #99	@ 0x63
 800969a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800969e:	4631      	mov	r1, r6
 80096a0:	dcf1      	bgt.n	8009686 <__exponent+0x1c>
 80096a2:	3130      	adds	r1, #48	@ 0x30
 80096a4:	1e94      	subs	r4, r2, #2
 80096a6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80096aa:	1c41      	adds	r1, r0, #1
 80096ac:	4623      	mov	r3, r4
 80096ae:	42ab      	cmp	r3, r5
 80096b0:	d30a      	bcc.n	80096c8 <__exponent+0x5e>
 80096b2:	f10d 0309 	add.w	r3, sp, #9
 80096b6:	1a9b      	subs	r3, r3, r2
 80096b8:	42ac      	cmp	r4, r5
 80096ba:	bf88      	it	hi
 80096bc:	2300      	movhi	r3, #0
 80096be:	3302      	adds	r3, #2
 80096c0:	4403      	add	r3, r0
 80096c2:	1a18      	subs	r0, r3, r0
 80096c4:	b003      	add	sp, #12
 80096c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096c8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80096cc:	f801 6f01 	strb.w	r6, [r1, #1]!
 80096d0:	e7ed      	b.n	80096ae <__exponent+0x44>
 80096d2:	2330      	movs	r3, #48	@ 0x30
 80096d4:	3130      	adds	r1, #48	@ 0x30
 80096d6:	7083      	strb	r3, [r0, #2]
 80096d8:	70c1      	strb	r1, [r0, #3]
 80096da:	1d03      	adds	r3, r0, #4
 80096dc:	e7f1      	b.n	80096c2 <__exponent+0x58>
	...

080096e0 <_printf_float>:
 80096e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096e4:	b08d      	sub	sp, #52	@ 0x34
 80096e6:	460c      	mov	r4, r1
 80096e8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80096ec:	4616      	mov	r6, r2
 80096ee:	461f      	mov	r7, r3
 80096f0:	4605      	mov	r5, r0
 80096f2:	f000 fc97 	bl	800a024 <_localeconv_r>
 80096f6:	6803      	ldr	r3, [r0, #0]
 80096f8:	9304      	str	r3, [sp, #16]
 80096fa:	4618      	mov	r0, r3
 80096fc:	f7f6 fdd8 	bl	80002b0 <strlen>
 8009700:	2300      	movs	r3, #0
 8009702:	930a      	str	r3, [sp, #40]	@ 0x28
 8009704:	f8d8 3000 	ldr.w	r3, [r8]
 8009708:	9005      	str	r0, [sp, #20]
 800970a:	3307      	adds	r3, #7
 800970c:	f023 0307 	bic.w	r3, r3, #7
 8009710:	f103 0208 	add.w	r2, r3, #8
 8009714:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009718:	f8d4 b000 	ldr.w	fp, [r4]
 800971c:	f8c8 2000 	str.w	r2, [r8]
 8009720:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009724:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009728:	9307      	str	r3, [sp, #28]
 800972a:	f8cd 8018 	str.w	r8, [sp, #24]
 800972e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009732:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009736:	4b9c      	ldr	r3, [pc, #624]	@ (80099a8 <_printf_float+0x2c8>)
 8009738:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800973c:	f7f7 fa16 	bl	8000b6c <__aeabi_dcmpun>
 8009740:	bb70      	cbnz	r0, 80097a0 <_printf_float+0xc0>
 8009742:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009746:	4b98      	ldr	r3, [pc, #608]	@ (80099a8 <_printf_float+0x2c8>)
 8009748:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800974c:	f7f7 f9f0 	bl	8000b30 <__aeabi_dcmple>
 8009750:	bb30      	cbnz	r0, 80097a0 <_printf_float+0xc0>
 8009752:	2200      	movs	r2, #0
 8009754:	2300      	movs	r3, #0
 8009756:	4640      	mov	r0, r8
 8009758:	4649      	mov	r1, r9
 800975a:	f7f7 f9df 	bl	8000b1c <__aeabi_dcmplt>
 800975e:	b110      	cbz	r0, 8009766 <_printf_float+0x86>
 8009760:	232d      	movs	r3, #45	@ 0x2d
 8009762:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009766:	4a91      	ldr	r2, [pc, #580]	@ (80099ac <_printf_float+0x2cc>)
 8009768:	4b91      	ldr	r3, [pc, #580]	@ (80099b0 <_printf_float+0x2d0>)
 800976a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800976e:	bf94      	ite	ls
 8009770:	4690      	movls	r8, r2
 8009772:	4698      	movhi	r8, r3
 8009774:	2303      	movs	r3, #3
 8009776:	6123      	str	r3, [r4, #16]
 8009778:	f02b 0304 	bic.w	r3, fp, #4
 800977c:	6023      	str	r3, [r4, #0]
 800977e:	f04f 0900 	mov.w	r9, #0
 8009782:	9700      	str	r7, [sp, #0]
 8009784:	4633      	mov	r3, r6
 8009786:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009788:	4621      	mov	r1, r4
 800978a:	4628      	mov	r0, r5
 800978c:	f000 f9d2 	bl	8009b34 <_printf_common>
 8009790:	3001      	adds	r0, #1
 8009792:	f040 808d 	bne.w	80098b0 <_printf_float+0x1d0>
 8009796:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800979a:	b00d      	add	sp, #52	@ 0x34
 800979c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097a0:	4642      	mov	r2, r8
 80097a2:	464b      	mov	r3, r9
 80097a4:	4640      	mov	r0, r8
 80097a6:	4649      	mov	r1, r9
 80097a8:	f7f7 f9e0 	bl	8000b6c <__aeabi_dcmpun>
 80097ac:	b140      	cbz	r0, 80097c0 <_printf_float+0xe0>
 80097ae:	464b      	mov	r3, r9
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	bfbc      	itt	lt
 80097b4:	232d      	movlt	r3, #45	@ 0x2d
 80097b6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80097ba:	4a7e      	ldr	r2, [pc, #504]	@ (80099b4 <_printf_float+0x2d4>)
 80097bc:	4b7e      	ldr	r3, [pc, #504]	@ (80099b8 <_printf_float+0x2d8>)
 80097be:	e7d4      	b.n	800976a <_printf_float+0x8a>
 80097c0:	6863      	ldr	r3, [r4, #4]
 80097c2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80097c6:	9206      	str	r2, [sp, #24]
 80097c8:	1c5a      	adds	r2, r3, #1
 80097ca:	d13b      	bne.n	8009844 <_printf_float+0x164>
 80097cc:	2306      	movs	r3, #6
 80097ce:	6063      	str	r3, [r4, #4]
 80097d0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80097d4:	2300      	movs	r3, #0
 80097d6:	6022      	str	r2, [r4, #0]
 80097d8:	9303      	str	r3, [sp, #12]
 80097da:	ab0a      	add	r3, sp, #40	@ 0x28
 80097dc:	e9cd a301 	strd	sl, r3, [sp, #4]
 80097e0:	ab09      	add	r3, sp, #36	@ 0x24
 80097e2:	9300      	str	r3, [sp, #0]
 80097e4:	6861      	ldr	r1, [r4, #4]
 80097e6:	ec49 8b10 	vmov	d0, r8, r9
 80097ea:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80097ee:	4628      	mov	r0, r5
 80097f0:	f7ff fed6 	bl	80095a0 <__cvt>
 80097f4:	9b06      	ldr	r3, [sp, #24]
 80097f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80097f8:	2b47      	cmp	r3, #71	@ 0x47
 80097fa:	4680      	mov	r8, r0
 80097fc:	d129      	bne.n	8009852 <_printf_float+0x172>
 80097fe:	1cc8      	adds	r0, r1, #3
 8009800:	db02      	blt.n	8009808 <_printf_float+0x128>
 8009802:	6863      	ldr	r3, [r4, #4]
 8009804:	4299      	cmp	r1, r3
 8009806:	dd41      	ble.n	800988c <_printf_float+0x1ac>
 8009808:	f1aa 0a02 	sub.w	sl, sl, #2
 800980c:	fa5f fa8a 	uxtb.w	sl, sl
 8009810:	3901      	subs	r1, #1
 8009812:	4652      	mov	r2, sl
 8009814:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009818:	9109      	str	r1, [sp, #36]	@ 0x24
 800981a:	f7ff ff26 	bl	800966a <__exponent>
 800981e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009820:	1813      	adds	r3, r2, r0
 8009822:	2a01      	cmp	r2, #1
 8009824:	4681      	mov	r9, r0
 8009826:	6123      	str	r3, [r4, #16]
 8009828:	dc02      	bgt.n	8009830 <_printf_float+0x150>
 800982a:	6822      	ldr	r2, [r4, #0]
 800982c:	07d2      	lsls	r2, r2, #31
 800982e:	d501      	bpl.n	8009834 <_printf_float+0x154>
 8009830:	3301      	adds	r3, #1
 8009832:	6123      	str	r3, [r4, #16]
 8009834:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009838:	2b00      	cmp	r3, #0
 800983a:	d0a2      	beq.n	8009782 <_printf_float+0xa2>
 800983c:	232d      	movs	r3, #45	@ 0x2d
 800983e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009842:	e79e      	b.n	8009782 <_printf_float+0xa2>
 8009844:	9a06      	ldr	r2, [sp, #24]
 8009846:	2a47      	cmp	r2, #71	@ 0x47
 8009848:	d1c2      	bne.n	80097d0 <_printf_float+0xf0>
 800984a:	2b00      	cmp	r3, #0
 800984c:	d1c0      	bne.n	80097d0 <_printf_float+0xf0>
 800984e:	2301      	movs	r3, #1
 8009850:	e7bd      	b.n	80097ce <_printf_float+0xee>
 8009852:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009856:	d9db      	bls.n	8009810 <_printf_float+0x130>
 8009858:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800985c:	d118      	bne.n	8009890 <_printf_float+0x1b0>
 800985e:	2900      	cmp	r1, #0
 8009860:	6863      	ldr	r3, [r4, #4]
 8009862:	dd0b      	ble.n	800987c <_printf_float+0x19c>
 8009864:	6121      	str	r1, [r4, #16]
 8009866:	b913      	cbnz	r3, 800986e <_printf_float+0x18e>
 8009868:	6822      	ldr	r2, [r4, #0]
 800986a:	07d0      	lsls	r0, r2, #31
 800986c:	d502      	bpl.n	8009874 <_printf_float+0x194>
 800986e:	3301      	adds	r3, #1
 8009870:	440b      	add	r3, r1
 8009872:	6123      	str	r3, [r4, #16]
 8009874:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009876:	f04f 0900 	mov.w	r9, #0
 800987a:	e7db      	b.n	8009834 <_printf_float+0x154>
 800987c:	b913      	cbnz	r3, 8009884 <_printf_float+0x1a4>
 800987e:	6822      	ldr	r2, [r4, #0]
 8009880:	07d2      	lsls	r2, r2, #31
 8009882:	d501      	bpl.n	8009888 <_printf_float+0x1a8>
 8009884:	3302      	adds	r3, #2
 8009886:	e7f4      	b.n	8009872 <_printf_float+0x192>
 8009888:	2301      	movs	r3, #1
 800988a:	e7f2      	b.n	8009872 <_printf_float+0x192>
 800988c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009890:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009892:	4299      	cmp	r1, r3
 8009894:	db05      	blt.n	80098a2 <_printf_float+0x1c2>
 8009896:	6823      	ldr	r3, [r4, #0]
 8009898:	6121      	str	r1, [r4, #16]
 800989a:	07d8      	lsls	r0, r3, #31
 800989c:	d5ea      	bpl.n	8009874 <_printf_float+0x194>
 800989e:	1c4b      	adds	r3, r1, #1
 80098a0:	e7e7      	b.n	8009872 <_printf_float+0x192>
 80098a2:	2900      	cmp	r1, #0
 80098a4:	bfd4      	ite	le
 80098a6:	f1c1 0202 	rsble	r2, r1, #2
 80098aa:	2201      	movgt	r2, #1
 80098ac:	4413      	add	r3, r2
 80098ae:	e7e0      	b.n	8009872 <_printf_float+0x192>
 80098b0:	6823      	ldr	r3, [r4, #0]
 80098b2:	055a      	lsls	r2, r3, #21
 80098b4:	d407      	bmi.n	80098c6 <_printf_float+0x1e6>
 80098b6:	6923      	ldr	r3, [r4, #16]
 80098b8:	4642      	mov	r2, r8
 80098ba:	4631      	mov	r1, r6
 80098bc:	4628      	mov	r0, r5
 80098be:	47b8      	blx	r7
 80098c0:	3001      	adds	r0, #1
 80098c2:	d12b      	bne.n	800991c <_printf_float+0x23c>
 80098c4:	e767      	b.n	8009796 <_printf_float+0xb6>
 80098c6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80098ca:	f240 80dd 	bls.w	8009a88 <_printf_float+0x3a8>
 80098ce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80098d2:	2200      	movs	r2, #0
 80098d4:	2300      	movs	r3, #0
 80098d6:	f7f7 f917 	bl	8000b08 <__aeabi_dcmpeq>
 80098da:	2800      	cmp	r0, #0
 80098dc:	d033      	beq.n	8009946 <_printf_float+0x266>
 80098de:	4a37      	ldr	r2, [pc, #220]	@ (80099bc <_printf_float+0x2dc>)
 80098e0:	2301      	movs	r3, #1
 80098e2:	4631      	mov	r1, r6
 80098e4:	4628      	mov	r0, r5
 80098e6:	47b8      	blx	r7
 80098e8:	3001      	adds	r0, #1
 80098ea:	f43f af54 	beq.w	8009796 <_printf_float+0xb6>
 80098ee:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80098f2:	4543      	cmp	r3, r8
 80098f4:	db02      	blt.n	80098fc <_printf_float+0x21c>
 80098f6:	6823      	ldr	r3, [r4, #0]
 80098f8:	07d8      	lsls	r0, r3, #31
 80098fa:	d50f      	bpl.n	800991c <_printf_float+0x23c>
 80098fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009900:	4631      	mov	r1, r6
 8009902:	4628      	mov	r0, r5
 8009904:	47b8      	blx	r7
 8009906:	3001      	adds	r0, #1
 8009908:	f43f af45 	beq.w	8009796 <_printf_float+0xb6>
 800990c:	f04f 0900 	mov.w	r9, #0
 8009910:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8009914:	f104 0a1a 	add.w	sl, r4, #26
 8009918:	45c8      	cmp	r8, r9
 800991a:	dc09      	bgt.n	8009930 <_printf_float+0x250>
 800991c:	6823      	ldr	r3, [r4, #0]
 800991e:	079b      	lsls	r3, r3, #30
 8009920:	f100 8103 	bmi.w	8009b2a <_printf_float+0x44a>
 8009924:	68e0      	ldr	r0, [r4, #12]
 8009926:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009928:	4298      	cmp	r0, r3
 800992a:	bfb8      	it	lt
 800992c:	4618      	movlt	r0, r3
 800992e:	e734      	b.n	800979a <_printf_float+0xba>
 8009930:	2301      	movs	r3, #1
 8009932:	4652      	mov	r2, sl
 8009934:	4631      	mov	r1, r6
 8009936:	4628      	mov	r0, r5
 8009938:	47b8      	blx	r7
 800993a:	3001      	adds	r0, #1
 800993c:	f43f af2b 	beq.w	8009796 <_printf_float+0xb6>
 8009940:	f109 0901 	add.w	r9, r9, #1
 8009944:	e7e8      	b.n	8009918 <_printf_float+0x238>
 8009946:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009948:	2b00      	cmp	r3, #0
 800994a:	dc39      	bgt.n	80099c0 <_printf_float+0x2e0>
 800994c:	4a1b      	ldr	r2, [pc, #108]	@ (80099bc <_printf_float+0x2dc>)
 800994e:	2301      	movs	r3, #1
 8009950:	4631      	mov	r1, r6
 8009952:	4628      	mov	r0, r5
 8009954:	47b8      	blx	r7
 8009956:	3001      	adds	r0, #1
 8009958:	f43f af1d 	beq.w	8009796 <_printf_float+0xb6>
 800995c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009960:	ea59 0303 	orrs.w	r3, r9, r3
 8009964:	d102      	bne.n	800996c <_printf_float+0x28c>
 8009966:	6823      	ldr	r3, [r4, #0]
 8009968:	07d9      	lsls	r1, r3, #31
 800996a:	d5d7      	bpl.n	800991c <_printf_float+0x23c>
 800996c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009970:	4631      	mov	r1, r6
 8009972:	4628      	mov	r0, r5
 8009974:	47b8      	blx	r7
 8009976:	3001      	adds	r0, #1
 8009978:	f43f af0d 	beq.w	8009796 <_printf_float+0xb6>
 800997c:	f04f 0a00 	mov.w	sl, #0
 8009980:	f104 0b1a 	add.w	fp, r4, #26
 8009984:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009986:	425b      	negs	r3, r3
 8009988:	4553      	cmp	r3, sl
 800998a:	dc01      	bgt.n	8009990 <_printf_float+0x2b0>
 800998c:	464b      	mov	r3, r9
 800998e:	e793      	b.n	80098b8 <_printf_float+0x1d8>
 8009990:	2301      	movs	r3, #1
 8009992:	465a      	mov	r2, fp
 8009994:	4631      	mov	r1, r6
 8009996:	4628      	mov	r0, r5
 8009998:	47b8      	blx	r7
 800999a:	3001      	adds	r0, #1
 800999c:	f43f aefb 	beq.w	8009796 <_printf_float+0xb6>
 80099a0:	f10a 0a01 	add.w	sl, sl, #1
 80099a4:	e7ee      	b.n	8009984 <_printf_float+0x2a4>
 80099a6:	bf00      	nop
 80099a8:	7fefffff 	.word	0x7fefffff
 80099ac:	0800c468 	.word	0x0800c468
 80099b0:	0800c46c 	.word	0x0800c46c
 80099b4:	0800c470 	.word	0x0800c470
 80099b8:	0800c474 	.word	0x0800c474
 80099bc:	0800c478 	.word	0x0800c478
 80099c0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80099c2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80099c6:	4553      	cmp	r3, sl
 80099c8:	bfa8      	it	ge
 80099ca:	4653      	movge	r3, sl
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	4699      	mov	r9, r3
 80099d0:	dc36      	bgt.n	8009a40 <_printf_float+0x360>
 80099d2:	f04f 0b00 	mov.w	fp, #0
 80099d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80099da:	f104 021a 	add.w	r2, r4, #26
 80099de:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80099e0:	9306      	str	r3, [sp, #24]
 80099e2:	eba3 0309 	sub.w	r3, r3, r9
 80099e6:	455b      	cmp	r3, fp
 80099e8:	dc31      	bgt.n	8009a4e <_printf_float+0x36e>
 80099ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099ec:	459a      	cmp	sl, r3
 80099ee:	dc3a      	bgt.n	8009a66 <_printf_float+0x386>
 80099f0:	6823      	ldr	r3, [r4, #0]
 80099f2:	07da      	lsls	r2, r3, #31
 80099f4:	d437      	bmi.n	8009a66 <_printf_float+0x386>
 80099f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099f8:	ebaa 0903 	sub.w	r9, sl, r3
 80099fc:	9b06      	ldr	r3, [sp, #24]
 80099fe:	ebaa 0303 	sub.w	r3, sl, r3
 8009a02:	4599      	cmp	r9, r3
 8009a04:	bfa8      	it	ge
 8009a06:	4699      	movge	r9, r3
 8009a08:	f1b9 0f00 	cmp.w	r9, #0
 8009a0c:	dc33      	bgt.n	8009a76 <_printf_float+0x396>
 8009a0e:	f04f 0800 	mov.w	r8, #0
 8009a12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009a16:	f104 0b1a 	add.w	fp, r4, #26
 8009a1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a1c:	ebaa 0303 	sub.w	r3, sl, r3
 8009a20:	eba3 0309 	sub.w	r3, r3, r9
 8009a24:	4543      	cmp	r3, r8
 8009a26:	f77f af79 	ble.w	800991c <_printf_float+0x23c>
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	465a      	mov	r2, fp
 8009a2e:	4631      	mov	r1, r6
 8009a30:	4628      	mov	r0, r5
 8009a32:	47b8      	blx	r7
 8009a34:	3001      	adds	r0, #1
 8009a36:	f43f aeae 	beq.w	8009796 <_printf_float+0xb6>
 8009a3a:	f108 0801 	add.w	r8, r8, #1
 8009a3e:	e7ec      	b.n	8009a1a <_printf_float+0x33a>
 8009a40:	4642      	mov	r2, r8
 8009a42:	4631      	mov	r1, r6
 8009a44:	4628      	mov	r0, r5
 8009a46:	47b8      	blx	r7
 8009a48:	3001      	adds	r0, #1
 8009a4a:	d1c2      	bne.n	80099d2 <_printf_float+0x2f2>
 8009a4c:	e6a3      	b.n	8009796 <_printf_float+0xb6>
 8009a4e:	2301      	movs	r3, #1
 8009a50:	4631      	mov	r1, r6
 8009a52:	4628      	mov	r0, r5
 8009a54:	9206      	str	r2, [sp, #24]
 8009a56:	47b8      	blx	r7
 8009a58:	3001      	adds	r0, #1
 8009a5a:	f43f ae9c 	beq.w	8009796 <_printf_float+0xb6>
 8009a5e:	9a06      	ldr	r2, [sp, #24]
 8009a60:	f10b 0b01 	add.w	fp, fp, #1
 8009a64:	e7bb      	b.n	80099de <_printf_float+0x2fe>
 8009a66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a6a:	4631      	mov	r1, r6
 8009a6c:	4628      	mov	r0, r5
 8009a6e:	47b8      	blx	r7
 8009a70:	3001      	adds	r0, #1
 8009a72:	d1c0      	bne.n	80099f6 <_printf_float+0x316>
 8009a74:	e68f      	b.n	8009796 <_printf_float+0xb6>
 8009a76:	9a06      	ldr	r2, [sp, #24]
 8009a78:	464b      	mov	r3, r9
 8009a7a:	4442      	add	r2, r8
 8009a7c:	4631      	mov	r1, r6
 8009a7e:	4628      	mov	r0, r5
 8009a80:	47b8      	blx	r7
 8009a82:	3001      	adds	r0, #1
 8009a84:	d1c3      	bne.n	8009a0e <_printf_float+0x32e>
 8009a86:	e686      	b.n	8009796 <_printf_float+0xb6>
 8009a88:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009a8c:	f1ba 0f01 	cmp.w	sl, #1
 8009a90:	dc01      	bgt.n	8009a96 <_printf_float+0x3b6>
 8009a92:	07db      	lsls	r3, r3, #31
 8009a94:	d536      	bpl.n	8009b04 <_printf_float+0x424>
 8009a96:	2301      	movs	r3, #1
 8009a98:	4642      	mov	r2, r8
 8009a9a:	4631      	mov	r1, r6
 8009a9c:	4628      	mov	r0, r5
 8009a9e:	47b8      	blx	r7
 8009aa0:	3001      	adds	r0, #1
 8009aa2:	f43f ae78 	beq.w	8009796 <_printf_float+0xb6>
 8009aa6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009aaa:	4631      	mov	r1, r6
 8009aac:	4628      	mov	r0, r5
 8009aae:	47b8      	blx	r7
 8009ab0:	3001      	adds	r0, #1
 8009ab2:	f43f ae70 	beq.w	8009796 <_printf_float+0xb6>
 8009ab6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009aba:	2200      	movs	r2, #0
 8009abc:	2300      	movs	r3, #0
 8009abe:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8009ac2:	f7f7 f821 	bl	8000b08 <__aeabi_dcmpeq>
 8009ac6:	b9c0      	cbnz	r0, 8009afa <_printf_float+0x41a>
 8009ac8:	4653      	mov	r3, sl
 8009aca:	f108 0201 	add.w	r2, r8, #1
 8009ace:	4631      	mov	r1, r6
 8009ad0:	4628      	mov	r0, r5
 8009ad2:	47b8      	blx	r7
 8009ad4:	3001      	adds	r0, #1
 8009ad6:	d10c      	bne.n	8009af2 <_printf_float+0x412>
 8009ad8:	e65d      	b.n	8009796 <_printf_float+0xb6>
 8009ada:	2301      	movs	r3, #1
 8009adc:	465a      	mov	r2, fp
 8009ade:	4631      	mov	r1, r6
 8009ae0:	4628      	mov	r0, r5
 8009ae2:	47b8      	blx	r7
 8009ae4:	3001      	adds	r0, #1
 8009ae6:	f43f ae56 	beq.w	8009796 <_printf_float+0xb6>
 8009aea:	f108 0801 	add.w	r8, r8, #1
 8009aee:	45d0      	cmp	r8, sl
 8009af0:	dbf3      	blt.n	8009ada <_printf_float+0x3fa>
 8009af2:	464b      	mov	r3, r9
 8009af4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009af8:	e6df      	b.n	80098ba <_printf_float+0x1da>
 8009afa:	f04f 0800 	mov.w	r8, #0
 8009afe:	f104 0b1a 	add.w	fp, r4, #26
 8009b02:	e7f4      	b.n	8009aee <_printf_float+0x40e>
 8009b04:	2301      	movs	r3, #1
 8009b06:	4642      	mov	r2, r8
 8009b08:	e7e1      	b.n	8009ace <_printf_float+0x3ee>
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	464a      	mov	r2, r9
 8009b0e:	4631      	mov	r1, r6
 8009b10:	4628      	mov	r0, r5
 8009b12:	47b8      	blx	r7
 8009b14:	3001      	adds	r0, #1
 8009b16:	f43f ae3e 	beq.w	8009796 <_printf_float+0xb6>
 8009b1a:	f108 0801 	add.w	r8, r8, #1
 8009b1e:	68e3      	ldr	r3, [r4, #12]
 8009b20:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009b22:	1a5b      	subs	r3, r3, r1
 8009b24:	4543      	cmp	r3, r8
 8009b26:	dcf0      	bgt.n	8009b0a <_printf_float+0x42a>
 8009b28:	e6fc      	b.n	8009924 <_printf_float+0x244>
 8009b2a:	f04f 0800 	mov.w	r8, #0
 8009b2e:	f104 0919 	add.w	r9, r4, #25
 8009b32:	e7f4      	b.n	8009b1e <_printf_float+0x43e>

08009b34 <_printf_common>:
 8009b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b38:	4616      	mov	r6, r2
 8009b3a:	4698      	mov	r8, r3
 8009b3c:	688a      	ldr	r2, [r1, #8]
 8009b3e:	690b      	ldr	r3, [r1, #16]
 8009b40:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009b44:	4293      	cmp	r3, r2
 8009b46:	bfb8      	it	lt
 8009b48:	4613      	movlt	r3, r2
 8009b4a:	6033      	str	r3, [r6, #0]
 8009b4c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009b50:	4607      	mov	r7, r0
 8009b52:	460c      	mov	r4, r1
 8009b54:	b10a      	cbz	r2, 8009b5a <_printf_common+0x26>
 8009b56:	3301      	adds	r3, #1
 8009b58:	6033      	str	r3, [r6, #0]
 8009b5a:	6823      	ldr	r3, [r4, #0]
 8009b5c:	0699      	lsls	r1, r3, #26
 8009b5e:	bf42      	ittt	mi
 8009b60:	6833      	ldrmi	r3, [r6, #0]
 8009b62:	3302      	addmi	r3, #2
 8009b64:	6033      	strmi	r3, [r6, #0]
 8009b66:	6825      	ldr	r5, [r4, #0]
 8009b68:	f015 0506 	ands.w	r5, r5, #6
 8009b6c:	d106      	bne.n	8009b7c <_printf_common+0x48>
 8009b6e:	f104 0a19 	add.w	sl, r4, #25
 8009b72:	68e3      	ldr	r3, [r4, #12]
 8009b74:	6832      	ldr	r2, [r6, #0]
 8009b76:	1a9b      	subs	r3, r3, r2
 8009b78:	42ab      	cmp	r3, r5
 8009b7a:	dc26      	bgt.n	8009bca <_printf_common+0x96>
 8009b7c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009b80:	6822      	ldr	r2, [r4, #0]
 8009b82:	3b00      	subs	r3, #0
 8009b84:	bf18      	it	ne
 8009b86:	2301      	movne	r3, #1
 8009b88:	0692      	lsls	r2, r2, #26
 8009b8a:	d42b      	bmi.n	8009be4 <_printf_common+0xb0>
 8009b8c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009b90:	4641      	mov	r1, r8
 8009b92:	4638      	mov	r0, r7
 8009b94:	47c8      	blx	r9
 8009b96:	3001      	adds	r0, #1
 8009b98:	d01e      	beq.n	8009bd8 <_printf_common+0xa4>
 8009b9a:	6823      	ldr	r3, [r4, #0]
 8009b9c:	6922      	ldr	r2, [r4, #16]
 8009b9e:	f003 0306 	and.w	r3, r3, #6
 8009ba2:	2b04      	cmp	r3, #4
 8009ba4:	bf02      	ittt	eq
 8009ba6:	68e5      	ldreq	r5, [r4, #12]
 8009ba8:	6833      	ldreq	r3, [r6, #0]
 8009baa:	1aed      	subeq	r5, r5, r3
 8009bac:	68a3      	ldr	r3, [r4, #8]
 8009bae:	bf0c      	ite	eq
 8009bb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009bb4:	2500      	movne	r5, #0
 8009bb6:	4293      	cmp	r3, r2
 8009bb8:	bfc4      	itt	gt
 8009bba:	1a9b      	subgt	r3, r3, r2
 8009bbc:	18ed      	addgt	r5, r5, r3
 8009bbe:	2600      	movs	r6, #0
 8009bc0:	341a      	adds	r4, #26
 8009bc2:	42b5      	cmp	r5, r6
 8009bc4:	d11a      	bne.n	8009bfc <_printf_common+0xc8>
 8009bc6:	2000      	movs	r0, #0
 8009bc8:	e008      	b.n	8009bdc <_printf_common+0xa8>
 8009bca:	2301      	movs	r3, #1
 8009bcc:	4652      	mov	r2, sl
 8009bce:	4641      	mov	r1, r8
 8009bd0:	4638      	mov	r0, r7
 8009bd2:	47c8      	blx	r9
 8009bd4:	3001      	adds	r0, #1
 8009bd6:	d103      	bne.n	8009be0 <_printf_common+0xac>
 8009bd8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009bdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009be0:	3501      	adds	r5, #1
 8009be2:	e7c6      	b.n	8009b72 <_printf_common+0x3e>
 8009be4:	18e1      	adds	r1, r4, r3
 8009be6:	1c5a      	adds	r2, r3, #1
 8009be8:	2030      	movs	r0, #48	@ 0x30
 8009bea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009bee:	4422      	add	r2, r4
 8009bf0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009bf4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009bf8:	3302      	adds	r3, #2
 8009bfa:	e7c7      	b.n	8009b8c <_printf_common+0x58>
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	4622      	mov	r2, r4
 8009c00:	4641      	mov	r1, r8
 8009c02:	4638      	mov	r0, r7
 8009c04:	47c8      	blx	r9
 8009c06:	3001      	adds	r0, #1
 8009c08:	d0e6      	beq.n	8009bd8 <_printf_common+0xa4>
 8009c0a:	3601      	adds	r6, #1
 8009c0c:	e7d9      	b.n	8009bc2 <_printf_common+0x8e>
	...

08009c10 <_printf_i>:
 8009c10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c14:	7e0f      	ldrb	r7, [r1, #24]
 8009c16:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009c18:	2f78      	cmp	r7, #120	@ 0x78
 8009c1a:	4691      	mov	r9, r2
 8009c1c:	4680      	mov	r8, r0
 8009c1e:	460c      	mov	r4, r1
 8009c20:	469a      	mov	sl, r3
 8009c22:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009c26:	d807      	bhi.n	8009c38 <_printf_i+0x28>
 8009c28:	2f62      	cmp	r7, #98	@ 0x62
 8009c2a:	d80a      	bhi.n	8009c42 <_printf_i+0x32>
 8009c2c:	2f00      	cmp	r7, #0
 8009c2e:	f000 80d2 	beq.w	8009dd6 <_printf_i+0x1c6>
 8009c32:	2f58      	cmp	r7, #88	@ 0x58
 8009c34:	f000 80b9 	beq.w	8009daa <_printf_i+0x19a>
 8009c38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009c3c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009c40:	e03a      	b.n	8009cb8 <_printf_i+0xa8>
 8009c42:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009c46:	2b15      	cmp	r3, #21
 8009c48:	d8f6      	bhi.n	8009c38 <_printf_i+0x28>
 8009c4a:	a101      	add	r1, pc, #4	@ (adr r1, 8009c50 <_printf_i+0x40>)
 8009c4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009c50:	08009ca9 	.word	0x08009ca9
 8009c54:	08009cbd 	.word	0x08009cbd
 8009c58:	08009c39 	.word	0x08009c39
 8009c5c:	08009c39 	.word	0x08009c39
 8009c60:	08009c39 	.word	0x08009c39
 8009c64:	08009c39 	.word	0x08009c39
 8009c68:	08009cbd 	.word	0x08009cbd
 8009c6c:	08009c39 	.word	0x08009c39
 8009c70:	08009c39 	.word	0x08009c39
 8009c74:	08009c39 	.word	0x08009c39
 8009c78:	08009c39 	.word	0x08009c39
 8009c7c:	08009dbd 	.word	0x08009dbd
 8009c80:	08009ce7 	.word	0x08009ce7
 8009c84:	08009d77 	.word	0x08009d77
 8009c88:	08009c39 	.word	0x08009c39
 8009c8c:	08009c39 	.word	0x08009c39
 8009c90:	08009ddf 	.word	0x08009ddf
 8009c94:	08009c39 	.word	0x08009c39
 8009c98:	08009ce7 	.word	0x08009ce7
 8009c9c:	08009c39 	.word	0x08009c39
 8009ca0:	08009c39 	.word	0x08009c39
 8009ca4:	08009d7f 	.word	0x08009d7f
 8009ca8:	6833      	ldr	r3, [r6, #0]
 8009caa:	1d1a      	adds	r2, r3, #4
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	6032      	str	r2, [r6, #0]
 8009cb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009cb4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009cb8:	2301      	movs	r3, #1
 8009cba:	e09d      	b.n	8009df8 <_printf_i+0x1e8>
 8009cbc:	6833      	ldr	r3, [r6, #0]
 8009cbe:	6820      	ldr	r0, [r4, #0]
 8009cc0:	1d19      	adds	r1, r3, #4
 8009cc2:	6031      	str	r1, [r6, #0]
 8009cc4:	0606      	lsls	r6, r0, #24
 8009cc6:	d501      	bpl.n	8009ccc <_printf_i+0xbc>
 8009cc8:	681d      	ldr	r5, [r3, #0]
 8009cca:	e003      	b.n	8009cd4 <_printf_i+0xc4>
 8009ccc:	0645      	lsls	r5, r0, #25
 8009cce:	d5fb      	bpl.n	8009cc8 <_printf_i+0xb8>
 8009cd0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009cd4:	2d00      	cmp	r5, #0
 8009cd6:	da03      	bge.n	8009ce0 <_printf_i+0xd0>
 8009cd8:	232d      	movs	r3, #45	@ 0x2d
 8009cda:	426d      	negs	r5, r5
 8009cdc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009ce0:	4859      	ldr	r0, [pc, #356]	@ (8009e48 <_printf_i+0x238>)
 8009ce2:	230a      	movs	r3, #10
 8009ce4:	e011      	b.n	8009d0a <_printf_i+0xfa>
 8009ce6:	6821      	ldr	r1, [r4, #0]
 8009ce8:	6833      	ldr	r3, [r6, #0]
 8009cea:	0608      	lsls	r0, r1, #24
 8009cec:	f853 5b04 	ldr.w	r5, [r3], #4
 8009cf0:	d402      	bmi.n	8009cf8 <_printf_i+0xe8>
 8009cf2:	0649      	lsls	r1, r1, #25
 8009cf4:	bf48      	it	mi
 8009cf6:	b2ad      	uxthmi	r5, r5
 8009cf8:	2f6f      	cmp	r7, #111	@ 0x6f
 8009cfa:	4853      	ldr	r0, [pc, #332]	@ (8009e48 <_printf_i+0x238>)
 8009cfc:	6033      	str	r3, [r6, #0]
 8009cfe:	bf14      	ite	ne
 8009d00:	230a      	movne	r3, #10
 8009d02:	2308      	moveq	r3, #8
 8009d04:	2100      	movs	r1, #0
 8009d06:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009d0a:	6866      	ldr	r6, [r4, #4]
 8009d0c:	60a6      	str	r6, [r4, #8]
 8009d0e:	2e00      	cmp	r6, #0
 8009d10:	bfa2      	ittt	ge
 8009d12:	6821      	ldrge	r1, [r4, #0]
 8009d14:	f021 0104 	bicge.w	r1, r1, #4
 8009d18:	6021      	strge	r1, [r4, #0]
 8009d1a:	b90d      	cbnz	r5, 8009d20 <_printf_i+0x110>
 8009d1c:	2e00      	cmp	r6, #0
 8009d1e:	d04b      	beq.n	8009db8 <_printf_i+0x1a8>
 8009d20:	4616      	mov	r6, r2
 8009d22:	fbb5 f1f3 	udiv	r1, r5, r3
 8009d26:	fb03 5711 	mls	r7, r3, r1, r5
 8009d2a:	5dc7      	ldrb	r7, [r0, r7]
 8009d2c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009d30:	462f      	mov	r7, r5
 8009d32:	42bb      	cmp	r3, r7
 8009d34:	460d      	mov	r5, r1
 8009d36:	d9f4      	bls.n	8009d22 <_printf_i+0x112>
 8009d38:	2b08      	cmp	r3, #8
 8009d3a:	d10b      	bne.n	8009d54 <_printf_i+0x144>
 8009d3c:	6823      	ldr	r3, [r4, #0]
 8009d3e:	07df      	lsls	r7, r3, #31
 8009d40:	d508      	bpl.n	8009d54 <_printf_i+0x144>
 8009d42:	6923      	ldr	r3, [r4, #16]
 8009d44:	6861      	ldr	r1, [r4, #4]
 8009d46:	4299      	cmp	r1, r3
 8009d48:	bfde      	ittt	le
 8009d4a:	2330      	movle	r3, #48	@ 0x30
 8009d4c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009d50:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8009d54:	1b92      	subs	r2, r2, r6
 8009d56:	6122      	str	r2, [r4, #16]
 8009d58:	f8cd a000 	str.w	sl, [sp]
 8009d5c:	464b      	mov	r3, r9
 8009d5e:	aa03      	add	r2, sp, #12
 8009d60:	4621      	mov	r1, r4
 8009d62:	4640      	mov	r0, r8
 8009d64:	f7ff fee6 	bl	8009b34 <_printf_common>
 8009d68:	3001      	adds	r0, #1
 8009d6a:	d14a      	bne.n	8009e02 <_printf_i+0x1f2>
 8009d6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009d70:	b004      	add	sp, #16
 8009d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d76:	6823      	ldr	r3, [r4, #0]
 8009d78:	f043 0320 	orr.w	r3, r3, #32
 8009d7c:	6023      	str	r3, [r4, #0]
 8009d7e:	4833      	ldr	r0, [pc, #204]	@ (8009e4c <_printf_i+0x23c>)
 8009d80:	2778      	movs	r7, #120	@ 0x78
 8009d82:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009d86:	6823      	ldr	r3, [r4, #0]
 8009d88:	6831      	ldr	r1, [r6, #0]
 8009d8a:	061f      	lsls	r7, r3, #24
 8009d8c:	f851 5b04 	ldr.w	r5, [r1], #4
 8009d90:	d402      	bmi.n	8009d98 <_printf_i+0x188>
 8009d92:	065f      	lsls	r7, r3, #25
 8009d94:	bf48      	it	mi
 8009d96:	b2ad      	uxthmi	r5, r5
 8009d98:	6031      	str	r1, [r6, #0]
 8009d9a:	07d9      	lsls	r1, r3, #31
 8009d9c:	bf44      	itt	mi
 8009d9e:	f043 0320 	orrmi.w	r3, r3, #32
 8009da2:	6023      	strmi	r3, [r4, #0]
 8009da4:	b11d      	cbz	r5, 8009dae <_printf_i+0x19e>
 8009da6:	2310      	movs	r3, #16
 8009da8:	e7ac      	b.n	8009d04 <_printf_i+0xf4>
 8009daa:	4827      	ldr	r0, [pc, #156]	@ (8009e48 <_printf_i+0x238>)
 8009dac:	e7e9      	b.n	8009d82 <_printf_i+0x172>
 8009dae:	6823      	ldr	r3, [r4, #0]
 8009db0:	f023 0320 	bic.w	r3, r3, #32
 8009db4:	6023      	str	r3, [r4, #0]
 8009db6:	e7f6      	b.n	8009da6 <_printf_i+0x196>
 8009db8:	4616      	mov	r6, r2
 8009dba:	e7bd      	b.n	8009d38 <_printf_i+0x128>
 8009dbc:	6833      	ldr	r3, [r6, #0]
 8009dbe:	6825      	ldr	r5, [r4, #0]
 8009dc0:	6961      	ldr	r1, [r4, #20]
 8009dc2:	1d18      	adds	r0, r3, #4
 8009dc4:	6030      	str	r0, [r6, #0]
 8009dc6:	062e      	lsls	r6, r5, #24
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	d501      	bpl.n	8009dd0 <_printf_i+0x1c0>
 8009dcc:	6019      	str	r1, [r3, #0]
 8009dce:	e002      	b.n	8009dd6 <_printf_i+0x1c6>
 8009dd0:	0668      	lsls	r0, r5, #25
 8009dd2:	d5fb      	bpl.n	8009dcc <_printf_i+0x1bc>
 8009dd4:	8019      	strh	r1, [r3, #0]
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	6123      	str	r3, [r4, #16]
 8009dda:	4616      	mov	r6, r2
 8009ddc:	e7bc      	b.n	8009d58 <_printf_i+0x148>
 8009dde:	6833      	ldr	r3, [r6, #0]
 8009de0:	1d1a      	adds	r2, r3, #4
 8009de2:	6032      	str	r2, [r6, #0]
 8009de4:	681e      	ldr	r6, [r3, #0]
 8009de6:	6862      	ldr	r2, [r4, #4]
 8009de8:	2100      	movs	r1, #0
 8009dea:	4630      	mov	r0, r6
 8009dec:	f7f6 fa10 	bl	8000210 <memchr>
 8009df0:	b108      	cbz	r0, 8009df6 <_printf_i+0x1e6>
 8009df2:	1b80      	subs	r0, r0, r6
 8009df4:	6060      	str	r0, [r4, #4]
 8009df6:	6863      	ldr	r3, [r4, #4]
 8009df8:	6123      	str	r3, [r4, #16]
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009e00:	e7aa      	b.n	8009d58 <_printf_i+0x148>
 8009e02:	6923      	ldr	r3, [r4, #16]
 8009e04:	4632      	mov	r2, r6
 8009e06:	4649      	mov	r1, r9
 8009e08:	4640      	mov	r0, r8
 8009e0a:	47d0      	blx	sl
 8009e0c:	3001      	adds	r0, #1
 8009e0e:	d0ad      	beq.n	8009d6c <_printf_i+0x15c>
 8009e10:	6823      	ldr	r3, [r4, #0]
 8009e12:	079b      	lsls	r3, r3, #30
 8009e14:	d413      	bmi.n	8009e3e <_printf_i+0x22e>
 8009e16:	68e0      	ldr	r0, [r4, #12]
 8009e18:	9b03      	ldr	r3, [sp, #12]
 8009e1a:	4298      	cmp	r0, r3
 8009e1c:	bfb8      	it	lt
 8009e1e:	4618      	movlt	r0, r3
 8009e20:	e7a6      	b.n	8009d70 <_printf_i+0x160>
 8009e22:	2301      	movs	r3, #1
 8009e24:	4632      	mov	r2, r6
 8009e26:	4649      	mov	r1, r9
 8009e28:	4640      	mov	r0, r8
 8009e2a:	47d0      	blx	sl
 8009e2c:	3001      	adds	r0, #1
 8009e2e:	d09d      	beq.n	8009d6c <_printf_i+0x15c>
 8009e30:	3501      	adds	r5, #1
 8009e32:	68e3      	ldr	r3, [r4, #12]
 8009e34:	9903      	ldr	r1, [sp, #12]
 8009e36:	1a5b      	subs	r3, r3, r1
 8009e38:	42ab      	cmp	r3, r5
 8009e3a:	dcf2      	bgt.n	8009e22 <_printf_i+0x212>
 8009e3c:	e7eb      	b.n	8009e16 <_printf_i+0x206>
 8009e3e:	2500      	movs	r5, #0
 8009e40:	f104 0619 	add.w	r6, r4, #25
 8009e44:	e7f5      	b.n	8009e32 <_printf_i+0x222>
 8009e46:	bf00      	nop
 8009e48:	0800c47a 	.word	0x0800c47a
 8009e4c:	0800c48b 	.word	0x0800c48b

08009e50 <siprintf>:
 8009e50:	b40e      	push	{r1, r2, r3}
 8009e52:	b500      	push	{lr}
 8009e54:	b09c      	sub	sp, #112	@ 0x70
 8009e56:	ab1d      	add	r3, sp, #116	@ 0x74
 8009e58:	9002      	str	r0, [sp, #8]
 8009e5a:	9006      	str	r0, [sp, #24]
 8009e5c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009e60:	4809      	ldr	r0, [pc, #36]	@ (8009e88 <siprintf+0x38>)
 8009e62:	9107      	str	r1, [sp, #28]
 8009e64:	9104      	str	r1, [sp, #16]
 8009e66:	4909      	ldr	r1, [pc, #36]	@ (8009e8c <siprintf+0x3c>)
 8009e68:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e6c:	9105      	str	r1, [sp, #20]
 8009e6e:	6800      	ldr	r0, [r0, #0]
 8009e70:	9301      	str	r3, [sp, #4]
 8009e72:	a902      	add	r1, sp, #8
 8009e74:	f000 ffac 	bl	800add0 <_svfiprintf_r>
 8009e78:	9b02      	ldr	r3, [sp, #8]
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	701a      	strb	r2, [r3, #0]
 8009e7e:	b01c      	add	sp, #112	@ 0x70
 8009e80:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e84:	b003      	add	sp, #12
 8009e86:	4770      	bx	lr
 8009e88:	20000018 	.word	0x20000018
 8009e8c:	ffff0208 	.word	0xffff0208

08009e90 <std>:
 8009e90:	2300      	movs	r3, #0
 8009e92:	b510      	push	{r4, lr}
 8009e94:	4604      	mov	r4, r0
 8009e96:	e9c0 3300 	strd	r3, r3, [r0]
 8009e9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009e9e:	6083      	str	r3, [r0, #8]
 8009ea0:	8181      	strh	r1, [r0, #12]
 8009ea2:	6643      	str	r3, [r0, #100]	@ 0x64
 8009ea4:	81c2      	strh	r2, [r0, #14]
 8009ea6:	6183      	str	r3, [r0, #24]
 8009ea8:	4619      	mov	r1, r3
 8009eaa:	2208      	movs	r2, #8
 8009eac:	305c      	adds	r0, #92	@ 0x5c
 8009eae:	f000 f8b1 	bl	800a014 <memset>
 8009eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8009ee8 <std+0x58>)
 8009eb4:	6263      	str	r3, [r4, #36]	@ 0x24
 8009eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8009eec <std+0x5c>)
 8009eb8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009eba:	4b0d      	ldr	r3, [pc, #52]	@ (8009ef0 <std+0x60>)
 8009ebc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009ebe:	4b0d      	ldr	r3, [pc, #52]	@ (8009ef4 <std+0x64>)
 8009ec0:	6323      	str	r3, [r4, #48]	@ 0x30
 8009ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8009ef8 <std+0x68>)
 8009ec4:	6224      	str	r4, [r4, #32]
 8009ec6:	429c      	cmp	r4, r3
 8009ec8:	d006      	beq.n	8009ed8 <std+0x48>
 8009eca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009ece:	4294      	cmp	r4, r2
 8009ed0:	d002      	beq.n	8009ed8 <std+0x48>
 8009ed2:	33d0      	adds	r3, #208	@ 0xd0
 8009ed4:	429c      	cmp	r4, r3
 8009ed6:	d105      	bne.n	8009ee4 <std+0x54>
 8009ed8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009edc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ee0:	f000 b8c8 	b.w	800a074 <__retarget_lock_init_recursive>
 8009ee4:	bd10      	pop	{r4, pc}
 8009ee6:	bf00      	nop
 8009ee8:	0800b991 	.word	0x0800b991
 8009eec:	0800b9b3 	.word	0x0800b9b3
 8009ef0:	0800b9eb 	.word	0x0800b9eb
 8009ef4:	0800ba0f 	.word	0x0800ba0f
 8009ef8:	2001f36c 	.word	0x2001f36c

08009efc <stdio_exit_handler>:
 8009efc:	4a02      	ldr	r2, [pc, #8]	@ (8009f08 <stdio_exit_handler+0xc>)
 8009efe:	4903      	ldr	r1, [pc, #12]	@ (8009f0c <stdio_exit_handler+0x10>)
 8009f00:	4803      	ldr	r0, [pc, #12]	@ (8009f10 <stdio_exit_handler+0x14>)
 8009f02:	f000 b869 	b.w	8009fd8 <_fwalk_sglue>
 8009f06:	bf00      	nop
 8009f08:	2000000c 	.word	0x2000000c
 8009f0c:	0800b225 	.word	0x0800b225
 8009f10:	2000001c 	.word	0x2000001c

08009f14 <cleanup_stdio>:
 8009f14:	6841      	ldr	r1, [r0, #4]
 8009f16:	4b0c      	ldr	r3, [pc, #48]	@ (8009f48 <cleanup_stdio+0x34>)
 8009f18:	4299      	cmp	r1, r3
 8009f1a:	b510      	push	{r4, lr}
 8009f1c:	4604      	mov	r4, r0
 8009f1e:	d001      	beq.n	8009f24 <cleanup_stdio+0x10>
 8009f20:	f001 f980 	bl	800b224 <_fflush_r>
 8009f24:	68a1      	ldr	r1, [r4, #8]
 8009f26:	4b09      	ldr	r3, [pc, #36]	@ (8009f4c <cleanup_stdio+0x38>)
 8009f28:	4299      	cmp	r1, r3
 8009f2a:	d002      	beq.n	8009f32 <cleanup_stdio+0x1e>
 8009f2c:	4620      	mov	r0, r4
 8009f2e:	f001 f979 	bl	800b224 <_fflush_r>
 8009f32:	68e1      	ldr	r1, [r4, #12]
 8009f34:	4b06      	ldr	r3, [pc, #24]	@ (8009f50 <cleanup_stdio+0x3c>)
 8009f36:	4299      	cmp	r1, r3
 8009f38:	d004      	beq.n	8009f44 <cleanup_stdio+0x30>
 8009f3a:	4620      	mov	r0, r4
 8009f3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f40:	f001 b970 	b.w	800b224 <_fflush_r>
 8009f44:	bd10      	pop	{r4, pc}
 8009f46:	bf00      	nop
 8009f48:	2001f36c 	.word	0x2001f36c
 8009f4c:	2001f3d4 	.word	0x2001f3d4
 8009f50:	2001f43c 	.word	0x2001f43c

08009f54 <global_stdio_init.part.0>:
 8009f54:	b510      	push	{r4, lr}
 8009f56:	4b0b      	ldr	r3, [pc, #44]	@ (8009f84 <global_stdio_init.part.0+0x30>)
 8009f58:	4c0b      	ldr	r4, [pc, #44]	@ (8009f88 <global_stdio_init.part.0+0x34>)
 8009f5a:	4a0c      	ldr	r2, [pc, #48]	@ (8009f8c <global_stdio_init.part.0+0x38>)
 8009f5c:	601a      	str	r2, [r3, #0]
 8009f5e:	4620      	mov	r0, r4
 8009f60:	2200      	movs	r2, #0
 8009f62:	2104      	movs	r1, #4
 8009f64:	f7ff ff94 	bl	8009e90 <std>
 8009f68:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009f6c:	2201      	movs	r2, #1
 8009f6e:	2109      	movs	r1, #9
 8009f70:	f7ff ff8e 	bl	8009e90 <std>
 8009f74:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009f78:	2202      	movs	r2, #2
 8009f7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f7e:	2112      	movs	r1, #18
 8009f80:	f7ff bf86 	b.w	8009e90 <std>
 8009f84:	2001f4a4 	.word	0x2001f4a4
 8009f88:	2001f36c 	.word	0x2001f36c
 8009f8c:	08009efd 	.word	0x08009efd

08009f90 <__sfp_lock_acquire>:
 8009f90:	4801      	ldr	r0, [pc, #4]	@ (8009f98 <__sfp_lock_acquire+0x8>)
 8009f92:	f000 b870 	b.w	800a076 <__retarget_lock_acquire_recursive>
 8009f96:	bf00      	nop
 8009f98:	2001f4a9 	.word	0x2001f4a9

08009f9c <__sfp_lock_release>:
 8009f9c:	4801      	ldr	r0, [pc, #4]	@ (8009fa4 <__sfp_lock_release+0x8>)
 8009f9e:	f000 b86b 	b.w	800a078 <__retarget_lock_release_recursive>
 8009fa2:	bf00      	nop
 8009fa4:	2001f4a9 	.word	0x2001f4a9

08009fa8 <__sinit>:
 8009fa8:	b510      	push	{r4, lr}
 8009faa:	4604      	mov	r4, r0
 8009fac:	f7ff fff0 	bl	8009f90 <__sfp_lock_acquire>
 8009fb0:	6a23      	ldr	r3, [r4, #32]
 8009fb2:	b11b      	cbz	r3, 8009fbc <__sinit+0x14>
 8009fb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009fb8:	f7ff bff0 	b.w	8009f9c <__sfp_lock_release>
 8009fbc:	4b04      	ldr	r3, [pc, #16]	@ (8009fd0 <__sinit+0x28>)
 8009fbe:	6223      	str	r3, [r4, #32]
 8009fc0:	4b04      	ldr	r3, [pc, #16]	@ (8009fd4 <__sinit+0x2c>)
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d1f5      	bne.n	8009fb4 <__sinit+0xc>
 8009fc8:	f7ff ffc4 	bl	8009f54 <global_stdio_init.part.0>
 8009fcc:	e7f2      	b.n	8009fb4 <__sinit+0xc>
 8009fce:	bf00      	nop
 8009fd0:	08009f15 	.word	0x08009f15
 8009fd4:	2001f4a4 	.word	0x2001f4a4

08009fd8 <_fwalk_sglue>:
 8009fd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fdc:	4607      	mov	r7, r0
 8009fde:	4688      	mov	r8, r1
 8009fe0:	4614      	mov	r4, r2
 8009fe2:	2600      	movs	r6, #0
 8009fe4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009fe8:	f1b9 0901 	subs.w	r9, r9, #1
 8009fec:	d505      	bpl.n	8009ffa <_fwalk_sglue+0x22>
 8009fee:	6824      	ldr	r4, [r4, #0]
 8009ff0:	2c00      	cmp	r4, #0
 8009ff2:	d1f7      	bne.n	8009fe4 <_fwalk_sglue+0xc>
 8009ff4:	4630      	mov	r0, r6
 8009ff6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ffa:	89ab      	ldrh	r3, [r5, #12]
 8009ffc:	2b01      	cmp	r3, #1
 8009ffe:	d907      	bls.n	800a010 <_fwalk_sglue+0x38>
 800a000:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a004:	3301      	adds	r3, #1
 800a006:	d003      	beq.n	800a010 <_fwalk_sglue+0x38>
 800a008:	4629      	mov	r1, r5
 800a00a:	4638      	mov	r0, r7
 800a00c:	47c0      	blx	r8
 800a00e:	4306      	orrs	r6, r0
 800a010:	3568      	adds	r5, #104	@ 0x68
 800a012:	e7e9      	b.n	8009fe8 <_fwalk_sglue+0x10>

0800a014 <memset>:
 800a014:	4402      	add	r2, r0
 800a016:	4603      	mov	r3, r0
 800a018:	4293      	cmp	r3, r2
 800a01a:	d100      	bne.n	800a01e <memset+0xa>
 800a01c:	4770      	bx	lr
 800a01e:	f803 1b01 	strb.w	r1, [r3], #1
 800a022:	e7f9      	b.n	800a018 <memset+0x4>

0800a024 <_localeconv_r>:
 800a024:	4800      	ldr	r0, [pc, #0]	@ (800a028 <_localeconv_r+0x4>)
 800a026:	4770      	bx	lr
 800a028:	20000158 	.word	0x20000158

0800a02c <__libc_init_array>:
 800a02c:	b570      	push	{r4, r5, r6, lr}
 800a02e:	4d0d      	ldr	r5, [pc, #52]	@ (800a064 <__libc_init_array+0x38>)
 800a030:	4c0d      	ldr	r4, [pc, #52]	@ (800a068 <__libc_init_array+0x3c>)
 800a032:	1b64      	subs	r4, r4, r5
 800a034:	10a4      	asrs	r4, r4, #2
 800a036:	2600      	movs	r6, #0
 800a038:	42a6      	cmp	r6, r4
 800a03a:	d109      	bne.n	800a050 <__libc_init_array+0x24>
 800a03c:	4d0b      	ldr	r5, [pc, #44]	@ (800a06c <__libc_init_array+0x40>)
 800a03e:	4c0c      	ldr	r4, [pc, #48]	@ (800a070 <__libc_init_array+0x44>)
 800a040:	f002 f940 	bl	800c2c4 <_init>
 800a044:	1b64      	subs	r4, r4, r5
 800a046:	10a4      	asrs	r4, r4, #2
 800a048:	2600      	movs	r6, #0
 800a04a:	42a6      	cmp	r6, r4
 800a04c:	d105      	bne.n	800a05a <__libc_init_array+0x2e>
 800a04e:	bd70      	pop	{r4, r5, r6, pc}
 800a050:	f855 3b04 	ldr.w	r3, [r5], #4
 800a054:	4798      	blx	r3
 800a056:	3601      	adds	r6, #1
 800a058:	e7ee      	b.n	800a038 <__libc_init_array+0xc>
 800a05a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a05e:	4798      	blx	r3
 800a060:	3601      	adds	r6, #1
 800a062:	e7f2      	b.n	800a04a <__libc_init_array+0x1e>
 800a064:	0800c7e0 	.word	0x0800c7e0
 800a068:	0800c7e0 	.word	0x0800c7e0
 800a06c:	0800c7e0 	.word	0x0800c7e0
 800a070:	0800c7e4 	.word	0x0800c7e4

0800a074 <__retarget_lock_init_recursive>:
 800a074:	4770      	bx	lr

0800a076 <__retarget_lock_acquire_recursive>:
 800a076:	4770      	bx	lr

0800a078 <__retarget_lock_release_recursive>:
 800a078:	4770      	bx	lr

0800a07a <quorem>:
 800a07a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a07e:	6903      	ldr	r3, [r0, #16]
 800a080:	690c      	ldr	r4, [r1, #16]
 800a082:	42a3      	cmp	r3, r4
 800a084:	4607      	mov	r7, r0
 800a086:	db7e      	blt.n	800a186 <quorem+0x10c>
 800a088:	3c01      	subs	r4, #1
 800a08a:	f101 0814 	add.w	r8, r1, #20
 800a08e:	00a3      	lsls	r3, r4, #2
 800a090:	f100 0514 	add.w	r5, r0, #20
 800a094:	9300      	str	r3, [sp, #0]
 800a096:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a09a:	9301      	str	r3, [sp, #4]
 800a09c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a0a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a0a4:	3301      	adds	r3, #1
 800a0a6:	429a      	cmp	r2, r3
 800a0a8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a0ac:	fbb2 f6f3 	udiv	r6, r2, r3
 800a0b0:	d32e      	bcc.n	800a110 <quorem+0x96>
 800a0b2:	f04f 0a00 	mov.w	sl, #0
 800a0b6:	46c4      	mov	ip, r8
 800a0b8:	46ae      	mov	lr, r5
 800a0ba:	46d3      	mov	fp, sl
 800a0bc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a0c0:	b298      	uxth	r0, r3
 800a0c2:	fb06 a000 	mla	r0, r6, r0, sl
 800a0c6:	0c02      	lsrs	r2, r0, #16
 800a0c8:	0c1b      	lsrs	r3, r3, #16
 800a0ca:	fb06 2303 	mla	r3, r6, r3, r2
 800a0ce:	f8de 2000 	ldr.w	r2, [lr]
 800a0d2:	b280      	uxth	r0, r0
 800a0d4:	b292      	uxth	r2, r2
 800a0d6:	1a12      	subs	r2, r2, r0
 800a0d8:	445a      	add	r2, fp
 800a0da:	f8de 0000 	ldr.w	r0, [lr]
 800a0de:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a0e2:	b29b      	uxth	r3, r3
 800a0e4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a0e8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a0ec:	b292      	uxth	r2, r2
 800a0ee:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a0f2:	45e1      	cmp	r9, ip
 800a0f4:	f84e 2b04 	str.w	r2, [lr], #4
 800a0f8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a0fc:	d2de      	bcs.n	800a0bc <quorem+0x42>
 800a0fe:	9b00      	ldr	r3, [sp, #0]
 800a100:	58eb      	ldr	r3, [r5, r3]
 800a102:	b92b      	cbnz	r3, 800a110 <quorem+0x96>
 800a104:	9b01      	ldr	r3, [sp, #4]
 800a106:	3b04      	subs	r3, #4
 800a108:	429d      	cmp	r5, r3
 800a10a:	461a      	mov	r2, r3
 800a10c:	d32f      	bcc.n	800a16e <quorem+0xf4>
 800a10e:	613c      	str	r4, [r7, #16]
 800a110:	4638      	mov	r0, r7
 800a112:	f001 fb35 	bl	800b780 <__mcmp>
 800a116:	2800      	cmp	r0, #0
 800a118:	db25      	blt.n	800a166 <quorem+0xec>
 800a11a:	4629      	mov	r1, r5
 800a11c:	2000      	movs	r0, #0
 800a11e:	f858 2b04 	ldr.w	r2, [r8], #4
 800a122:	f8d1 c000 	ldr.w	ip, [r1]
 800a126:	fa1f fe82 	uxth.w	lr, r2
 800a12a:	fa1f f38c 	uxth.w	r3, ip
 800a12e:	eba3 030e 	sub.w	r3, r3, lr
 800a132:	4403      	add	r3, r0
 800a134:	0c12      	lsrs	r2, r2, #16
 800a136:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a13a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a13e:	b29b      	uxth	r3, r3
 800a140:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a144:	45c1      	cmp	r9, r8
 800a146:	f841 3b04 	str.w	r3, [r1], #4
 800a14a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a14e:	d2e6      	bcs.n	800a11e <quorem+0xa4>
 800a150:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a154:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a158:	b922      	cbnz	r2, 800a164 <quorem+0xea>
 800a15a:	3b04      	subs	r3, #4
 800a15c:	429d      	cmp	r5, r3
 800a15e:	461a      	mov	r2, r3
 800a160:	d30b      	bcc.n	800a17a <quorem+0x100>
 800a162:	613c      	str	r4, [r7, #16]
 800a164:	3601      	adds	r6, #1
 800a166:	4630      	mov	r0, r6
 800a168:	b003      	add	sp, #12
 800a16a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a16e:	6812      	ldr	r2, [r2, #0]
 800a170:	3b04      	subs	r3, #4
 800a172:	2a00      	cmp	r2, #0
 800a174:	d1cb      	bne.n	800a10e <quorem+0x94>
 800a176:	3c01      	subs	r4, #1
 800a178:	e7c6      	b.n	800a108 <quorem+0x8e>
 800a17a:	6812      	ldr	r2, [r2, #0]
 800a17c:	3b04      	subs	r3, #4
 800a17e:	2a00      	cmp	r2, #0
 800a180:	d1ef      	bne.n	800a162 <quorem+0xe8>
 800a182:	3c01      	subs	r4, #1
 800a184:	e7ea      	b.n	800a15c <quorem+0xe2>
 800a186:	2000      	movs	r0, #0
 800a188:	e7ee      	b.n	800a168 <quorem+0xee>
 800a18a:	0000      	movs	r0, r0
 800a18c:	0000      	movs	r0, r0
	...

0800a190 <_dtoa_r>:
 800a190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a194:	69c7      	ldr	r7, [r0, #28]
 800a196:	b099      	sub	sp, #100	@ 0x64
 800a198:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a19c:	ec55 4b10 	vmov	r4, r5, d0
 800a1a0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a1a2:	9109      	str	r1, [sp, #36]	@ 0x24
 800a1a4:	4683      	mov	fp, r0
 800a1a6:	920e      	str	r2, [sp, #56]	@ 0x38
 800a1a8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a1aa:	b97f      	cbnz	r7, 800a1cc <_dtoa_r+0x3c>
 800a1ac:	2010      	movs	r0, #16
 800a1ae:	f000 ff0b 	bl	800afc8 <malloc>
 800a1b2:	4602      	mov	r2, r0
 800a1b4:	f8cb 001c 	str.w	r0, [fp, #28]
 800a1b8:	b920      	cbnz	r0, 800a1c4 <_dtoa_r+0x34>
 800a1ba:	4ba7      	ldr	r3, [pc, #668]	@ (800a458 <_dtoa_r+0x2c8>)
 800a1bc:	21ef      	movs	r1, #239	@ 0xef
 800a1be:	48a7      	ldr	r0, [pc, #668]	@ (800a45c <_dtoa_r+0x2cc>)
 800a1c0:	f001 fcd6 	bl	800bb70 <__assert_func>
 800a1c4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a1c8:	6007      	str	r7, [r0, #0]
 800a1ca:	60c7      	str	r7, [r0, #12]
 800a1cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a1d0:	6819      	ldr	r1, [r3, #0]
 800a1d2:	b159      	cbz	r1, 800a1ec <_dtoa_r+0x5c>
 800a1d4:	685a      	ldr	r2, [r3, #4]
 800a1d6:	604a      	str	r2, [r1, #4]
 800a1d8:	2301      	movs	r3, #1
 800a1da:	4093      	lsls	r3, r2
 800a1dc:	608b      	str	r3, [r1, #8]
 800a1de:	4658      	mov	r0, fp
 800a1e0:	f001 f894 	bl	800b30c <_Bfree>
 800a1e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	601a      	str	r2, [r3, #0]
 800a1ec:	1e2b      	subs	r3, r5, #0
 800a1ee:	bfb9      	ittee	lt
 800a1f0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a1f4:	9303      	strlt	r3, [sp, #12]
 800a1f6:	2300      	movge	r3, #0
 800a1f8:	6033      	strge	r3, [r6, #0]
 800a1fa:	9f03      	ldr	r7, [sp, #12]
 800a1fc:	4b98      	ldr	r3, [pc, #608]	@ (800a460 <_dtoa_r+0x2d0>)
 800a1fe:	bfbc      	itt	lt
 800a200:	2201      	movlt	r2, #1
 800a202:	6032      	strlt	r2, [r6, #0]
 800a204:	43bb      	bics	r3, r7
 800a206:	d112      	bne.n	800a22e <_dtoa_r+0x9e>
 800a208:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a20a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a20e:	6013      	str	r3, [r2, #0]
 800a210:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a214:	4323      	orrs	r3, r4
 800a216:	f000 854d 	beq.w	800acb4 <_dtoa_r+0xb24>
 800a21a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a21c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a474 <_dtoa_r+0x2e4>
 800a220:	2b00      	cmp	r3, #0
 800a222:	f000 854f 	beq.w	800acc4 <_dtoa_r+0xb34>
 800a226:	f10a 0303 	add.w	r3, sl, #3
 800a22a:	f000 bd49 	b.w	800acc0 <_dtoa_r+0xb30>
 800a22e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a232:	2200      	movs	r2, #0
 800a234:	ec51 0b17 	vmov	r0, r1, d7
 800a238:	2300      	movs	r3, #0
 800a23a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a23e:	f7f6 fc63 	bl	8000b08 <__aeabi_dcmpeq>
 800a242:	4680      	mov	r8, r0
 800a244:	b158      	cbz	r0, 800a25e <_dtoa_r+0xce>
 800a246:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a248:	2301      	movs	r3, #1
 800a24a:	6013      	str	r3, [r2, #0]
 800a24c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a24e:	b113      	cbz	r3, 800a256 <_dtoa_r+0xc6>
 800a250:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a252:	4b84      	ldr	r3, [pc, #528]	@ (800a464 <_dtoa_r+0x2d4>)
 800a254:	6013      	str	r3, [r2, #0]
 800a256:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800a478 <_dtoa_r+0x2e8>
 800a25a:	f000 bd33 	b.w	800acc4 <_dtoa_r+0xb34>
 800a25e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a262:	aa16      	add	r2, sp, #88	@ 0x58
 800a264:	a917      	add	r1, sp, #92	@ 0x5c
 800a266:	4658      	mov	r0, fp
 800a268:	f001 fb3a 	bl	800b8e0 <__d2b>
 800a26c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a270:	4681      	mov	r9, r0
 800a272:	2e00      	cmp	r6, #0
 800a274:	d077      	beq.n	800a366 <_dtoa_r+0x1d6>
 800a276:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a278:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800a27c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a280:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a284:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a288:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a28c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a290:	4619      	mov	r1, r3
 800a292:	2200      	movs	r2, #0
 800a294:	4b74      	ldr	r3, [pc, #464]	@ (800a468 <_dtoa_r+0x2d8>)
 800a296:	f7f6 f817 	bl	80002c8 <__aeabi_dsub>
 800a29a:	a369      	add	r3, pc, #420	@ (adr r3, 800a440 <_dtoa_r+0x2b0>)
 800a29c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2a0:	f7f6 f9ca 	bl	8000638 <__aeabi_dmul>
 800a2a4:	a368      	add	r3, pc, #416	@ (adr r3, 800a448 <_dtoa_r+0x2b8>)
 800a2a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2aa:	f7f6 f80f 	bl	80002cc <__adddf3>
 800a2ae:	4604      	mov	r4, r0
 800a2b0:	4630      	mov	r0, r6
 800a2b2:	460d      	mov	r5, r1
 800a2b4:	f7f6 f956 	bl	8000564 <__aeabi_i2d>
 800a2b8:	a365      	add	r3, pc, #404	@ (adr r3, 800a450 <_dtoa_r+0x2c0>)
 800a2ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2be:	f7f6 f9bb 	bl	8000638 <__aeabi_dmul>
 800a2c2:	4602      	mov	r2, r0
 800a2c4:	460b      	mov	r3, r1
 800a2c6:	4620      	mov	r0, r4
 800a2c8:	4629      	mov	r1, r5
 800a2ca:	f7f5 ffff 	bl	80002cc <__adddf3>
 800a2ce:	4604      	mov	r4, r0
 800a2d0:	460d      	mov	r5, r1
 800a2d2:	f7f6 fc61 	bl	8000b98 <__aeabi_d2iz>
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	4607      	mov	r7, r0
 800a2da:	2300      	movs	r3, #0
 800a2dc:	4620      	mov	r0, r4
 800a2de:	4629      	mov	r1, r5
 800a2e0:	f7f6 fc1c 	bl	8000b1c <__aeabi_dcmplt>
 800a2e4:	b140      	cbz	r0, 800a2f8 <_dtoa_r+0x168>
 800a2e6:	4638      	mov	r0, r7
 800a2e8:	f7f6 f93c 	bl	8000564 <__aeabi_i2d>
 800a2ec:	4622      	mov	r2, r4
 800a2ee:	462b      	mov	r3, r5
 800a2f0:	f7f6 fc0a 	bl	8000b08 <__aeabi_dcmpeq>
 800a2f4:	b900      	cbnz	r0, 800a2f8 <_dtoa_r+0x168>
 800a2f6:	3f01      	subs	r7, #1
 800a2f8:	2f16      	cmp	r7, #22
 800a2fa:	d851      	bhi.n	800a3a0 <_dtoa_r+0x210>
 800a2fc:	4b5b      	ldr	r3, [pc, #364]	@ (800a46c <_dtoa_r+0x2dc>)
 800a2fe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a302:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a306:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a30a:	f7f6 fc07 	bl	8000b1c <__aeabi_dcmplt>
 800a30e:	2800      	cmp	r0, #0
 800a310:	d048      	beq.n	800a3a4 <_dtoa_r+0x214>
 800a312:	3f01      	subs	r7, #1
 800a314:	2300      	movs	r3, #0
 800a316:	9312      	str	r3, [sp, #72]	@ 0x48
 800a318:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a31a:	1b9b      	subs	r3, r3, r6
 800a31c:	1e5a      	subs	r2, r3, #1
 800a31e:	bf44      	itt	mi
 800a320:	f1c3 0801 	rsbmi	r8, r3, #1
 800a324:	2300      	movmi	r3, #0
 800a326:	9208      	str	r2, [sp, #32]
 800a328:	bf54      	ite	pl
 800a32a:	f04f 0800 	movpl.w	r8, #0
 800a32e:	9308      	strmi	r3, [sp, #32]
 800a330:	2f00      	cmp	r7, #0
 800a332:	db39      	blt.n	800a3a8 <_dtoa_r+0x218>
 800a334:	9b08      	ldr	r3, [sp, #32]
 800a336:	970f      	str	r7, [sp, #60]	@ 0x3c
 800a338:	443b      	add	r3, r7
 800a33a:	9308      	str	r3, [sp, #32]
 800a33c:	2300      	movs	r3, #0
 800a33e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a340:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a342:	2b09      	cmp	r3, #9
 800a344:	d864      	bhi.n	800a410 <_dtoa_r+0x280>
 800a346:	2b05      	cmp	r3, #5
 800a348:	bfc4      	itt	gt
 800a34a:	3b04      	subgt	r3, #4
 800a34c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800a34e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a350:	f1a3 0302 	sub.w	r3, r3, #2
 800a354:	bfcc      	ite	gt
 800a356:	2400      	movgt	r4, #0
 800a358:	2401      	movle	r4, #1
 800a35a:	2b03      	cmp	r3, #3
 800a35c:	d863      	bhi.n	800a426 <_dtoa_r+0x296>
 800a35e:	e8df f003 	tbb	[pc, r3]
 800a362:	372a      	.short	0x372a
 800a364:	5535      	.short	0x5535
 800a366:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800a36a:	441e      	add	r6, r3
 800a36c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a370:	2b20      	cmp	r3, #32
 800a372:	bfc1      	itttt	gt
 800a374:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a378:	409f      	lslgt	r7, r3
 800a37a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a37e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a382:	bfd6      	itet	le
 800a384:	f1c3 0320 	rsble	r3, r3, #32
 800a388:	ea47 0003 	orrgt.w	r0, r7, r3
 800a38c:	fa04 f003 	lslle.w	r0, r4, r3
 800a390:	f7f6 f8d8 	bl	8000544 <__aeabi_ui2d>
 800a394:	2201      	movs	r2, #1
 800a396:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a39a:	3e01      	subs	r6, #1
 800a39c:	9214      	str	r2, [sp, #80]	@ 0x50
 800a39e:	e777      	b.n	800a290 <_dtoa_r+0x100>
 800a3a0:	2301      	movs	r3, #1
 800a3a2:	e7b8      	b.n	800a316 <_dtoa_r+0x186>
 800a3a4:	9012      	str	r0, [sp, #72]	@ 0x48
 800a3a6:	e7b7      	b.n	800a318 <_dtoa_r+0x188>
 800a3a8:	427b      	negs	r3, r7
 800a3aa:	930a      	str	r3, [sp, #40]	@ 0x28
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	eba8 0807 	sub.w	r8, r8, r7
 800a3b2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a3b4:	e7c4      	b.n	800a340 <_dtoa_r+0x1b0>
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a3ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	dc35      	bgt.n	800a42c <_dtoa_r+0x29c>
 800a3c0:	2301      	movs	r3, #1
 800a3c2:	9300      	str	r3, [sp, #0]
 800a3c4:	9307      	str	r3, [sp, #28]
 800a3c6:	461a      	mov	r2, r3
 800a3c8:	920e      	str	r2, [sp, #56]	@ 0x38
 800a3ca:	e00b      	b.n	800a3e4 <_dtoa_r+0x254>
 800a3cc:	2301      	movs	r3, #1
 800a3ce:	e7f3      	b.n	800a3b8 <_dtoa_r+0x228>
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a3d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a3d6:	18fb      	adds	r3, r7, r3
 800a3d8:	9300      	str	r3, [sp, #0]
 800a3da:	3301      	adds	r3, #1
 800a3dc:	2b01      	cmp	r3, #1
 800a3de:	9307      	str	r3, [sp, #28]
 800a3e0:	bfb8      	it	lt
 800a3e2:	2301      	movlt	r3, #1
 800a3e4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a3e8:	2100      	movs	r1, #0
 800a3ea:	2204      	movs	r2, #4
 800a3ec:	f102 0514 	add.w	r5, r2, #20
 800a3f0:	429d      	cmp	r5, r3
 800a3f2:	d91f      	bls.n	800a434 <_dtoa_r+0x2a4>
 800a3f4:	6041      	str	r1, [r0, #4]
 800a3f6:	4658      	mov	r0, fp
 800a3f8:	f000 ff48 	bl	800b28c <_Balloc>
 800a3fc:	4682      	mov	sl, r0
 800a3fe:	2800      	cmp	r0, #0
 800a400:	d13c      	bne.n	800a47c <_dtoa_r+0x2ec>
 800a402:	4b1b      	ldr	r3, [pc, #108]	@ (800a470 <_dtoa_r+0x2e0>)
 800a404:	4602      	mov	r2, r0
 800a406:	f240 11af 	movw	r1, #431	@ 0x1af
 800a40a:	e6d8      	b.n	800a1be <_dtoa_r+0x2e>
 800a40c:	2301      	movs	r3, #1
 800a40e:	e7e0      	b.n	800a3d2 <_dtoa_r+0x242>
 800a410:	2401      	movs	r4, #1
 800a412:	2300      	movs	r3, #0
 800a414:	9309      	str	r3, [sp, #36]	@ 0x24
 800a416:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a418:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a41c:	9300      	str	r3, [sp, #0]
 800a41e:	9307      	str	r3, [sp, #28]
 800a420:	2200      	movs	r2, #0
 800a422:	2312      	movs	r3, #18
 800a424:	e7d0      	b.n	800a3c8 <_dtoa_r+0x238>
 800a426:	2301      	movs	r3, #1
 800a428:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a42a:	e7f5      	b.n	800a418 <_dtoa_r+0x288>
 800a42c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a42e:	9300      	str	r3, [sp, #0]
 800a430:	9307      	str	r3, [sp, #28]
 800a432:	e7d7      	b.n	800a3e4 <_dtoa_r+0x254>
 800a434:	3101      	adds	r1, #1
 800a436:	0052      	lsls	r2, r2, #1
 800a438:	e7d8      	b.n	800a3ec <_dtoa_r+0x25c>
 800a43a:	bf00      	nop
 800a43c:	f3af 8000 	nop.w
 800a440:	636f4361 	.word	0x636f4361
 800a444:	3fd287a7 	.word	0x3fd287a7
 800a448:	8b60c8b3 	.word	0x8b60c8b3
 800a44c:	3fc68a28 	.word	0x3fc68a28
 800a450:	509f79fb 	.word	0x509f79fb
 800a454:	3fd34413 	.word	0x3fd34413
 800a458:	0800c4a9 	.word	0x0800c4a9
 800a45c:	0800c4c0 	.word	0x0800c4c0
 800a460:	7ff00000 	.word	0x7ff00000
 800a464:	0800c479 	.word	0x0800c479
 800a468:	3ff80000 	.word	0x3ff80000
 800a46c:	0800c5c8 	.word	0x0800c5c8
 800a470:	0800c518 	.word	0x0800c518
 800a474:	0800c4a5 	.word	0x0800c4a5
 800a478:	0800c478 	.word	0x0800c478
 800a47c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a480:	6018      	str	r0, [r3, #0]
 800a482:	9b07      	ldr	r3, [sp, #28]
 800a484:	2b0e      	cmp	r3, #14
 800a486:	f200 80a4 	bhi.w	800a5d2 <_dtoa_r+0x442>
 800a48a:	2c00      	cmp	r4, #0
 800a48c:	f000 80a1 	beq.w	800a5d2 <_dtoa_r+0x442>
 800a490:	2f00      	cmp	r7, #0
 800a492:	dd33      	ble.n	800a4fc <_dtoa_r+0x36c>
 800a494:	4bad      	ldr	r3, [pc, #692]	@ (800a74c <_dtoa_r+0x5bc>)
 800a496:	f007 020f 	and.w	r2, r7, #15
 800a49a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a49e:	ed93 7b00 	vldr	d7, [r3]
 800a4a2:	05f8      	lsls	r0, r7, #23
 800a4a4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a4a8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a4ac:	d516      	bpl.n	800a4dc <_dtoa_r+0x34c>
 800a4ae:	4ba8      	ldr	r3, [pc, #672]	@ (800a750 <_dtoa_r+0x5c0>)
 800a4b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a4b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a4b8:	f7f6 f9e8 	bl	800088c <__aeabi_ddiv>
 800a4bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a4c0:	f004 040f 	and.w	r4, r4, #15
 800a4c4:	2603      	movs	r6, #3
 800a4c6:	4da2      	ldr	r5, [pc, #648]	@ (800a750 <_dtoa_r+0x5c0>)
 800a4c8:	b954      	cbnz	r4, 800a4e0 <_dtoa_r+0x350>
 800a4ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a4ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a4d2:	f7f6 f9db 	bl	800088c <__aeabi_ddiv>
 800a4d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a4da:	e028      	b.n	800a52e <_dtoa_r+0x39e>
 800a4dc:	2602      	movs	r6, #2
 800a4de:	e7f2      	b.n	800a4c6 <_dtoa_r+0x336>
 800a4e0:	07e1      	lsls	r1, r4, #31
 800a4e2:	d508      	bpl.n	800a4f6 <_dtoa_r+0x366>
 800a4e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a4e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a4ec:	f7f6 f8a4 	bl	8000638 <__aeabi_dmul>
 800a4f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a4f4:	3601      	adds	r6, #1
 800a4f6:	1064      	asrs	r4, r4, #1
 800a4f8:	3508      	adds	r5, #8
 800a4fa:	e7e5      	b.n	800a4c8 <_dtoa_r+0x338>
 800a4fc:	f000 80d2 	beq.w	800a6a4 <_dtoa_r+0x514>
 800a500:	427c      	negs	r4, r7
 800a502:	4b92      	ldr	r3, [pc, #584]	@ (800a74c <_dtoa_r+0x5bc>)
 800a504:	4d92      	ldr	r5, [pc, #584]	@ (800a750 <_dtoa_r+0x5c0>)
 800a506:	f004 020f 	and.w	r2, r4, #15
 800a50a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a50e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a512:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a516:	f7f6 f88f 	bl	8000638 <__aeabi_dmul>
 800a51a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a51e:	1124      	asrs	r4, r4, #4
 800a520:	2300      	movs	r3, #0
 800a522:	2602      	movs	r6, #2
 800a524:	2c00      	cmp	r4, #0
 800a526:	f040 80b2 	bne.w	800a68e <_dtoa_r+0x4fe>
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d1d3      	bne.n	800a4d6 <_dtoa_r+0x346>
 800a52e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a530:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a534:	2b00      	cmp	r3, #0
 800a536:	f000 80b7 	beq.w	800a6a8 <_dtoa_r+0x518>
 800a53a:	4b86      	ldr	r3, [pc, #536]	@ (800a754 <_dtoa_r+0x5c4>)
 800a53c:	2200      	movs	r2, #0
 800a53e:	4620      	mov	r0, r4
 800a540:	4629      	mov	r1, r5
 800a542:	f7f6 faeb 	bl	8000b1c <__aeabi_dcmplt>
 800a546:	2800      	cmp	r0, #0
 800a548:	f000 80ae 	beq.w	800a6a8 <_dtoa_r+0x518>
 800a54c:	9b07      	ldr	r3, [sp, #28]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	f000 80aa 	beq.w	800a6a8 <_dtoa_r+0x518>
 800a554:	9b00      	ldr	r3, [sp, #0]
 800a556:	2b00      	cmp	r3, #0
 800a558:	dd37      	ble.n	800a5ca <_dtoa_r+0x43a>
 800a55a:	1e7b      	subs	r3, r7, #1
 800a55c:	9304      	str	r3, [sp, #16]
 800a55e:	4620      	mov	r0, r4
 800a560:	4b7d      	ldr	r3, [pc, #500]	@ (800a758 <_dtoa_r+0x5c8>)
 800a562:	2200      	movs	r2, #0
 800a564:	4629      	mov	r1, r5
 800a566:	f7f6 f867 	bl	8000638 <__aeabi_dmul>
 800a56a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a56e:	9c00      	ldr	r4, [sp, #0]
 800a570:	3601      	adds	r6, #1
 800a572:	4630      	mov	r0, r6
 800a574:	f7f5 fff6 	bl	8000564 <__aeabi_i2d>
 800a578:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a57c:	f7f6 f85c 	bl	8000638 <__aeabi_dmul>
 800a580:	4b76      	ldr	r3, [pc, #472]	@ (800a75c <_dtoa_r+0x5cc>)
 800a582:	2200      	movs	r2, #0
 800a584:	f7f5 fea2 	bl	80002cc <__adddf3>
 800a588:	4605      	mov	r5, r0
 800a58a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a58e:	2c00      	cmp	r4, #0
 800a590:	f040 808d 	bne.w	800a6ae <_dtoa_r+0x51e>
 800a594:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a598:	4b71      	ldr	r3, [pc, #452]	@ (800a760 <_dtoa_r+0x5d0>)
 800a59a:	2200      	movs	r2, #0
 800a59c:	f7f5 fe94 	bl	80002c8 <__aeabi_dsub>
 800a5a0:	4602      	mov	r2, r0
 800a5a2:	460b      	mov	r3, r1
 800a5a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a5a8:	462a      	mov	r2, r5
 800a5aa:	4633      	mov	r3, r6
 800a5ac:	f7f6 fad4 	bl	8000b58 <__aeabi_dcmpgt>
 800a5b0:	2800      	cmp	r0, #0
 800a5b2:	f040 828b 	bne.w	800aacc <_dtoa_r+0x93c>
 800a5b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a5ba:	462a      	mov	r2, r5
 800a5bc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a5c0:	f7f6 faac 	bl	8000b1c <__aeabi_dcmplt>
 800a5c4:	2800      	cmp	r0, #0
 800a5c6:	f040 8128 	bne.w	800a81a <_dtoa_r+0x68a>
 800a5ca:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a5ce:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a5d2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	f2c0 815a 	blt.w	800a88e <_dtoa_r+0x6fe>
 800a5da:	2f0e      	cmp	r7, #14
 800a5dc:	f300 8157 	bgt.w	800a88e <_dtoa_r+0x6fe>
 800a5e0:	4b5a      	ldr	r3, [pc, #360]	@ (800a74c <_dtoa_r+0x5bc>)
 800a5e2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a5e6:	ed93 7b00 	vldr	d7, [r3]
 800a5ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	ed8d 7b00 	vstr	d7, [sp]
 800a5f2:	da03      	bge.n	800a5fc <_dtoa_r+0x46c>
 800a5f4:	9b07      	ldr	r3, [sp, #28]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	f340 8101 	ble.w	800a7fe <_dtoa_r+0x66e>
 800a5fc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a600:	4656      	mov	r6, sl
 800a602:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a606:	4620      	mov	r0, r4
 800a608:	4629      	mov	r1, r5
 800a60a:	f7f6 f93f 	bl	800088c <__aeabi_ddiv>
 800a60e:	f7f6 fac3 	bl	8000b98 <__aeabi_d2iz>
 800a612:	4680      	mov	r8, r0
 800a614:	f7f5 ffa6 	bl	8000564 <__aeabi_i2d>
 800a618:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a61c:	f7f6 f80c 	bl	8000638 <__aeabi_dmul>
 800a620:	4602      	mov	r2, r0
 800a622:	460b      	mov	r3, r1
 800a624:	4620      	mov	r0, r4
 800a626:	4629      	mov	r1, r5
 800a628:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a62c:	f7f5 fe4c 	bl	80002c8 <__aeabi_dsub>
 800a630:	f806 4b01 	strb.w	r4, [r6], #1
 800a634:	9d07      	ldr	r5, [sp, #28]
 800a636:	eba6 040a 	sub.w	r4, r6, sl
 800a63a:	42a5      	cmp	r5, r4
 800a63c:	4602      	mov	r2, r0
 800a63e:	460b      	mov	r3, r1
 800a640:	f040 8117 	bne.w	800a872 <_dtoa_r+0x6e2>
 800a644:	f7f5 fe42 	bl	80002cc <__adddf3>
 800a648:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a64c:	4604      	mov	r4, r0
 800a64e:	460d      	mov	r5, r1
 800a650:	f7f6 fa82 	bl	8000b58 <__aeabi_dcmpgt>
 800a654:	2800      	cmp	r0, #0
 800a656:	f040 80f9 	bne.w	800a84c <_dtoa_r+0x6bc>
 800a65a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a65e:	4620      	mov	r0, r4
 800a660:	4629      	mov	r1, r5
 800a662:	f7f6 fa51 	bl	8000b08 <__aeabi_dcmpeq>
 800a666:	b118      	cbz	r0, 800a670 <_dtoa_r+0x4e0>
 800a668:	f018 0f01 	tst.w	r8, #1
 800a66c:	f040 80ee 	bne.w	800a84c <_dtoa_r+0x6bc>
 800a670:	4649      	mov	r1, r9
 800a672:	4658      	mov	r0, fp
 800a674:	f000 fe4a 	bl	800b30c <_Bfree>
 800a678:	2300      	movs	r3, #0
 800a67a:	7033      	strb	r3, [r6, #0]
 800a67c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a67e:	3701      	adds	r7, #1
 800a680:	601f      	str	r7, [r3, #0]
 800a682:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a684:	2b00      	cmp	r3, #0
 800a686:	f000 831d 	beq.w	800acc4 <_dtoa_r+0xb34>
 800a68a:	601e      	str	r6, [r3, #0]
 800a68c:	e31a      	b.n	800acc4 <_dtoa_r+0xb34>
 800a68e:	07e2      	lsls	r2, r4, #31
 800a690:	d505      	bpl.n	800a69e <_dtoa_r+0x50e>
 800a692:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a696:	f7f5 ffcf 	bl	8000638 <__aeabi_dmul>
 800a69a:	3601      	adds	r6, #1
 800a69c:	2301      	movs	r3, #1
 800a69e:	1064      	asrs	r4, r4, #1
 800a6a0:	3508      	adds	r5, #8
 800a6a2:	e73f      	b.n	800a524 <_dtoa_r+0x394>
 800a6a4:	2602      	movs	r6, #2
 800a6a6:	e742      	b.n	800a52e <_dtoa_r+0x39e>
 800a6a8:	9c07      	ldr	r4, [sp, #28]
 800a6aa:	9704      	str	r7, [sp, #16]
 800a6ac:	e761      	b.n	800a572 <_dtoa_r+0x3e2>
 800a6ae:	4b27      	ldr	r3, [pc, #156]	@ (800a74c <_dtoa_r+0x5bc>)
 800a6b0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a6b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a6b6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a6ba:	4454      	add	r4, sl
 800a6bc:	2900      	cmp	r1, #0
 800a6be:	d053      	beq.n	800a768 <_dtoa_r+0x5d8>
 800a6c0:	4928      	ldr	r1, [pc, #160]	@ (800a764 <_dtoa_r+0x5d4>)
 800a6c2:	2000      	movs	r0, #0
 800a6c4:	f7f6 f8e2 	bl	800088c <__aeabi_ddiv>
 800a6c8:	4633      	mov	r3, r6
 800a6ca:	462a      	mov	r2, r5
 800a6cc:	f7f5 fdfc 	bl	80002c8 <__aeabi_dsub>
 800a6d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a6d4:	4656      	mov	r6, sl
 800a6d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a6da:	f7f6 fa5d 	bl	8000b98 <__aeabi_d2iz>
 800a6de:	4605      	mov	r5, r0
 800a6e0:	f7f5 ff40 	bl	8000564 <__aeabi_i2d>
 800a6e4:	4602      	mov	r2, r0
 800a6e6:	460b      	mov	r3, r1
 800a6e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a6ec:	f7f5 fdec 	bl	80002c8 <__aeabi_dsub>
 800a6f0:	3530      	adds	r5, #48	@ 0x30
 800a6f2:	4602      	mov	r2, r0
 800a6f4:	460b      	mov	r3, r1
 800a6f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a6fa:	f806 5b01 	strb.w	r5, [r6], #1
 800a6fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a702:	f7f6 fa0b 	bl	8000b1c <__aeabi_dcmplt>
 800a706:	2800      	cmp	r0, #0
 800a708:	d171      	bne.n	800a7ee <_dtoa_r+0x65e>
 800a70a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a70e:	4911      	ldr	r1, [pc, #68]	@ (800a754 <_dtoa_r+0x5c4>)
 800a710:	2000      	movs	r0, #0
 800a712:	f7f5 fdd9 	bl	80002c8 <__aeabi_dsub>
 800a716:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a71a:	f7f6 f9ff 	bl	8000b1c <__aeabi_dcmplt>
 800a71e:	2800      	cmp	r0, #0
 800a720:	f040 8095 	bne.w	800a84e <_dtoa_r+0x6be>
 800a724:	42a6      	cmp	r6, r4
 800a726:	f43f af50 	beq.w	800a5ca <_dtoa_r+0x43a>
 800a72a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a72e:	4b0a      	ldr	r3, [pc, #40]	@ (800a758 <_dtoa_r+0x5c8>)
 800a730:	2200      	movs	r2, #0
 800a732:	f7f5 ff81 	bl	8000638 <__aeabi_dmul>
 800a736:	4b08      	ldr	r3, [pc, #32]	@ (800a758 <_dtoa_r+0x5c8>)
 800a738:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a73c:	2200      	movs	r2, #0
 800a73e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a742:	f7f5 ff79 	bl	8000638 <__aeabi_dmul>
 800a746:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a74a:	e7c4      	b.n	800a6d6 <_dtoa_r+0x546>
 800a74c:	0800c5c8 	.word	0x0800c5c8
 800a750:	0800c5a0 	.word	0x0800c5a0
 800a754:	3ff00000 	.word	0x3ff00000
 800a758:	40240000 	.word	0x40240000
 800a75c:	401c0000 	.word	0x401c0000
 800a760:	40140000 	.word	0x40140000
 800a764:	3fe00000 	.word	0x3fe00000
 800a768:	4631      	mov	r1, r6
 800a76a:	4628      	mov	r0, r5
 800a76c:	f7f5 ff64 	bl	8000638 <__aeabi_dmul>
 800a770:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a774:	9415      	str	r4, [sp, #84]	@ 0x54
 800a776:	4656      	mov	r6, sl
 800a778:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a77c:	f7f6 fa0c 	bl	8000b98 <__aeabi_d2iz>
 800a780:	4605      	mov	r5, r0
 800a782:	f7f5 feef 	bl	8000564 <__aeabi_i2d>
 800a786:	4602      	mov	r2, r0
 800a788:	460b      	mov	r3, r1
 800a78a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a78e:	f7f5 fd9b 	bl	80002c8 <__aeabi_dsub>
 800a792:	3530      	adds	r5, #48	@ 0x30
 800a794:	f806 5b01 	strb.w	r5, [r6], #1
 800a798:	4602      	mov	r2, r0
 800a79a:	460b      	mov	r3, r1
 800a79c:	42a6      	cmp	r6, r4
 800a79e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a7a2:	f04f 0200 	mov.w	r2, #0
 800a7a6:	d124      	bne.n	800a7f2 <_dtoa_r+0x662>
 800a7a8:	4bac      	ldr	r3, [pc, #688]	@ (800aa5c <_dtoa_r+0x8cc>)
 800a7aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a7ae:	f7f5 fd8d 	bl	80002cc <__adddf3>
 800a7b2:	4602      	mov	r2, r0
 800a7b4:	460b      	mov	r3, r1
 800a7b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7ba:	f7f6 f9cd 	bl	8000b58 <__aeabi_dcmpgt>
 800a7be:	2800      	cmp	r0, #0
 800a7c0:	d145      	bne.n	800a84e <_dtoa_r+0x6be>
 800a7c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a7c6:	49a5      	ldr	r1, [pc, #660]	@ (800aa5c <_dtoa_r+0x8cc>)
 800a7c8:	2000      	movs	r0, #0
 800a7ca:	f7f5 fd7d 	bl	80002c8 <__aeabi_dsub>
 800a7ce:	4602      	mov	r2, r0
 800a7d0:	460b      	mov	r3, r1
 800a7d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7d6:	f7f6 f9a1 	bl	8000b1c <__aeabi_dcmplt>
 800a7da:	2800      	cmp	r0, #0
 800a7dc:	f43f aef5 	beq.w	800a5ca <_dtoa_r+0x43a>
 800a7e0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a7e2:	1e73      	subs	r3, r6, #1
 800a7e4:	9315      	str	r3, [sp, #84]	@ 0x54
 800a7e6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a7ea:	2b30      	cmp	r3, #48	@ 0x30
 800a7ec:	d0f8      	beq.n	800a7e0 <_dtoa_r+0x650>
 800a7ee:	9f04      	ldr	r7, [sp, #16]
 800a7f0:	e73e      	b.n	800a670 <_dtoa_r+0x4e0>
 800a7f2:	4b9b      	ldr	r3, [pc, #620]	@ (800aa60 <_dtoa_r+0x8d0>)
 800a7f4:	f7f5 ff20 	bl	8000638 <__aeabi_dmul>
 800a7f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a7fc:	e7bc      	b.n	800a778 <_dtoa_r+0x5e8>
 800a7fe:	d10c      	bne.n	800a81a <_dtoa_r+0x68a>
 800a800:	4b98      	ldr	r3, [pc, #608]	@ (800aa64 <_dtoa_r+0x8d4>)
 800a802:	2200      	movs	r2, #0
 800a804:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a808:	f7f5 ff16 	bl	8000638 <__aeabi_dmul>
 800a80c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a810:	f7f6 f998 	bl	8000b44 <__aeabi_dcmpge>
 800a814:	2800      	cmp	r0, #0
 800a816:	f000 8157 	beq.w	800aac8 <_dtoa_r+0x938>
 800a81a:	2400      	movs	r4, #0
 800a81c:	4625      	mov	r5, r4
 800a81e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a820:	43db      	mvns	r3, r3
 800a822:	9304      	str	r3, [sp, #16]
 800a824:	4656      	mov	r6, sl
 800a826:	2700      	movs	r7, #0
 800a828:	4621      	mov	r1, r4
 800a82a:	4658      	mov	r0, fp
 800a82c:	f000 fd6e 	bl	800b30c <_Bfree>
 800a830:	2d00      	cmp	r5, #0
 800a832:	d0dc      	beq.n	800a7ee <_dtoa_r+0x65e>
 800a834:	b12f      	cbz	r7, 800a842 <_dtoa_r+0x6b2>
 800a836:	42af      	cmp	r7, r5
 800a838:	d003      	beq.n	800a842 <_dtoa_r+0x6b2>
 800a83a:	4639      	mov	r1, r7
 800a83c:	4658      	mov	r0, fp
 800a83e:	f000 fd65 	bl	800b30c <_Bfree>
 800a842:	4629      	mov	r1, r5
 800a844:	4658      	mov	r0, fp
 800a846:	f000 fd61 	bl	800b30c <_Bfree>
 800a84a:	e7d0      	b.n	800a7ee <_dtoa_r+0x65e>
 800a84c:	9704      	str	r7, [sp, #16]
 800a84e:	4633      	mov	r3, r6
 800a850:	461e      	mov	r6, r3
 800a852:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a856:	2a39      	cmp	r2, #57	@ 0x39
 800a858:	d107      	bne.n	800a86a <_dtoa_r+0x6da>
 800a85a:	459a      	cmp	sl, r3
 800a85c:	d1f8      	bne.n	800a850 <_dtoa_r+0x6c0>
 800a85e:	9a04      	ldr	r2, [sp, #16]
 800a860:	3201      	adds	r2, #1
 800a862:	9204      	str	r2, [sp, #16]
 800a864:	2230      	movs	r2, #48	@ 0x30
 800a866:	f88a 2000 	strb.w	r2, [sl]
 800a86a:	781a      	ldrb	r2, [r3, #0]
 800a86c:	3201      	adds	r2, #1
 800a86e:	701a      	strb	r2, [r3, #0]
 800a870:	e7bd      	b.n	800a7ee <_dtoa_r+0x65e>
 800a872:	4b7b      	ldr	r3, [pc, #492]	@ (800aa60 <_dtoa_r+0x8d0>)
 800a874:	2200      	movs	r2, #0
 800a876:	f7f5 fedf 	bl	8000638 <__aeabi_dmul>
 800a87a:	2200      	movs	r2, #0
 800a87c:	2300      	movs	r3, #0
 800a87e:	4604      	mov	r4, r0
 800a880:	460d      	mov	r5, r1
 800a882:	f7f6 f941 	bl	8000b08 <__aeabi_dcmpeq>
 800a886:	2800      	cmp	r0, #0
 800a888:	f43f aebb 	beq.w	800a602 <_dtoa_r+0x472>
 800a88c:	e6f0      	b.n	800a670 <_dtoa_r+0x4e0>
 800a88e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a890:	2a00      	cmp	r2, #0
 800a892:	f000 80db 	beq.w	800aa4c <_dtoa_r+0x8bc>
 800a896:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a898:	2a01      	cmp	r2, #1
 800a89a:	f300 80bf 	bgt.w	800aa1c <_dtoa_r+0x88c>
 800a89e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a8a0:	2a00      	cmp	r2, #0
 800a8a2:	f000 80b7 	beq.w	800aa14 <_dtoa_r+0x884>
 800a8a6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a8aa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a8ac:	4646      	mov	r6, r8
 800a8ae:	9a08      	ldr	r2, [sp, #32]
 800a8b0:	2101      	movs	r1, #1
 800a8b2:	441a      	add	r2, r3
 800a8b4:	4658      	mov	r0, fp
 800a8b6:	4498      	add	r8, r3
 800a8b8:	9208      	str	r2, [sp, #32]
 800a8ba:	f000 fddb 	bl	800b474 <__i2b>
 800a8be:	4605      	mov	r5, r0
 800a8c0:	b15e      	cbz	r6, 800a8da <_dtoa_r+0x74a>
 800a8c2:	9b08      	ldr	r3, [sp, #32]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	dd08      	ble.n	800a8da <_dtoa_r+0x74a>
 800a8c8:	42b3      	cmp	r3, r6
 800a8ca:	9a08      	ldr	r2, [sp, #32]
 800a8cc:	bfa8      	it	ge
 800a8ce:	4633      	movge	r3, r6
 800a8d0:	eba8 0803 	sub.w	r8, r8, r3
 800a8d4:	1af6      	subs	r6, r6, r3
 800a8d6:	1ad3      	subs	r3, r2, r3
 800a8d8:	9308      	str	r3, [sp, #32]
 800a8da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a8dc:	b1f3      	cbz	r3, 800a91c <_dtoa_r+0x78c>
 800a8de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	f000 80b7 	beq.w	800aa54 <_dtoa_r+0x8c4>
 800a8e6:	b18c      	cbz	r4, 800a90c <_dtoa_r+0x77c>
 800a8e8:	4629      	mov	r1, r5
 800a8ea:	4622      	mov	r2, r4
 800a8ec:	4658      	mov	r0, fp
 800a8ee:	f000 fe81 	bl	800b5f4 <__pow5mult>
 800a8f2:	464a      	mov	r2, r9
 800a8f4:	4601      	mov	r1, r0
 800a8f6:	4605      	mov	r5, r0
 800a8f8:	4658      	mov	r0, fp
 800a8fa:	f000 fdd1 	bl	800b4a0 <__multiply>
 800a8fe:	4649      	mov	r1, r9
 800a900:	9004      	str	r0, [sp, #16]
 800a902:	4658      	mov	r0, fp
 800a904:	f000 fd02 	bl	800b30c <_Bfree>
 800a908:	9b04      	ldr	r3, [sp, #16]
 800a90a:	4699      	mov	r9, r3
 800a90c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a90e:	1b1a      	subs	r2, r3, r4
 800a910:	d004      	beq.n	800a91c <_dtoa_r+0x78c>
 800a912:	4649      	mov	r1, r9
 800a914:	4658      	mov	r0, fp
 800a916:	f000 fe6d 	bl	800b5f4 <__pow5mult>
 800a91a:	4681      	mov	r9, r0
 800a91c:	2101      	movs	r1, #1
 800a91e:	4658      	mov	r0, fp
 800a920:	f000 fda8 	bl	800b474 <__i2b>
 800a924:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a926:	4604      	mov	r4, r0
 800a928:	2b00      	cmp	r3, #0
 800a92a:	f000 81cf 	beq.w	800accc <_dtoa_r+0xb3c>
 800a92e:	461a      	mov	r2, r3
 800a930:	4601      	mov	r1, r0
 800a932:	4658      	mov	r0, fp
 800a934:	f000 fe5e 	bl	800b5f4 <__pow5mult>
 800a938:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a93a:	2b01      	cmp	r3, #1
 800a93c:	4604      	mov	r4, r0
 800a93e:	f300 8095 	bgt.w	800aa6c <_dtoa_r+0x8dc>
 800a942:	9b02      	ldr	r3, [sp, #8]
 800a944:	2b00      	cmp	r3, #0
 800a946:	f040 8087 	bne.w	800aa58 <_dtoa_r+0x8c8>
 800a94a:	9b03      	ldr	r3, [sp, #12]
 800a94c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a950:	2b00      	cmp	r3, #0
 800a952:	f040 8089 	bne.w	800aa68 <_dtoa_r+0x8d8>
 800a956:	9b03      	ldr	r3, [sp, #12]
 800a958:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a95c:	0d1b      	lsrs	r3, r3, #20
 800a95e:	051b      	lsls	r3, r3, #20
 800a960:	b12b      	cbz	r3, 800a96e <_dtoa_r+0x7de>
 800a962:	9b08      	ldr	r3, [sp, #32]
 800a964:	3301      	adds	r3, #1
 800a966:	9308      	str	r3, [sp, #32]
 800a968:	f108 0801 	add.w	r8, r8, #1
 800a96c:	2301      	movs	r3, #1
 800a96e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a970:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a972:	2b00      	cmp	r3, #0
 800a974:	f000 81b0 	beq.w	800acd8 <_dtoa_r+0xb48>
 800a978:	6923      	ldr	r3, [r4, #16]
 800a97a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a97e:	6918      	ldr	r0, [r3, #16]
 800a980:	f000 fd2c 	bl	800b3dc <__hi0bits>
 800a984:	f1c0 0020 	rsb	r0, r0, #32
 800a988:	9b08      	ldr	r3, [sp, #32]
 800a98a:	4418      	add	r0, r3
 800a98c:	f010 001f 	ands.w	r0, r0, #31
 800a990:	d077      	beq.n	800aa82 <_dtoa_r+0x8f2>
 800a992:	f1c0 0320 	rsb	r3, r0, #32
 800a996:	2b04      	cmp	r3, #4
 800a998:	dd6b      	ble.n	800aa72 <_dtoa_r+0x8e2>
 800a99a:	9b08      	ldr	r3, [sp, #32]
 800a99c:	f1c0 001c 	rsb	r0, r0, #28
 800a9a0:	4403      	add	r3, r0
 800a9a2:	4480      	add	r8, r0
 800a9a4:	4406      	add	r6, r0
 800a9a6:	9308      	str	r3, [sp, #32]
 800a9a8:	f1b8 0f00 	cmp.w	r8, #0
 800a9ac:	dd05      	ble.n	800a9ba <_dtoa_r+0x82a>
 800a9ae:	4649      	mov	r1, r9
 800a9b0:	4642      	mov	r2, r8
 800a9b2:	4658      	mov	r0, fp
 800a9b4:	f000 fe78 	bl	800b6a8 <__lshift>
 800a9b8:	4681      	mov	r9, r0
 800a9ba:	9b08      	ldr	r3, [sp, #32]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	dd05      	ble.n	800a9cc <_dtoa_r+0x83c>
 800a9c0:	4621      	mov	r1, r4
 800a9c2:	461a      	mov	r2, r3
 800a9c4:	4658      	mov	r0, fp
 800a9c6:	f000 fe6f 	bl	800b6a8 <__lshift>
 800a9ca:	4604      	mov	r4, r0
 800a9cc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d059      	beq.n	800aa86 <_dtoa_r+0x8f6>
 800a9d2:	4621      	mov	r1, r4
 800a9d4:	4648      	mov	r0, r9
 800a9d6:	f000 fed3 	bl	800b780 <__mcmp>
 800a9da:	2800      	cmp	r0, #0
 800a9dc:	da53      	bge.n	800aa86 <_dtoa_r+0x8f6>
 800a9de:	1e7b      	subs	r3, r7, #1
 800a9e0:	9304      	str	r3, [sp, #16]
 800a9e2:	4649      	mov	r1, r9
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	220a      	movs	r2, #10
 800a9e8:	4658      	mov	r0, fp
 800a9ea:	f000 fcb1 	bl	800b350 <__multadd>
 800a9ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a9f0:	4681      	mov	r9, r0
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	f000 8172 	beq.w	800acdc <_dtoa_r+0xb4c>
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	4629      	mov	r1, r5
 800a9fc:	220a      	movs	r2, #10
 800a9fe:	4658      	mov	r0, fp
 800aa00:	f000 fca6 	bl	800b350 <__multadd>
 800aa04:	9b00      	ldr	r3, [sp, #0]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	4605      	mov	r5, r0
 800aa0a:	dc67      	bgt.n	800aadc <_dtoa_r+0x94c>
 800aa0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa0e:	2b02      	cmp	r3, #2
 800aa10:	dc41      	bgt.n	800aa96 <_dtoa_r+0x906>
 800aa12:	e063      	b.n	800aadc <_dtoa_r+0x94c>
 800aa14:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800aa16:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800aa1a:	e746      	b.n	800a8aa <_dtoa_r+0x71a>
 800aa1c:	9b07      	ldr	r3, [sp, #28]
 800aa1e:	1e5c      	subs	r4, r3, #1
 800aa20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa22:	42a3      	cmp	r3, r4
 800aa24:	bfbf      	itttt	lt
 800aa26:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800aa28:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800aa2a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800aa2c:	1ae3      	sublt	r3, r4, r3
 800aa2e:	bfb4      	ite	lt
 800aa30:	18d2      	addlt	r2, r2, r3
 800aa32:	1b1c      	subge	r4, r3, r4
 800aa34:	9b07      	ldr	r3, [sp, #28]
 800aa36:	bfbc      	itt	lt
 800aa38:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800aa3a:	2400      	movlt	r4, #0
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	bfb5      	itete	lt
 800aa40:	eba8 0603 	sublt.w	r6, r8, r3
 800aa44:	9b07      	ldrge	r3, [sp, #28]
 800aa46:	2300      	movlt	r3, #0
 800aa48:	4646      	movge	r6, r8
 800aa4a:	e730      	b.n	800a8ae <_dtoa_r+0x71e>
 800aa4c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800aa4e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800aa50:	4646      	mov	r6, r8
 800aa52:	e735      	b.n	800a8c0 <_dtoa_r+0x730>
 800aa54:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800aa56:	e75c      	b.n	800a912 <_dtoa_r+0x782>
 800aa58:	2300      	movs	r3, #0
 800aa5a:	e788      	b.n	800a96e <_dtoa_r+0x7de>
 800aa5c:	3fe00000 	.word	0x3fe00000
 800aa60:	40240000 	.word	0x40240000
 800aa64:	40140000 	.word	0x40140000
 800aa68:	9b02      	ldr	r3, [sp, #8]
 800aa6a:	e780      	b.n	800a96e <_dtoa_r+0x7de>
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	930a      	str	r3, [sp, #40]	@ 0x28
 800aa70:	e782      	b.n	800a978 <_dtoa_r+0x7e8>
 800aa72:	d099      	beq.n	800a9a8 <_dtoa_r+0x818>
 800aa74:	9a08      	ldr	r2, [sp, #32]
 800aa76:	331c      	adds	r3, #28
 800aa78:	441a      	add	r2, r3
 800aa7a:	4498      	add	r8, r3
 800aa7c:	441e      	add	r6, r3
 800aa7e:	9208      	str	r2, [sp, #32]
 800aa80:	e792      	b.n	800a9a8 <_dtoa_r+0x818>
 800aa82:	4603      	mov	r3, r0
 800aa84:	e7f6      	b.n	800aa74 <_dtoa_r+0x8e4>
 800aa86:	9b07      	ldr	r3, [sp, #28]
 800aa88:	9704      	str	r7, [sp, #16]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	dc20      	bgt.n	800aad0 <_dtoa_r+0x940>
 800aa8e:	9300      	str	r3, [sp, #0]
 800aa90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa92:	2b02      	cmp	r3, #2
 800aa94:	dd1e      	ble.n	800aad4 <_dtoa_r+0x944>
 800aa96:	9b00      	ldr	r3, [sp, #0]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	f47f aec0 	bne.w	800a81e <_dtoa_r+0x68e>
 800aa9e:	4621      	mov	r1, r4
 800aaa0:	2205      	movs	r2, #5
 800aaa2:	4658      	mov	r0, fp
 800aaa4:	f000 fc54 	bl	800b350 <__multadd>
 800aaa8:	4601      	mov	r1, r0
 800aaaa:	4604      	mov	r4, r0
 800aaac:	4648      	mov	r0, r9
 800aaae:	f000 fe67 	bl	800b780 <__mcmp>
 800aab2:	2800      	cmp	r0, #0
 800aab4:	f77f aeb3 	ble.w	800a81e <_dtoa_r+0x68e>
 800aab8:	4656      	mov	r6, sl
 800aaba:	2331      	movs	r3, #49	@ 0x31
 800aabc:	f806 3b01 	strb.w	r3, [r6], #1
 800aac0:	9b04      	ldr	r3, [sp, #16]
 800aac2:	3301      	adds	r3, #1
 800aac4:	9304      	str	r3, [sp, #16]
 800aac6:	e6ae      	b.n	800a826 <_dtoa_r+0x696>
 800aac8:	9c07      	ldr	r4, [sp, #28]
 800aaca:	9704      	str	r7, [sp, #16]
 800aacc:	4625      	mov	r5, r4
 800aace:	e7f3      	b.n	800aab8 <_dtoa_r+0x928>
 800aad0:	9b07      	ldr	r3, [sp, #28]
 800aad2:	9300      	str	r3, [sp, #0]
 800aad4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	f000 8104 	beq.w	800ace4 <_dtoa_r+0xb54>
 800aadc:	2e00      	cmp	r6, #0
 800aade:	dd05      	ble.n	800aaec <_dtoa_r+0x95c>
 800aae0:	4629      	mov	r1, r5
 800aae2:	4632      	mov	r2, r6
 800aae4:	4658      	mov	r0, fp
 800aae6:	f000 fddf 	bl	800b6a8 <__lshift>
 800aaea:	4605      	mov	r5, r0
 800aaec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d05a      	beq.n	800aba8 <_dtoa_r+0xa18>
 800aaf2:	6869      	ldr	r1, [r5, #4]
 800aaf4:	4658      	mov	r0, fp
 800aaf6:	f000 fbc9 	bl	800b28c <_Balloc>
 800aafa:	4606      	mov	r6, r0
 800aafc:	b928      	cbnz	r0, 800ab0a <_dtoa_r+0x97a>
 800aafe:	4b84      	ldr	r3, [pc, #528]	@ (800ad10 <_dtoa_r+0xb80>)
 800ab00:	4602      	mov	r2, r0
 800ab02:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ab06:	f7ff bb5a 	b.w	800a1be <_dtoa_r+0x2e>
 800ab0a:	692a      	ldr	r2, [r5, #16]
 800ab0c:	3202      	adds	r2, #2
 800ab0e:	0092      	lsls	r2, r2, #2
 800ab10:	f105 010c 	add.w	r1, r5, #12
 800ab14:	300c      	adds	r0, #12
 800ab16:	f001 f81d 	bl	800bb54 <memcpy>
 800ab1a:	2201      	movs	r2, #1
 800ab1c:	4631      	mov	r1, r6
 800ab1e:	4658      	mov	r0, fp
 800ab20:	f000 fdc2 	bl	800b6a8 <__lshift>
 800ab24:	f10a 0301 	add.w	r3, sl, #1
 800ab28:	9307      	str	r3, [sp, #28]
 800ab2a:	9b00      	ldr	r3, [sp, #0]
 800ab2c:	4453      	add	r3, sl
 800ab2e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ab30:	9b02      	ldr	r3, [sp, #8]
 800ab32:	f003 0301 	and.w	r3, r3, #1
 800ab36:	462f      	mov	r7, r5
 800ab38:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab3a:	4605      	mov	r5, r0
 800ab3c:	9b07      	ldr	r3, [sp, #28]
 800ab3e:	4621      	mov	r1, r4
 800ab40:	3b01      	subs	r3, #1
 800ab42:	4648      	mov	r0, r9
 800ab44:	9300      	str	r3, [sp, #0]
 800ab46:	f7ff fa98 	bl	800a07a <quorem>
 800ab4a:	4639      	mov	r1, r7
 800ab4c:	9002      	str	r0, [sp, #8]
 800ab4e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ab52:	4648      	mov	r0, r9
 800ab54:	f000 fe14 	bl	800b780 <__mcmp>
 800ab58:	462a      	mov	r2, r5
 800ab5a:	9008      	str	r0, [sp, #32]
 800ab5c:	4621      	mov	r1, r4
 800ab5e:	4658      	mov	r0, fp
 800ab60:	f000 fe2a 	bl	800b7b8 <__mdiff>
 800ab64:	68c2      	ldr	r2, [r0, #12]
 800ab66:	4606      	mov	r6, r0
 800ab68:	bb02      	cbnz	r2, 800abac <_dtoa_r+0xa1c>
 800ab6a:	4601      	mov	r1, r0
 800ab6c:	4648      	mov	r0, r9
 800ab6e:	f000 fe07 	bl	800b780 <__mcmp>
 800ab72:	4602      	mov	r2, r0
 800ab74:	4631      	mov	r1, r6
 800ab76:	4658      	mov	r0, fp
 800ab78:	920e      	str	r2, [sp, #56]	@ 0x38
 800ab7a:	f000 fbc7 	bl	800b30c <_Bfree>
 800ab7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab80:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ab82:	9e07      	ldr	r6, [sp, #28]
 800ab84:	ea43 0102 	orr.w	r1, r3, r2
 800ab88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ab8a:	4319      	orrs	r1, r3
 800ab8c:	d110      	bne.n	800abb0 <_dtoa_r+0xa20>
 800ab8e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ab92:	d029      	beq.n	800abe8 <_dtoa_r+0xa58>
 800ab94:	9b08      	ldr	r3, [sp, #32]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	dd02      	ble.n	800aba0 <_dtoa_r+0xa10>
 800ab9a:	9b02      	ldr	r3, [sp, #8]
 800ab9c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800aba0:	9b00      	ldr	r3, [sp, #0]
 800aba2:	f883 8000 	strb.w	r8, [r3]
 800aba6:	e63f      	b.n	800a828 <_dtoa_r+0x698>
 800aba8:	4628      	mov	r0, r5
 800abaa:	e7bb      	b.n	800ab24 <_dtoa_r+0x994>
 800abac:	2201      	movs	r2, #1
 800abae:	e7e1      	b.n	800ab74 <_dtoa_r+0x9e4>
 800abb0:	9b08      	ldr	r3, [sp, #32]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	db04      	blt.n	800abc0 <_dtoa_r+0xa30>
 800abb6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800abb8:	430b      	orrs	r3, r1
 800abba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800abbc:	430b      	orrs	r3, r1
 800abbe:	d120      	bne.n	800ac02 <_dtoa_r+0xa72>
 800abc0:	2a00      	cmp	r2, #0
 800abc2:	dded      	ble.n	800aba0 <_dtoa_r+0xa10>
 800abc4:	4649      	mov	r1, r9
 800abc6:	2201      	movs	r2, #1
 800abc8:	4658      	mov	r0, fp
 800abca:	f000 fd6d 	bl	800b6a8 <__lshift>
 800abce:	4621      	mov	r1, r4
 800abd0:	4681      	mov	r9, r0
 800abd2:	f000 fdd5 	bl	800b780 <__mcmp>
 800abd6:	2800      	cmp	r0, #0
 800abd8:	dc03      	bgt.n	800abe2 <_dtoa_r+0xa52>
 800abda:	d1e1      	bne.n	800aba0 <_dtoa_r+0xa10>
 800abdc:	f018 0f01 	tst.w	r8, #1
 800abe0:	d0de      	beq.n	800aba0 <_dtoa_r+0xa10>
 800abe2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800abe6:	d1d8      	bne.n	800ab9a <_dtoa_r+0xa0a>
 800abe8:	9a00      	ldr	r2, [sp, #0]
 800abea:	2339      	movs	r3, #57	@ 0x39
 800abec:	7013      	strb	r3, [r2, #0]
 800abee:	4633      	mov	r3, r6
 800abf0:	461e      	mov	r6, r3
 800abf2:	3b01      	subs	r3, #1
 800abf4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800abf8:	2a39      	cmp	r2, #57	@ 0x39
 800abfa:	d052      	beq.n	800aca2 <_dtoa_r+0xb12>
 800abfc:	3201      	adds	r2, #1
 800abfe:	701a      	strb	r2, [r3, #0]
 800ac00:	e612      	b.n	800a828 <_dtoa_r+0x698>
 800ac02:	2a00      	cmp	r2, #0
 800ac04:	dd07      	ble.n	800ac16 <_dtoa_r+0xa86>
 800ac06:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ac0a:	d0ed      	beq.n	800abe8 <_dtoa_r+0xa58>
 800ac0c:	9a00      	ldr	r2, [sp, #0]
 800ac0e:	f108 0301 	add.w	r3, r8, #1
 800ac12:	7013      	strb	r3, [r2, #0]
 800ac14:	e608      	b.n	800a828 <_dtoa_r+0x698>
 800ac16:	9b07      	ldr	r3, [sp, #28]
 800ac18:	9a07      	ldr	r2, [sp, #28]
 800ac1a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ac1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ac20:	4293      	cmp	r3, r2
 800ac22:	d028      	beq.n	800ac76 <_dtoa_r+0xae6>
 800ac24:	4649      	mov	r1, r9
 800ac26:	2300      	movs	r3, #0
 800ac28:	220a      	movs	r2, #10
 800ac2a:	4658      	mov	r0, fp
 800ac2c:	f000 fb90 	bl	800b350 <__multadd>
 800ac30:	42af      	cmp	r7, r5
 800ac32:	4681      	mov	r9, r0
 800ac34:	f04f 0300 	mov.w	r3, #0
 800ac38:	f04f 020a 	mov.w	r2, #10
 800ac3c:	4639      	mov	r1, r7
 800ac3e:	4658      	mov	r0, fp
 800ac40:	d107      	bne.n	800ac52 <_dtoa_r+0xac2>
 800ac42:	f000 fb85 	bl	800b350 <__multadd>
 800ac46:	4607      	mov	r7, r0
 800ac48:	4605      	mov	r5, r0
 800ac4a:	9b07      	ldr	r3, [sp, #28]
 800ac4c:	3301      	adds	r3, #1
 800ac4e:	9307      	str	r3, [sp, #28]
 800ac50:	e774      	b.n	800ab3c <_dtoa_r+0x9ac>
 800ac52:	f000 fb7d 	bl	800b350 <__multadd>
 800ac56:	4629      	mov	r1, r5
 800ac58:	4607      	mov	r7, r0
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	220a      	movs	r2, #10
 800ac5e:	4658      	mov	r0, fp
 800ac60:	f000 fb76 	bl	800b350 <__multadd>
 800ac64:	4605      	mov	r5, r0
 800ac66:	e7f0      	b.n	800ac4a <_dtoa_r+0xaba>
 800ac68:	9b00      	ldr	r3, [sp, #0]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	bfcc      	ite	gt
 800ac6e:	461e      	movgt	r6, r3
 800ac70:	2601      	movle	r6, #1
 800ac72:	4456      	add	r6, sl
 800ac74:	2700      	movs	r7, #0
 800ac76:	4649      	mov	r1, r9
 800ac78:	2201      	movs	r2, #1
 800ac7a:	4658      	mov	r0, fp
 800ac7c:	f000 fd14 	bl	800b6a8 <__lshift>
 800ac80:	4621      	mov	r1, r4
 800ac82:	4681      	mov	r9, r0
 800ac84:	f000 fd7c 	bl	800b780 <__mcmp>
 800ac88:	2800      	cmp	r0, #0
 800ac8a:	dcb0      	bgt.n	800abee <_dtoa_r+0xa5e>
 800ac8c:	d102      	bne.n	800ac94 <_dtoa_r+0xb04>
 800ac8e:	f018 0f01 	tst.w	r8, #1
 800ac92:	d1ac      	bne.n	800abee <_dtoa_r+0xa5e>
 800ac94:	4633      	mov	r3, r6
 800ac96:	461e      	mov	r6, r3
 800ac98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ac9c:	2a30      	cmp	r2, #48	@ 0x30
 800ac9e:	d0fa      	beq.n	800ac96 <_dtoa_r+0xb06>
 800aca0:	e5c2      	b.n	800a828 <_dtoa_r+0x698>
 800aca2:	459a      	cmp	sl, r3
 800aca4:	d1a4      	bne.n	800abf0 <_dtoa_r+0xa60>
 800aca6:	9b04      	ldr	r3, [sp, #16]
 800aca8:	3301      	adds	r3, #1
 800acaa:	9304      	str	r3, [sp, #16]
 800acac:	2331      	movs	r3, #49	@ 0x31
 800acae:	f88a 3000 	strb.w	r3, [sl]
 800acb2:	e5b9      	b.n	800a828 <_dtoa_r+0x698>
 800acb4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800acb6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800ad14 <_dtoa_r+0xb84>
 800acba:	b11b      	cbz	r3, 800acc4 <_dtoa_r+0xb34>
 800acbc:	f10a 0308 	add.w	r3, sl, #8
 800acc0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800acc2:	6013      	str	r3, [r2, #0]
 800acc4:	4650      	mov	r0, sl
 800acc6:	b019      	add	sp, #100	@ 0x64
 800acc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800accc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acce:	2b01      	cmp	r3, #1
 800acd0:	f77f ae37 	ble.w	800a942 <_dtoa_r+0x7b2>
 800acd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800acd6:	930a      	str	r3, [sp, #40]	@ 0x28
 800acd8:	2001      	movs	r0, #1
 800acda:	e655      	b.n	800a988 <_dtoa_r+0x7f8>
 800acdc:	9b00      	ldr	r3, [sp, #0]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	f77f aed6 	ble.w	800aa90 <_dtoa_r+0x900>
 800ace4:	4656      	mov	r6, sl
 800ace6:	4621      	mov	r1, r4
 800ace8:	4648      	mov	r0, r9
 800acea:	f7ff f9c6 	bl	800a07a <quorem>
 800acee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800acf2:	f806 8b01 	strb.w	r8, [r6], #1
 800acf6:	9b00      	ldr	r3, [sp, #0]
 800acf8:	eba6 020a 	sub.w	r2, r6, sl
 800acfc:	4293      	cmp	r3, r2
 800acfe:	ddb3      	ble.n	800ac68 <_dtoa_r+0xad8>
 800ad00:	4649      	mov	r1, r9
 800ad02:	2300      	movs	r3, #0
 800ad04:	220a      	movs	r2, #10
 800ad06:	4658      	mov	r0, fp
 800ad08:	f000 fb22 	bl	800b350 <__multadd>
 800ad0c:	4681      	mov	r9, r0
 800ad0e:	e7ea      	b.n	800ace6 <_dtoa_r+0xb56>
 800ad10:	0800c518 	.word	0x0800c518
 800ad14:	0800c49c 	.word	0x0800c49c

0800ad18 <__ssputs_r>:
 800ad18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad1c:	688e      	ldr	r6, [r1, #8]
 800ad1e:	461f      	mov	r7, r3
 800ad20:	42be      	cmp	r6, r7
 800ad22:	680b      	ldr	r3, [r1, #0]
 800ad24:	4682      	mov	sl, r0
 800ad26:	460c      	mov	r4, r1
 800ad28:	4690      	mov	r8, r2
 800ad2a:	d82d      	bhi.n	800ad88 <__ssputs_r+0x70>
 800ad2c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ad30:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ad34:	d026      	beq.n	800ad84 <__ssputs_r+0x6c>
 800ad36:	6965      	ldr	r5, [r4, #20]
 800ad38:	6909      	ldr	r1, [r1, #16]
 800ad3a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ad3e:	eba3 0901 	sub.w	r9, r3, r1
 800ad42:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ad46:	1c7b      	adds	r3, r7, #1
 800ad48:	444b      	add	r3, r9
 800ad4a:	106d      	asrs	r5, r5, #1
 800ad4c:	429d      	cmp	r5, r3
 800ad4e:	bf38      	it	cc
 800ad50:	461d      	movcc	r5, r3
 800ad52:	0553      	lsls	r3, r2, #21
 800ad54:	d527      	bpl.n	800ada6 <__ssputs_r+0x8e>
 800ad56:	4629      	mov	r1, r5
 800ad58:	f000 f960 	bl	800b01c <_malloc_r>
 800ad5c:	4606      	mov	r6, r0
 800ad5e:	b360      	cbz	r0, 800adba <__ssputs_r+0xa2>
 800ad60:	6921      	ldr	r1, [r4, #16]
 800ad62:	464a      	mov	r2, r9
 800ad64:	f000 fef6 	bl	800bb54 <memcpy>
 800ad68:	89a3      	ldrh	r3, [r4, #12]
 800ad6a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ad6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad72:	81a3      	strh	r3, [r4, #12]
 800ad74:	6126      	str	r6, [r4, #16]
 800ad76:	6165      	str	r5, [r4, #20]
 800ad78:	444e      	add	r6, r9
 800ad7a:	eba5 0509 	sub.w	r5, r5, r9
 800ad7e:	6026      	str	r6, [r4, #0]
 800ad80:	60a5      	str	r5, [r4, #8]
 800ad82:	463e      	mov	r6, r7
 800ad84:	42be      	cmp	r6, r7
 800ad86:	d900      	bls.n	800ad8a <__ssputs_r+0x72>
 800ad88:	463e      	mov	r6, r7
 800ad8a:	6820      	ldr	r0, [r4, #0]
 800ad8c:	4632      	mov	r2, r6
 800ad8e:	4641      	mov	r1, r8
 800ad90:	f000 fe6f 	bl	800ba72 <memmove>
 800ad94:	68a3      	ldr	r3, [r4, #8]
 800ad96:	1b9b      	subs	r3, r3, r6
 800ad98:	60a3      	str	r3, [r4, #8]
 800ad9a:	6823      	ldr	r3, [r4, #0]
 800ad9c:	4433      	add	r3, r6
 800ad9e:	6023      	str	r3, [r4, #0]
 800ada0:	2000      	movs	r0, #0
 800ada2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ada6:	462a      	mov	r2, r5
 800ada8:	f000 fe35 	bl	800ba16 <_realloc_r>
 800adac:	4606      	mov	r6, r0
 800adae:	2800      	cmp	r0, #0
 800adb0:	d1e0      	bne.n	800ad74 <__ssputs_r+0x5c>
 800adb2:	6921      	ldr	r1, [r4, #16]
 800adb4:	4650      	mov	r0, sl
 800adb6:	f000 ff0d 	bl	800bbd4 <_free_r>
 800adba:	230c      	movs	r3, #12
 800adbc:	f8ca 3000 	str.w	r3, [sl]
 800adc0:	89a3      	ldrh	r3, [r4, #12]
 800adc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800adc6:	81a3      	strh	r3, [r4, #12]
 800adc8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800adcc:	e7e9      	b.n	800ada2 <__ssputs_r+0x8a>
	...

0800add0 <_svfiprintf_r>:
 800add0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800add4:	4698      	mov	r8, r3
 800add6:	898b      	ldrh	r3, [r1, #12]
 800add8:	061b      	lsls	r3, r3, #24
 800adda:	b09d      	sub	sp, #116	@ 0x74
 800addc:	4607      	mov	r7, r0
 800adde:	460d      	mov	r5, r1
 800ade0:	4614      	mov	r4, r2
 800ade2:	d510      	bpl.n	800ae06 <_svfiprintf_r+0x36>
 800ade4:	690b      	ldr	r3, [r1, #16]
 800ade6:	b973      	cbnz	r3, 800ae06 <_svfiprintf_r+0x36>
 800ade8:	2140      	movs	r1, #64	@ 0x40
 800adea:	f000 f917 	bl	800b01c <_malloc_r>
 800adee:	6028      	str	r0, [r5, #0]
 800adf0:	6128      	str	r0, [r5, #16]
 800adf2:	b930      	cbnz	r0, 800ae02 <_svfiprintf_r+0x32>
 800adf4:	230c      	movs	r3, #12
 800adf6:	603b      	str	r3, [r7, #0]
 800adf8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800adfc:	b01d      	add	sp, #116	@ 0x74
 800adfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae02:	2340      	movs	r3, #64	@ 0x40
 800ae04:	616b      	str	r3, [r5, #20]
 800ae06:	2300      	movs	r3, #0
 800ae08:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae0a:	2320      	movs	r3, #32
 800ae0c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ae10:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae14:	2330      	movs	r3, #48	@ 0x30
 800ae16:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800afb4 <_svfiprintf_r+0x1e4>
 800ae1a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ae1e:	f04f 0901 	mov.w	r9, #1
 800ae22:	4623      	mov	r3, r4
 800ae24:	469a      	mov	sl, r3
 800ae26:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae2a:	b10a      	cbz	r2, 800ae30 <_svfiprintf_r+0x60>
 800ae2c:	2a25      	cmp	r2, #37	@ 0x25
 800ae2e:	d1f9      	bne.n	800ae24 <_svfiprintf_r+0x54>
 800ae30:	ebba 0b04 	subs.w	fp, sl, r4
 800ae34:	d00b      	beq.n	800ae4e <_svfiprintf_r+0x7e>
 800ae36:	465b      	mov	r3, fp
 800ae38:	4622      	mov	r2, r4
 800ae3a:	4629      	mov	r1, r5
 800ae3c:	4638      	mov	r0, r7
 800ae3e:	f7ff ff6b 	bl	800ad18 <__ssputs_r>
 800ae42:	3001      	adds	r0, #1
 800ae44:	f000 80a7 	beq.w	800af96 <_svfiprintf_r+0x1c6>
 800ae48:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ae4a:	445a      	add	r2, fp
 800ae4c:	9209      	str	r2, [sp, #36]	@ 0x24
 800ae4e:	f89a 3000 	ldrb.w	r3, [sl]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	f000 809f 	beq.w	800af96 <_svfiprintf_r+0x1c6>
 800ae58:	2300      	movs	r3, #0
 800ae5a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ae5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae62:	f10a 0a01 	add.w	sl, sl, #1
 800ae66:	9304      	str	r3, [sp, #16]
 800ae68:	9307      	str	r3, [sp, #28]
 800ae6a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ae6e:	931a      	str	r3, [sp, #104]	@ 0x68
 800ae70:	4654      	mov	r4, sl
 800ae72:	2205      	movs	r2, #5
 800ae74:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae78:	484e      	ldr	r0, [pc, #312]	@ (800afb4 <_svfiprintf_r+0x1e4>)
 800ae7a:	f7f5 f9c9 	bl	8000210 <memchr>
 800ae7e:	9a04      	ldr	r2, [sp, #16]
 800ae80:	b9d8      	cbnz	r0, 800aeba <_svfiprintf_r+0xea>
 800ae82:	06d0      	lsls	r0, r2, #27
 800ae84:	bf44      	itt	mi
 800ae86:	2320      	movmi	r3, #32
 800ae88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae8c:	0711      	lsls	r1, r2, #28
 800ae8e:	bf44      	itt	mi
 800ae90:	232b      	movmi	r3, #43	@ 0x2b
 800ae92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae96:	f89a 3000 	ldrb.w	r3, [sl]
 800ae9a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae9c:	d015      	beq.n	800aeca <_svfiprintf_r+0xfa>
 800ae9e:	9a07      	ldr	r2, [sp, #28]
 800aea0:	4654      	mov	r4, sl
 800aea2:	2000      	movs	r0, #0
 800aea4:	f04f 0c0a 	mov.w	ip, #10
 800aea8:	4621      	mov	r1, r4
 800aeaa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aeae:	3b30      	subs	r3, #48	@ 0x30
 800aeb0:	2b09      	cmp	r3, #9
 800aeb2:	d94b      	bls.n	800af4c <_svfiprintf_r+0x17c>
 800aeb4:	b1b0      	cbz	r0, 800aee4 <_svfiprintf_r+0x114>
 800aeb6:	9207      	str	r2, [sp, #28]
 800aeb8:	e014      	b.n	800aee4 <_svfiprintf_r+0x114>
 800aeba:	eba0 0308 	sub.w	r3, r0, r8
 800aebe:	fa09 f303 	lsl.w	r3, r9, r3
 800aec2:	4313      	orrs	r3, r2
 800aec4:	9304      	str	r3, [sp, #16]
 800aec6:	46a2      	mov	sl, r4
 800aec8:	e7d2      	b.n	800ae70 <_svfiprintf_r+0xa0>
 800aeca:	9b03      	ldr	r3, [sp, #12]
 800aecc:	1d19      	adds	r1, r3, #4
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	9103      	str	r1, [sp, #12]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	bfbb      	ittet	lt
 800aed6:	425b      	neglt	r3, r3
 800aed8:	f042 0202 	orrlt.w	r2, r2, #2
 800aedc:	9307      	strge	r3, [sp, #28]
 800aede:	9307      	strlt	r3, [sp, #28]
 800aee0:	bfb8      	it	lt
 800aee2:	9204      	strlt	r2, [sp, #16]
 800aee4:	7823      	ldrb	r3, [r4, #0]
 800aee6:	2b2e      	cmp	r3, #46	@ 0x2e
 800aee8:	d10a      	bne.n	800af00 <_svfiprintf_r+0x130>
 800aeea:	7863      	ldrb	r3, [r4, #1]
 800aeec:	2b2a      	cmp	r3, #42	@ 0x2a
 800aeee:	d132      	bne.n	800af56 <_svfiprintf_r+0x186>
 800aef0:	9b03      	ldr	r3, [sp, #12]
 800aef2:	1d1a      	adds	r2, r3, #4
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	9203      	str	r2, [sp, #12]
 800aef8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aefc:	3402      	adds	r4, #2
 800aefe:	9305      	str	r3, [sp, #20]
 800af00:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800afc4 <_svfiprintf_r+0x1f4>
 800af04:	7821      	ldrb	r1, [r4, #0]
 800af06:	2203      	movs	r2, #3
 800af08:	4650      	mov	r0, sl
 800af0a:	f7f5 f981 	bl	8000210 <memchr>
 800af0e:	b138      	cbz	r0, 800af20 <_svfiprintf_r+0x150>
 800af10:	9b04      	ldr	r3, [sp, #16]
 800af12:	eba0 000a 	sub.w	r0, r0, sl
 800af16:	2240      	movs	r2, #64	@ 0x40
 800af18:	4082      	lsls	r2, r0
 800af1a:	4313      	orrs	r3, r2
 800af1c:	3401      	adds	r4, #1
 800af1e:	9304      	str	r3, [sp, #16]
 800af20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af24:	4824      	ldr	r0, [pc, #144]	@ (800afb8 <_svfiprintf_r+0x1e8>)
 800af26:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800af2a:	2206      	movs	r2, #6
 800af2c:	f7f5 f970 	bl	8000210 <memchr>
 800af30:	2800      	cmp	r0, #0
 800af32:	d036      	beq.n	800afa2 <_svfiprintf_r+0x1d2>
 800af34:	4b21      	ldr	r3, [pc, #132]	@ (800afbc <_svfiprintf_r+0x1ec>)
 800af36:	bb1b      	cbnz	r3, 800af80 <_svfiprintf_r+0x1b0>
 800af38:	9b03      	ldr	r3, [sp, #12]
 800af3a:	3307      	adds	r3, #7
 800af3c:	f023 0307 	bic.w	r3, r3, #7
 800af40:	3308      	adds	r3, #8
 800af42:	9303      	str	r3, [sp, #12]
 800af44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af46:	4433      	add	r3, r6
 800af48:	9309      	str	r3, [sp, #36]	@ 0x24
 800af4a:	e76a      	b.n	800ae22 <_svfiprintf_r+0x52>
 800af4c:	fb0c 3202 	mla	r2, ip, r2, r3
 800af50:	460c      	mov	r4, r1
 800af52:	2001      	movs	r0, #1
 800af54:	e7a8      	b.n	800aea8 <_svfiprintf_r+0xd8>
 800af56:	2300      	movs	r3, #0
 800af58:	3401      	adds	r4, #1
 800af5a:	9305      	str	r3, [sp, #20]
 800af5c:	4619      	mov	r1, r3
 800af5e:	f04f 0c0a 	mov.w	ip, #10
 800af62:	4620      	mov	r0, r4
 800af64:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af68:	3a30      	subs	r2, #48	@ 0x30
 800af6a:	2a09      	cmp	r2, #9
 800af6c:	d903      	bls.n	800af76 <_svfiprintf_r+0x1a6>
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d0c6      	beq.n	800af00 <_svfiprintf_r+0x130>
 800af72:	9105      	str	r1, [sp, #20]
 800af74:	e7c4      	b.n	800af00 <_svfiprintf_r+0x130>
 800af76:	fb0c 2101 	mla	r1, ip, r1, r2
 800af7a:	4604      	mov	r4, r0
 800af7c:	2301      	movs	r3, #1
 800af7e:	e7f0      	b.n	800af62 <_svfiprintf_r+0x192>
 800af80:	ab03      	add	r3, sp, #12
 800af82:	9300      	str	r3, [sp, #0]
 800af84:	462a      	mov	r2, r5
 800af86:	4b0e      	ldr	r3, [pc, #56]	@ (800afc0 <_svfiprintf_r+0x1f0>)
 800af88:	a904      	add	r1, sp, #16
 800af8a:	4638      	mov	r0, r7
 800af8c:	f7fe fba8 	bl	80096e0 <_printf_float>
 800af90:	1c42      	adds	r2, r0, #1
 800af92:	4606      	mov	r6, r0
 800af94:	d1d6      	bne.n	800af44 <_svfiprintf_r+0x174>
 800af96:	89ab      	ldrh	r3, [r5, #12]
 800af98:	065b      	lsls	r3, r3, #25
 800af9a:	f53f af2d 	bmi.w	800adf8 <_svfiprintf_r+0x28>
 800af9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800afa0:	e72c      	b.n	800adfc <_svfiprintf_r+0x2c>
 800afa2:	ab03      	add	r3, sp, #12
 800afa4:	9300      	str	r3, [sp, #0]
 800afa6:	462a      	mov	r2, r5
 800afa8:	4b05      	ldr	r3, [pc, #20]	@ (800afc0 <_svfiprintf_r+0x1f0>)
 800afaa:	a904      	add	r1, sp, #16
 800afac:	4638      	mov	r0, r7
 800afae:	f7fe fe2f 	bl	8009c10 <_printf_i>
 800afb2:	e7ed      	b.n	800af90 <_svfiprintf_r+0x1c0>
 800afb4:	0800c529 	.word	0x0800c529
 800afb8:	0800c533 	.word	0x0800c533
 800afbc:	080096e1 	.word	0x080096e1
 800afc0:	0800ad19 	.word	0x0800ad19
 800afc4:	0800c52f 	.word	0x0800c52f

0800afc8 <malloc>:
 800afc8:	4b02      	ldr	r3, [pc, #8]	@ (800afd4 <malloc+0xc>)
 800afca:	4601      	mov	r1, r0
 800afcc:	6818      	ldr	r0, [r3, #0]
 800afce:	f000 b825 	b.w	800b01c <_malloc_r>
 800afd2:	bf00      	nop
 800afd4:	20000018 	.word	0x20000018

0800afd8 <sbrk_aligned>:
 800afd8:	b570      	push	{r4, r5, r6, lr}
 800afda:	4e0f      	ldr	r6, [pc, #60]	@ (800b018 <sbrk_aligned+0x40>)
 800afdc:	460c      	mov	r4, r1
 800afde:	6831      	ldr	r1, [r6, #0]
 800afe0:	4605      	mov	r5, r0
 800afe2:	b911      	cbnz	r1, 800afea <sbrk_aligned+0x12>
 800afe4:	f000 fd94 	bl	800bb10 <_sbrk_r>
 800afe8:	6030      	str	r0, [r6, #0]
 800afea:	4621      	mov	r1, r4
 800afec:	4628      	mov	r0, r5
 800afee:	f000 fd8f 	bl	800bb10 <_sbrk_r>
 800aff2:	1c43      	adds	r3, r0, #1
 800aff4:	d103      	bne.n	800affe <sbrk_aligned+0x26>
 800aff6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800affa:	4620      	mov	r0, r4
 800affc:	bd70      	pop	{r4, r5, r6, pc}
 800affe:	1cc4      	adds	r4, r0, #3
 800b000:	f024 0403 	bic.w	r4, r4, #3
 800b004:	42a0      	cmp	r0, r4
 800b006:	d0f8      	beq.n	800affa <sbrk_aligned+0x22>
 800b008:	1a21      	subs	r1, r4, r0
 800b00a:	4628      	mov	r0, r5
 800b00c:	f000 fd80 	bl	800bb10 <_sbrk_r>
 800b010:	3001      	adds	r0, #1
 800b012:	d1f2      	bne.n	800affa <sbrk_aligned+0x22>
 800b014:	e7ef      	b.n	800aff6 <sbrk_aligned+0x1e>
 800b016:	bf00      	nop
 800b018:	2001f4ac 	.word	0x2001f4ac

0800b01c <_malloc_r>:
 800b01c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b020:	1ccd      	adds	r5, r1, #3
 800b022:	f025 0503 	bic.w	r5, r5, #3
 800b026:	3508      	adds	r5, #8
 800b028:	2d0c      	cmp	r5, #12
 800b02a:	bf38      	it	cc
 800b02c:	250c      	movcc	r5, #12
 800b02e:	2d00      	cmp	r5, #0
 800b030:	4606      	mov	r6, r0
 800b032:	db01      	blt.n	800b038 <_malloc_r+0x1c>
 800b034:	42a9      	cmp	r1, r5
 800b036:	d904      	bls.n	800b042 <_malloc_r+0x26>
 800b038:	230c      	movs	r3, #12
 800b03a:	6033      	str	r3, [r6, #0]
 800b03c:	2000      	movs	r0, #0
 800b03e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b042:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b118 <_malloc_r+0xfc>
 800b046:	f000 f915 	bl	800b274 <__malloc_lock>
 800b04a:	f8d8 3000 	ldr.w	r3, [r8]
 800b04e:	461c      	mov	r4, r3
 800b050:	bb44      	cbnz	r4, 800b0a4 <_malloc_r+0x88>
 800b052:	4629      	mov	r1, r5
 800b054:	4630      	mov	r0, r6
 800b056:	f7ff ffbf 	bl	800afd8 <sbrk_aligned>
 800b05a:	1c43      	adds	r3, r0, #1
 800b05c:	4604      	mov	r4, r0
 800b05e:	d158      	bne.n	800b112 <_malloc_r+0xf6>
 800b060:	f8d8 4000 	ldr.w	r4, [r8]
 800b064:	4627      	mov	r7, r4
 800b066:	2f00      	cmp	r7, #0
 800b068:	d143      	bne.n	800b0f2 <_malloc_r+0xd6>
 800b06a:	2c00      	cmp	r4, #0
 800b06c:	d04b      	beq.n	800b106 <_malloc_r+0xea>
 800b06e:	6823      	ldr	r3, [r4, #0]
 800b070:	4639      	mov	r1, r7
 800b072:	4630      	mov	r0, r6
 800b074:	eb04 0903 	add.w	r9, r4, r3
 800b078:	f000 fd4a 	bl	800bb10 <_sbrk_r>
 800b07c:	4581      	cmp	r9, r0
 800b07e:	d142      	bne.n	800b106 <_malloc_r+0xea>
 800b080:	6821      	ldr	r1, [r4, #0]
 800b082:	1a6d      	subs	r5, r5, r1
 800b084:	4629      	mov	r1, r5
 800b086:	4630      	mov	r0, r6
 800b088:	f7ff ffa6 	bl	800afd8 <sbrk_aligned>
 800b08c:	3001      	adds	r0, #1
 800b08e:	d03a      	beq.n	800b106 <_malloc_r+0xea>
 800b090:	6823      	ldr	r3, [r4, #0]
 800b092:	442b      	add	r3, r5
 800b094:	6023      	str	r3, [r4, #0]
 800b096:	f8d8 3000 	ldr.w	r3, [r8]
 800b09a:	685a      	ldr	r2, [r3, #4]
 800b09c:	bb62      	cbnz	r2, 800b0f8 <_malloc_r+0xdc>
 800b09e:	f8c8 7000 	str.w	r7, [r8]
 800b0a2:	e00f      	b.n	800b0c4 <_malloc_r+0xa8>
 800b0a4:	6822      	ldr	r2, [r4, #0]
 800b0a6:	1b52      	subs	r2, r2, r5
 800b0a8:	d420      	bmi.n	800b0ec <_malloc_r+0xd0>
 800b0aa:	2a0b      	cmp	r2, #11
 800b0ac:	d917      	bls.n	800b0de <_malloc_r+0xc2>
 800b0ae:	1961      	adds	r1, r4, r5
 800b0b0:	42a3      	cmp	r3, r4
 800b0b2:	6025      	str	r5, [r4, #0]
 800b0b4:	bf18      	it	ne
 800b0b6:	6059      	strne	r1, [r3, #4]
 800b0b8:	6863      	ldr	r3, [r4, #4]
 800b0ba:	bf08      	it	eq
 800b0bc:	f8c8 1000 	streq.w	r1, [r8]
 800b0c0:	5162      	str	r2, [r4, r5]
 800b0c2:	604b      	str	r3, [r1, #4]
 800b0c4:	4630      	mov	r0, r6
 800b0c6:	f000 f8db 	bl	800b280 <__malloc_unlock>
 800b0ca:	f104 000b 	add.w	r0, r4, #11
 800b0ce:	1d23      	adds	r3, r4, #4
 800b0d0:	f020 0007 	bic.w	r0, r0, #7
 800b0d4:	1ac2      	subs	r2, r0, r3
 800b0d6:	bf1c      	itt	ne
 800b0d8:	1a1b      	subne	r3, r3, r0
 800b0da:	50a3      	strne	r3, [r4, r2]
 800b0dc:	e7af      	b.n	800b03e <_malloc_r+0x22>
 800b0de:	6862      	ldr	r2, [r4, #4]
 800b0e0:	42a3      	cmp	r3, r4
 800b0e2:	bf0c      	ite	eq
 800b0e4:	f8c8 2000 	streq.w	r2, [r8]
 800b0e8:	605a      	strne	r2, [r3, #4]
 800b0ea:	e7eb      	b.n	800b0c4 <_malloc_r+0xa8>
 800b0ec:	4623      	mov	r3, r4
 800b0ee:	6864      	ldr	r4, [r4, #4]
 800b0f0:	e7ae      	b.n	800b050 <_malloc_r+0x34>
 800b0f2:	463c      	mov	r4, r7
 800b0f4:	687f      	ldr	r7, [r7, #4]
 800b0f6:	e7b6      	b.n	800b066 <_malloc_r+0x4a>
 800b0f8:	461a      	mov	r2, r3
 800b0fa:	685b      	ldr	r3, [r3, #4]
 800b0fc:	42a3      	cmp	r3, r4
 800b0fe:	d1fb      	bne.n	800b0f8 <_malloc_r+0xdc>
 800b100:	2300      	movs	r3, #0
 800b102:	6053      	str	r3, [r2, #4]
 800b104:	e7de      	b.n	800b0c4 <_malloc_r+0xa8>
 800b106:	230c      	movs	r3, #12
 800b108:	6033      	str	r3, [r6, #0]
 800b10a:	4630      	mov	r0, r6
 800b10c:	f000 f8b8 	bl	800b280 <__malloc_unlock>
 800b110:	e794      	b.n	800b03c <_malloc_r+0x20>
 800b112:	6005      	str	r5, [r0, #0]
 800b114:	e7d6      	b.n	800b0c4 <_malloc_r+0xa8>
 800b116:	bf00      	nop
 800b118:	2001f4b0 	.word	0x2001f4b0

0800b11c <__sflush_r>:
 800b11c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b124:	0716      	lsls	r6, r2, #28
 800b126:	4605      	mov	r5, r0
 800b128:	460c      	mov	r4, r1
 800b12a:	d454      	bmi.n	800b1d6 <__sflush_r+0xba>
 800b12c:	684b      	ldr	r3, [r1, #4]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	dc02      	bgt.n	800b138 <__sflush_r+0x1c>
 800b132:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b134:	2b00      	cmp	r3, #0
 800b136:	dd48      	ble.n	800b1ca <__sflush_r+0xae>
 800b138:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b13a:	2e00      	cmp	r6, #0
 800b13c:	d045      	beq.n	800b1ca <__sflush_r+0xae>
 800b13e:	2300      	movs	r3, #0
 800b140:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b144:	682f      	ldr	r7, [r5, #0]
 800b146:	6a21      	ldr	r1, [r4, #32]
 800b148:	602b      	str	r3, [r5, #0]
 800b14a:	d030      	beq.n	800b1ae <__sflush_r+0x92>
 800b14c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b14e:	89a3      	ldrh	r3, [r4, #12]
 800b150:	0759      	lsls	r1, r3, #29
 800b152:	d505      	bpl.n	800b160 <__sflush_r+0x44>
 800b154:	6863      	ldr	r3, [r4, #4]
 800b156:	1ad2      	subs	r2, r2, r3
 800b158:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b15a:	b10b      	cbz	r3, 800b160 <__sflush_r+0x44>
 800b15c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b15e:	1ad2      	subs	r2, r2, r3
 800b160:	2300      	movs	r3, #0
 800b162:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b164:	6a21      	ldr	r1, [r4, #32]
 800b166:	4628      	mov	r0, r5
 800b168:	47b0      	blx	r6
 800b16a:	1c43      	adds	r3, r0, #1
 800b16c:	89a3      	ldrh	r3, [r4, #12]
 800b16e:	d106      	bne.n	800b17e <__sflush_r+0x62>
 800b170:	6829      	ldr	r1, [r5, #0]
 800b172:	291d      	cmp	r1, #29
 800b174:	d82b      	bhi.n	800b1ce <__sflush_r+0xb2>
 800b176:	4a2a      	ldr	r2, [pc, #168]	@ (800b220 <__sflush_r+0x104>)
 800b178:	410a      	asrs	r2, r1
 800b17a:	07d6      	lsls	r6, r2, #31
 800b17c:	d427      	bmi.n	800b1ce <__sflush_r+0xb2>
 800b17e:	2200      	movs	r2, #0
 800b180:	6062      	str	r2, [r4, #4]
 800b182:	04d9      	lsls	r1, r3, #19
 800b184:	6922      	ldr	r2, [r4, #16]
 800b186:	6022      	str	r2, [r4, #0]
 800b188:	d504      	bpl.n	800b194 <__sflush_r+0x78>
 800b18a:	1c42      	adds	r2, r0, #1
 800b18c:	d101      	bne.n	800b192 <__sflush_r+0x76>
 800b18e:	682b      	ldr	r3, [r5, #0]
 800b190:	b903      	cbnz	r3, 800b194 <__sflush_r+0x78>
 800b192:	6560      	str	r0, [r4, #84]	@ 0x54
 800b194:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b196:	602f      	str	r7, [r5, #0]
 800b198:	b1b9      	cbz	r1, 800b1ca <__sflush_r+0xae>
 800b19a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b19e:	4299      	cmp	r1, r3
 800b1a0:	d002      	beq.n	800b1a8 <__sflush_r+0x8c>
 800b1a2:	4628      	mov	r0, r5
 800b1a4:	f000 fd16 	bl	800bbd4 <_free_r>
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	6363      	str	r3, [r4, #52]	@ 0x34
 800b1ac:	e00d      	b.n	800b1ca <__sflush_r+0xae>
 800b1ae:	2301      	movs	r3, #1
 800b1b0:	4628      	mov	r0, r5
 800b1b2:	47b0      	blx	r6
 800b1b4:	4602      	mov	r2, r0
 800b1b6:	1c50      	adds	r0, r2, #1
 800b1b8:	d1c9      	bne.n	800b14e <__sflush_r+0x32>
 800b1ba:	682b      	ldr	r3, [r5, #0]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d0c6      	beq.n	800b14e <__sflush_r+0x32>
 800b1c0:	2b1d      	cmp	r3, #29
 800b1c2:	d001      	beq.n	800b1c8 <__sflush_r+0xac>
 800b1c4:	2b16      	cmp	r3, #22
 800b1c6:	d11e      	bne.n	800b206 <__sflush_r+0xea>
 800b1c8:	602f      	str	r7, [r5, #0]
 800b1ca:	2000      	movs	r0, #0
 800b1cc:	e022      	b.n	800b214 <__sflush_r+0xf8>
 800b1ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b1d2:	b21b      	sxth	r3, r3
 800b1d4:	e01b      	b.n	800b20e <__sflush_r+0xf2>
 800b1d6:	690f      	ldr	r7, [r1, #16]
 800b1d8:	2f00      	cmp	r7, #0
 800b1da:	d0f6      	beq.n	800b1ca <__sflush_r+0xae>
 800b1dc:	0793      	lsls	r3, r2, #30
 800b1de:	680e      	ldr	r6, [r1, #0]
 800b1e0:	bf08      	it	eq
 800b1e2:	694b      	ldreq	r3, [r1, #20]
 800b1e4:	600f      	str	r7, [r1, #0]
 800b1e6:	bf18      	it	ne
 800b1e8:	2300      	movne	r3, #0
 800b1ea:	eba6 0807 	sub.w	r8, r6, r7
 800b1ee:	608b      	str	r3, [r1, #8]
 800b1f0:	f1b8 0f00 	cmp.w	r8, #0
 800b1f4:	dde9      	ble.n	800b1ca <__sflush_r+0xae>
 800b1f6:	6a21      	ldr	r1, [r4, #32]
 800b1f8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b1fa:	4643      	mov	r3, r8
 800b1fc:	463a      	mov	r2, r7
 800b1fe:	4628      	mov	r0, r5
 800b200:	47b0      	blx	r6
 800b202:	2800      	cmp	r0, #0
 800b204:	dc08      	bgt.n	800b218 <__sflush_r+0xfc>
 800b206:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b20a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b20e:	81a3      	strh	r3, [r4, #12]
 800b210:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b218:	4407      	add	r7, r0
 800b21a:	eba8 0800 	sub.w	r8, r8, r0
 800b21e:	e7e7      	b.n	800b1f0 <__sflush_r+0xd4>
 800b220:	dfbffffe 	.word	0xdfbffffe

0800b224 <_fflush_r>:
 800b224:	b538      	push	{r3, r4, r5, lr}
 800b226:	690b      	ldr	r3, [r1, #16]
 800b228:	4605      	mov	r5, r0
 800b22a:	460c      	mov	r4, r1
 800b22c:	b913      	cbnz	r3, 800b234 <_fflush_r+0x10>
 800b22e:	2500      	movs	r5, #0
 800b230:	4628      	mov	r0, r5
 800b232:	bd38      	pop	{r3, r4, r5, pc}
 800b234:	b118      	cbz	r0, 800b23e <_fflush_r+0x1a>
 800b236:	6a03      	ldr	r3, [r0, #32]
 800b238:	b90b      	cbnz	r3, 800b23e <_fflush_r+0x1a>
 800b23a:	f7fe feb5 	bl	8009fa8 <__sinit>
 800b23e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d0f3      	beq.n	800b22e <_fflush_r+0xa>
 800b246:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b248:	07d0      	lsls	r0, r2, #31
 800b24a:	d404      	bmi.n	800b256 <_fflush_r+0x32>
 800b24c:	0599      	lsls	r1, r3, #22
 800b24e:	d402      	bmi.n	800b256 <_fflush_r+0x32>
 800b250:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b252:	f7fe ff10 	bl	800a076 <__retarget_lock_acquire_recursive>
 800b256:	4628      	mov	r0, r5
 800b258:	4621      	mov	r1, r4
 800b25a:	f7ff ff5f 	bl	800b11c <__sflush_r>
 800b25e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b260:	07da      	lsls	r2, r3, #31
 800b262:	4605      	mov	r5, r0
 800b264:	d4e4      	bmi.n	800b230 <_fflush_r+0xc>
 800b266:	89a3      	ldrh	r3, [r4, #12]
 800b268:	059b      	lsls	r3, r3, #22
 800b26a:	d4e1      	bmi.n	800b230 <_fflush_r+0xc>
 800b26c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b26e:	f7fe ff03 	bl	800a078 <__retarget_lock_release_recursive>
 800b272:	e7dd      	b.n	800b230 <_fflush_r+0xc>

0800b274 <__malloc_lock>:
 800b274:	4801      	ldr	r0, [pc, #4]	@ (800b27c <__malloc_lock+0x8>)
 800b276:	f7fe befe 	b.w	800a076 <__retarget_lock_acquire_recursive>
 800b27a:	bf00      	nop
 800b27c:	2001f4a8 	.word	0x2001f4a8

0800b280 <__malloc_unlock>:
 800b280:	4801      	ldr	r0, [pc, #4]	@ (800b288 <__malloc_unlock+0x8>)
 800b282:	f7fe bef9 	b.w	800a078 <__retarget_lock_release_recursive>
 800b286:	bf00      	nop
 800b288:	2001f4a8 	.word	0x2001f4a8

0800b28c <_Balloc>:
 800b28c:	b570      	push	{r4, r5, r6, lr}
 800b28e:	69c6      	ldr	r6, [r0, #28]
 800b290:	4604      	mov	r4, r0
 800b292:	460d      	mov	r5, r1
 800b294:	b976      	cbnz	r6, 800b2b4 <_Balloc+0x28>
 800b296:	2010      	movs	r0, #16
 800b298:	f7ff fe96 	bl	800afc8 <malloc>
 800b29c:	4602      	mov	r2, r0
 800b29e:	61e0      	str	r0, [r4, #28]
 800b2a0:	b920      	cbnz	r0, 800b2ac <_Balloc+0x20>
 800b2a2:	4b18      	ldr	r3, [pc, #96]	@ (800b304 <_Balloc+0x78>)
 800b2a4:	4818      	ldr	r0, [pc, #96]	@ (800b308 <_Balloc+0x7c>)
 800b2a6:	216b      	movs	r1, #107	@ 0x6b
 800b2a8:	f000 fc62 	bl	800bb70 <__assert_func>
 800b2ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b2b0:	6006      	str	r6, [r0, #0]
 800b2b2:	60c6      	str	r6, [r0, #12]
 800b2b4:	69e6      	ldr	r6, [r4, #28]
 800b2b6:	68f3      	ldr	r3, [r6, #12]
 800b2b8:	b183      	cbz	r3, 800b2dc <_Balloc+0x50>
 800b2ba:	69e3      	ldr	r3, [r4, #28]
 800b2bc:	68db      	ldr	r3, [r3, #12]
 800b2be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b2c2:	b9b8      	cbnz	r0, 800b2f4 <_Balloc+0x68>
 800b2c4:	2101      	movs	r1, #1
 800b2c6:	fa01 f605 	lsl.w	r6, r1, r5
 800b2ca:	1d72      	adds	r2, r6, #5
 800b2cc:	0092      	lsls	r2, r2, #2
 800b2ce:	4620      	mov	r0, r4
 800b2d0:	f000 fc6c 	bl	800bbac <_calloc_r>
 800b2d4:	b160      	cbz	r0, 800b2f0 <_Balloc+0x64>
 800b2d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b2da:	e00e      	b.n	800b2fa <_Balloc+0x6e>
 800b2dc:	2221      	movs	r2, #33	@ 0x21
 800b2de:	2104      	movs	r1, #4
 800b2e0:	4620      	mov	r0, r4
 800b2e2:	f000 fc63 	bl	800bbac <_calloc_r>
 800b2e6:	69e3      	ldr	r3, [r4, #28]
 800b2e8:	60f0      	str	r0, [r6, #12]
 800b2ea:	68db      	ldr	r3, [r3, #12]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d1e4      	bne.n	800b2ba <_Balloc+0x2e>
 800b2f0:	2000      	movs	r0, #0
 800b2f2:	bd70      	pop	{r4, r5, r6, pc}
 800b2f4:	6802      	ldr	r2, [r0, #0]
 800b2f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b300:	e7f7      	b.n	800b2f2 <_Balloc+0x66>
 800b302:	bf00      	nop
 800b304:	0800c4a9 	.word	0x0800c4a9
 800b308:	0800c53a 	.word	0x0800c53a

0800b30c <_Bfree>:
 800b30c:	b570      	push	{r4, r5, r6, lr}
 800b30e:	69c6      	ldr	r6, [r0, #28]
 800b310:	4605      	mov	r5, r0
 800b312:	460c      	mov	r4, r1
 800b314:	b976      	cbnz	r6, 800b334 <_Bfree+0x28>
 800b316:	2010      	movs	r0, #16
 800b318:	f7ff fe56 	bl	800afc8 <malloc>
 800b31c:	4602      	mov	r2, r0
 800b31e:	61e8      	str	r0, [r5, #28]
 800b320:	b920      	cbnz	r0, 800b32c <_Bfree+0x20>
 800b322:	4b09      	ldr	r3, [pc, #36]	@ (800b348 <_Bfree+0x3c>)
 800b324:	4809      	ldr	r0, [pc, #36]	@ (800b34c <_Bfree+0x40>)
 800b326:	218f      	movs	r1, #143	@ 0x8f
 800b328:	f000 fc22 	bl	800bb70 <__assert_func>
 800b32c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b330:	6006      	str	r6, [r0, #0]
 800b332:	60c6      	str	r6, [r0, #12]
 800b334:	b13c      	cbz	r4, 800b346 <_Bfree+0x3a>
 800b336:	69eb      	ldr	r3, [r5, #28]
 800b338:	6862      	ldr	r2, [r4, #4]
 800b33a:	68db      	ldr	r3, [r3, #12]
 800b33c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b340:	6021      	str	r1, [r4, #0]
 800b342:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b346:	bd70      	pop	{r4, r5, r6, pc}
 800b348:	0800c4a9 	.word	0x0800c4a9
 800b34c:	0800c53a 	.word	0x0800c53a

0800b350 <__multadd>:
 800b350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b354:	690d      	ldr	r5, [r1, #16]
 800b356:	4607      	mov	r7, r0
 800b358:	460c      	mov	r4, r1
 800b35a:	461e      	mov	r6, r3
 800b35c:	f101 0c14 	add.w	ip, r1, #20
 800b360:	2000      	movs	r0, #0
 800b362:	f8dc 3000 	ldr.w	r3, [ip]
 800b366:	b299      	uxth	r1, r3
 800b368:	fb02 6101 	mla	r1, r2, r1, r6
 800b36c:	0c1e      	lsrs	r6, r3, #16
 800b36e:	0c0b      	lsrs	r3, r1, #16
 800b370:	fb02 3306 	mla	r3, r2, r6, r3
 800b374:	b289      	uxth	r1, r1
 800b376:	3001      	adds	r0, #1
 800b378:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b37c:	4285      	cmp	r5, r0
 800b37e:	f84c 1b04 	str.w	r1, [ip], #4
 800b382:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b386:	dcec      	bgt.n	800b362 <__multadd+0x12>
 800b388:	b30e      	cbz	r6, 800b3ce <__multadd+0x7e>
 800b38a:	68a3      	ldr	r3, [r4, #8]
 800b38c:	42ab      	cmp	r3, r5
 800b38e:	dc19      	bgt.n	800b3c4 <__multadd+0x74>
 800b390:	6861      	ldr	r1, [r4, #4]
 800b392:	4638      	mov	r0, r7
 800b394:	3101      	adds	r1, #1
 800b396:	f7ff ff79 	bl	800b28c <_Balloc>
 800b39a:	4680      	mov	r8, r0
 800b39c:	b928      	cbnz	r0, 800b3aa <__multadd+0x5a>
 800b39e:	4602      	mov	r2, r0
 800b3a0:	4b0c      	ldr	r3, [pc, #48]	@ (800b3d4 <__multadd+0x84>)
 800b3a2:	480d      	ldr	r0, [pc, #52]	@ (800b3d8 <__multadd+0x88>)
 800b3a4:	21ba      	movs	r1, #186	@ 0xba
 800b3a6:	f000 fbe3 	bl	800bb70 <__assert_func>
 800b3aa:	6922      	ldr	r2, [r4, #16]
 800b3ac:	3202      	adds	r2, #2
 800b3ae:	f104 010c 	add.w	r1, r4, #12
 800b3b2:	0092      	lsls	r2, r2, #2
 800b3b4:	300c      	adds	r0, #12
 800b3b6:	f000 fbcd 	bl	800bb54 <memcpy>
 800b3ba:	4621      	mov	r1, r4
 800b3bc:	4638      	mov	r0, r7
 800b3be:	f7ff ffa5 	bl	800b30c <_Bfree>
 800b3c2:	4644      	mov	r4, r8
 800b3c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b3c8:	3501      	adds	r5, #1
 800b3ca:	615e      	str	r6, [r3, #20]
 800b3cc:	6125      	str	r5, [r4, #16]
 800b3ce:	4620      	mov	r0, r4
 800b3d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3d4:	0800c518 	.word	0x0800c518
 800b3d8:	0800c53a 	.word	0x0800c53a

0800b3dc <__hi0bits>:
 800b3dc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b3e0:	4603      	mov	r3, r0
 800b3e2:	bf36      	itet	cc
 800b3e4:	0403      	lslcc	r3, r0, #16
 800b3e6:	2000      	movcs	r0, #0
 800b3e8:	2010      	movcc	r0, #16
 800b3ea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b3ee:	bf3c      	itt	cc
 800b3f0:	021b      	lslcc	r3, r3, #8
 800b3f2:	3008      	addcc	r0, #8
 800b3f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b3f8:	bf3c      	itt	cc
 800b3fa:	011b      	lslcc	r3, r3, #4
 800b3fc:	3004      	addcc	r0, #4
 800b3fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b402:	bf3c      	itt	cc
 800b404:	009b      	lslcc	r3, r3, #2
 800b406:	3002      	addcc	r0, #2
 800b408:	2b00      	cmp	r3, #0
 800b40a:	db05      	blt.n	800b418 <__hi0bits+0x3c>
 800b40c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b410:	f100 0001 	add.w	r0, r0, #1
 800b414:	bf08      	it	eq
 800b416:	2020      	moveq	r0, #32
 800b418:	4770      	bx	lr

0800b41a <__lo0bits>:
 800b41a:	6803      	ldr	r3, [r0, #0]
 800b41c:	4602      	mov	r2, r0
 800b41e:	f013 0007 	ands.w	r0, r3, #7
 800b422:	d00b      	beq.n	800b43c <__lo0bits+0x22>
 800b424:	07d9      	lsls	r1, r3, #31
 800b426:	d421      	bmi.n	800b46c <__lo0bits+0x52>
 800b428:	0798      	lsls	r0, r3, #30
 800b42a:	bf49      	itett	mi
 800b42c:	085b      	lsrmi	r3, r3, #1
 800b42e:	089b      	lsrpl	r3, r3, #2
 800b430:	2001      	movmi	r0, #1
 800b432:	6013      	strmi	r3, [r2, #0]
 800b434:	bf5c      	itt	pl
 800b436:	6013      	strpl	r3, [r2, #0]
 800b438:	2002      	movpl	r0, #2
 800b43a:	4770      	bx	lr
 800b43c:	b299      	uxth	r1, r3
 800b43e:	b909      	cbnz	r1, 800b444 <__lo0bits+0x2a>
 800b440:	0c1b      	lsrs	r3, r3, #16
 800b442:	2010      	movs	r0, #16
 800b444:	b2d9      	uxtb	r1, r3
 800b446:	b909      	cbnz	r1, 800b44c <__lo0bits+0x32>
 800b448:	3008      	adds	r0, #8
 800b44a:	0a1b      	lsrs	r3, r3, #8
 800b44c:	0719      	lsls	r1, r3, #28
 800b44e:	bf04      	itt	eq
 800b450:	091b      	lsreq	r3, r3, #4
 800b452:	3004      	addeq	r0, #4
 800b454:	0799      	lsls	r1, r3, #30
 800b456:	bf04      	itt	eq
 800b458:	089b      	lsreq	r3, r3, #2
 800b45a:	3002      	addeq	r0, #2
 800b45c:	07d9      	lsls	r1, r3, #31
 800b45e:	d403      	bmi.n	800b468 <__lo0bits+0x4e>
 800b460:	085b      	lsrs	r3, r3, #1
 800b462:	f100 0001 	add.w	r0, r0, #1
 800b466:	d003      	beq.n	800b470 <__lo0bits+0x56>
 800b468:	6013      	str	r3, [r2, #0]
 800b46a:	4770      	bx	lr
 800b46c:	2000      	movs	r0, #0
 800b46e:	4770      	bx	lr
 800b470:	2020      	movs	r0, #32
 800b472:	4770      	bx	lr

0800b474 <__i2b>:
 800b474:	b510      	push	{r4, lr}
 800b476:	460c      	mov	r4, r1
 800b478:	2101      	movs	r1, #1
 800b47a:	f7ff ff07 	bl	800b28c <_Balloc>
 800b47e:	4602      	mov	r2, r0
 800b480:	b928      	cbnz	r0, 800b48e <__i2b+0x1a>
 800b482:	4b05      	ldr	r3, [pc, #20]	@ (800b498 <__i2b+0x24>)
 800b484:	4805      	ldr	r0, [pc, #20]	@ (800b49c <__i2b+0x28>)
 800b486:	f240 1145 	movw	r1, #325	@ 0x145
 800b48a:	f000 fb71 	bl	800bb70 <__assert_func>
 800b48e:	2301      	movs	r3, #1
 800b490:	6144      	str	r4, [r0, #20]
 800b492:	6103      	str	r3, [r0, #16]
 800b494:	bd10      	pop	{r4, pc}
 800b496:	bf00      	nop
 800b498:	0800c518 	.word	0x0800c518
 800b49c:	0800c53a 	.word	0x0800c53a

0800b4a0 <__multiply>:
 800b4a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4a4:	4614      	mov	r4, r2
 800b4a6:	690a      	ldr	r2, [r1, #16]
 800b4a8:	6923      	ldr	r3, [r4, #16]
 800b4aa:	429a      	cmp	r2, r3
 800b4ac:	bfa8      	it	ge
 800b4ae:	4623      	movge	r3, r4
 800b4b0:	460f      	mov	r7, r1
 800b4b2:	bfa4      	itt	ge
 800b4b4:	460c      	movge	r4, r1
 800b4b6:	461f      	movge	r7, r3
 800b4b8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b4bc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b4c0:	68a3      	ldr	r3, [r4, #8]
 800b4c2:	6861      	ldr	r1, [r4, #4]
 800b4c4:	eb0a 0609 	add.w	r6, sl, r9
 800b4c8:	42b3      	cmp	r3, r6
 800b4ca:	b085      	sub	sp, #20
 800b4cc:	bfb8      	it	lt
 800b4ce:	3101      	addlt	r1, #1
 800b4d0:	f7ff fedc 	bl	800b28c <_Balloc>
 800b4d4:	b930      	cbnz	r0, 800b4e4 <__multiply+0x44>
 800b4d6:	4602      	mov	r2, r0
 800b4d8:	4b44      	ldr	r3, [pc, #272]	@ (800b5ec <__multiply+0x14c>)
 800b4da:	4845      	ldr	r0, [pc, #276]	@ (800b5f0 <__multiply+0x150>)
 800b4dc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b4e0:	f000 fb46 	bl	800bb70 <__assert_func>
 800b4e4:	f100 0514 	add.w	r5, r0, #20
 800b4e8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b4ec:	462b      	mov	r3, r5
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	4543      	cmp	r3, r8
 800b4f2:	d321      	bcc.n	800b538 <__multiply+0x98>
 800b4f4:	f107 0114 	add.w	r1, r7, #20
 800b4f8:	f104 0214 	add.w	r2, r4, #20
 800b4fc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b500:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b504:	9302      	str	r3, [sp, #8]
 800b506:	1b13      	subs	r3, r2, r4
 800b508:	3b15      	subs	r3, #21
 800b50a:	f023 0303 	bic.w	r3, r3, #3
 800b50e:	3304      	adds	r3, #4
 800b510:	f104 0715 	add.w	r7, r4, #21
 800b514:	42ba      	cmp	r2, r7
 800b516:	bf38      	it	cc
 800b518:	2304      	movcc	r3, #4
 800b51a:	9301      	str	r3, [sp, #4]
 800b51c:	9b02      	ldr	r3, [sp, #8]
 800b51e:	9103      	str	r1, [sp, #12]
 800b520:	428b      	cmp	r3, r1
 800b522:	d80c      	bhi.n	800b53e <__multiply+0x9e>
 800b524:	2e00      	cmp	r6, #0
 800b526:	dd03      	ble.n	800b530 <__multiply+0x90>
 800b528:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d05b      	beq.n	800b5e8 <__multiply+0x148>
 800b530:	6106      	str	r6, [r0, #16]
 800b532:	b005      	add	sp, #20
 800b534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b538:	f843 2b04 	str.w	r2, [r3], #4
 800b53c:	e7d8      	b.n	800b4f0 <__multiply+0x50>
 800b53e:	f8b1 a000 	ldrh.w	sl, [r1]
 800b542:	f1ba 0f00 	cmp.w	sl, #0
 800b546:	d024      	beq.n	800b592 <__multiply+0xf2>
 800b548:	f104 0e14 	add.w	lr, r4, #20
 800b54c:	46a9      	mov	r9, r5
 800b54e:	f04f 0c00 	mov.w	ip, #0
 800b552:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b556:	f8d9 3000 	ldr.w	r3, [r9]
 800b55a:	fa1f fb87 	uxth.w	fp, r7
 800b55e:	b29b      	uxth	r3, r3
 800b560:	fb0a 330b 	mla	r3, sl, fp, r3
 800b564:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b568:	f8d9 7000 	ldr.w	r7, [r9]
 800b56c:	4463      	add	r3, ip
 800b56e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b572:	fb0a c70b 	mla	r7, sl, fp, ip
 800b576:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b57a:	b29b      	uxth	r3, r3
 800b57c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b580:	4572      	cmp	r2, lr
 800b582:	f849 3b04 	str.w	r3, [r9], #4
 800b586:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b58a:	d8e2      	bhi.n	800b552 <__multiply+0xb2>
 800b58c:	9b01      	ldr	r3, [sp, #4]
 800b58e:	f845 c003 	str.w	ip, [r5, r3]
 800b592:	9b03      	ldr	r3, [sp, #12]
 800b594:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b598:	3104      	adds	r1, #4
 800b59a:	f1b9 0f00 	cmp.w	r9, #0
 800b59e:	d021      	beq.n	800b5e4 <__multiply+0x144>
 800b5a0:	682b      	ldr	r3, [r5, #0]
 800b5a2:	f104 0c14 	add.w	ip, r4, #20
 800b5a6:	46ae      	mov	lr, r5
 800b5a8:	f04f 0a00 	mov.w	sl, #0
 800b5ac:	f8bc b000 	ldrh.w	fp, [ip]
 800b5b0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b5b4:	fb09 770b 	mla	r7, r9, fp, r7
 800b5b8:	4457      	add	r7, sl
 800b5ba:	b29b      	uxth	r3, r3
 800b5bc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b5c0:	f84e 3b04 	str.w	r3, [lr], #4
 800b5c4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b5c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b5cc:	f8be 3000 	ldrh.w	r3, [lr]
 800b5d0:	fb09 330a 	mla	r3, r9, sl, r3
 800b5d4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b5d8:	4562      	cmp	r2, ip
 800b5da:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b5de:	d8e5      	bhi.n	800b5ac <__multiply+0x10c>
 800b5e0:	9f01      	ldr	r7, [sp, #4]
 800b5e2:	51eb      	str	r3, [r5, r7]
 800b5e4:	3504      	adds	r5, #4
 800b5e6:	e799      	b.n	800b51c <__multiply+0x7c>
 800b5e8:	3e01      	subs	r6, #1
 800b5ea:	e79b      	b.n	800b524 <__multiply+0x84>
 800b5ec:	0800c518 	.word	0x0800c518
 800b5f0:	0800c53a 	.word	0x0800c53a

0800b5f4 <__pow5mult>:
 800b5f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5f8:	4615      	mov	r5, r2
 800b5fa:	f012 0203 	ands.w	r2, r2, #3
 800b5fe:	4607      	mov	r7, r0
 800b600:	460e      	mov	r6, r1
 800b602:	d007      	beq.n	800b614 <__pow5mult+0x20>
 800b604:	4c25      	ldr	r4, [pc, #148]	@ (800b69c <__pow5mult+0xa8>)
 800b606:	3a01      	subs	r2, #1
 800b608:	2300      	movs	r3, #0
 800b60a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b60e:	f7ff fe9f 	bl	800b350 <__multadd>
 800b612:	4606      	mov	r6, r0
 800b614:	10ad      	asrs	r5, r5, #2
 800b616:	d03d      	beq.n	800b694 <__pow5mult+0xa0>
 800b618:	69fc      	ldr	r4, [r7, #28]
 800b61a:	b97c      	cbnz	r4, 800b63c <__pow5mult+0x48>
 800b61c:	2010      	movs	r0, #16
 800b61e:	f7ff fcd3 	bl	800afc8 <malloc>
 800b622:	4602      	mov	r2, r0
 800b624:	61f8      	str	r0, [r7, #28]
 800b626:	b928      	cbnz	r0, 800b634 <__pow5mult+0x40>
 800b628:	4b1d      	ldr	r3, [pc, #116]	@ (800b6a0 <__pow5mult+0xac>)
 800b62a:	481e      	ldr	r0, [pc, #120]	@ (800b6a4 <__pow5mult+0xb0>)
 800b62c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b630:	f000 fa9e 	bl	800bb70 <__assert_func>
 800b634:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b638:	6004      	str	r4, [r0, #0]
 800b63a:	60c4      	str	r4, [r0, #12]
 800b63c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b640:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b644:	b94c      	cbnz	r4, 800b65a <__pow5mult+0x66>
 800b646:	f240 2171 	movw	r1, #625	@ 0x271
 800b64a:	4638      	mov	r0, r7
 800b64c:	f7ff ff12 	bl	800b474 <__i2b>
 800b650:	2300      	movs	r3, #0
 800b652:	f8c8 0008 	str.w	r0, [r8, #8]
 800b656:	4604      	mov	r4, r0
 800b658:	6003      	str	r3, [r0, #0]
 800b65a:	f04f 0900 	mov.w	r9, #0
 800b65e:	07eb      	lsls	r3, r5, #31
 800b660:	d50a      	bpl.n	800b678 <__pow5mult+0x84>
 800b662:	4631      	mov	r1, r6
 800b664:	4622      	mov	r2, r4
 800b666:	4638      	mov	r0, r7
 800b668:	f7ff ff1a 	bl	800b4a0 <__multiply>
 800b66c:	4631      	mov	r1, r6
 800b66e:	4680      	mov	r8, r0
 800b670:	4638      	mov	r0, r7
 800b672:	f7ff fe4b 	bl	800b30c <_Bfree>
 800b676:	4646      	mov	r6, r8
 800b678:	106d      	asrs	r5, r5, #1
 800b67a:	d00b      	beq.n	800b694 <__pow5mult+0xa0>
 800b67c:	6820      	ldr	r0, [r4, #0]
 800b67e:	b938      	cbnz	r0, 800b690 <__pow5mult+0x9c>
 800b680:	4622      	mov	r2, r4
 800b682:	4621      	mov	r1, r4
 800b684:	4638      	mov	r0, r7
 800b686:	f7ff ff0b 	bl	800b4a0 <__multiply>
 800b68a:	6020      	str	r0, [r4, #0]
 800b68c:	f8c0 9000 	str.w	r9, [r0]
 800b690:	4604      	mov	r4, r0
 800b692:	e7e4      	b.n	800b65e <__pow5mult+0x6a>
 800b694:	4630      	mov	r0, r6
 800b696:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b69a:	bf00      	nop
 800b69c:	0800c594 	.word	0x0800c594
 800b6a0:	0800c4a9 	.word	0x0800c4a9
 800b6a4:	0800c53a 	.word	0x0800c53a

0800b6a8 <__lshift>:
 800b6a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6ac:	460c      	mov	r4, r1
 800b6ae:	6849      	ldr	r1, [r1, #4]
 800b6b0:	6923      	ldr	r3, [r4, #16]
 800b6b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b6b6:	68a3      	ldr	r3, [r4, #8]
 800b6b8:	4607      	mov	r7, r0
 800b6ba:	4691      	mov	r9, r2
 800b6bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b6c0:	f108 0601 	add.w	r6, r8, #1
 800b6c4:	42b3      	cmp	r3, r6
 800b6c6:	db0b      	blt.n	800b6e0 <__lshift+0x38>
 800b6c8:	4638      	mov	r0, r7
 800b6ca:	f7ff fddf 	bl	800b28c <_Balloc>
 800b6ce:	4605      	mov	r5, r0
 800b6d0:	b948      	cbnz	r0, 800b6e6 <__lshift+0x3e>
 800b6d2:	4602      	mov	r2, r0
 800b6d4:	4b28      	ldr	r3, [pc, #160]	@ (800b778 <__lshift+0xd0>)
 800b6d6:	4829      	ldr	r0, [pc, #164]	@ (800b77c <__lshift+0xd4>)
 800b6d8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b6dc:	f000 fa48 	bl	800bb70 <__assert_func>
 800b6e0:	3101      	adds	r1, #1
 800b6e2:	005b      	lsls	r3, r3, #1
 800b6e4:	e7ee      	b.n	800b6c4 <__lshift+0x1c>
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	f100 0114 	add.w	r1, r0, #20
 800b6ec:	f100 0210 	add.w	r2, r0, #16
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	4553      	cmp	r3, sl
 800b6f4:	db33      	blt.n	800b75e <__lshift+0xb6>
 800b6f6:	6920      	ldr	r0, [r4, #16]
 800b6f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b6fc:	f104 0314 	add.w	r3, r4, #20
 800b700:	f019 091f 	ands.w	r9, r9, #31
 800b704:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b708:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b70c:	d02b      	beq.n	800b766 <__lshift+0xbe>
 800b70e:	f1c9 0e20 	rsb	lr, r9, #32
 800b712:	468a      	mov	sl, r1
 800b714:	2200      	movs	r2, #0
 800b716:	6818      	ldr	r0, [r3, #0]
 800b718:	fa00 f009 	lsl.w	r0, r0, r9
 800b71c:	4310      	orrs	r0, r2
 800b71e:	f84a 0b04 	str.w	r0, [sl], #4
 800b722:	f853 2b04 	ldr.w	r2, [r3], #4
 800b726:	459c      	cmp	ip, r3
 800b728:	fa22 f20e 	lsr.w	r2, r2, lr
 800b72c:	d8f3      	bhi.n	800b716 <__lshift+0x6e>
 800b72e:	ebac 0304 	sub.w	r3, ip, r4
 800b732:	3b15      	subs	r3, #21
 800b734:	f023 0303 	bic.w	r3, r3, #3
 800b738:	3304      	adds	r3, #4
 800b73a:	f104 0015 	add.w	r0, r4, #21
 800b73e:	4584      	cmp	ip, r0
 800b740:	bf38      	it	cc
 800b742:	2304      	movcc	r3, #4
 800b744:	50ca      	str	r2, [r1, r3]
 800b746:	b10a      	cbz	r2, 800b74c <__lshift+0xa4>
 800b748:	f108 0602 	add.w	r6, r8, #2
 800b74c:	3e01      	subs	r6, #1
 800b74e:	4638      	mov	r0, r7
 800b750:	612e      	str	r6, [r5, #16]
 800b752:	4621      	mov	r1, r4
 800b754:	f7ff fdda 	bl	800b30c <_Bfree>
 800b758:	4628      	mov	r0, r5
 800b75a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b75e:	f842 0f04 	str.w	r0, [r2, #4]!
 800b762:	3301      	adds	r3, #1
 800b764:	e7c5      	b.n	800b6f2 <__lshift+0x4a>
 800b766:	3904      	subs	r1, #4
 800b768:	f853 2b04 	ldr.w	r2, [r3], #4
 800b76c:	f841 2f04 	str.w	r2, [r1, #4]!
 800b770:	459c      	cmp	ip, r3
 800b772:	d8f9      	bhi.n	800b768 <__lshift+0xc0>
 800b774:	e7ea      	b.n	800b74c <__lshift+0xa4>
 800b776:	bf00      	nop
 800b778:	0800c518 	.word	0x0800c518
 800b77c:	0800c53a 	.word	0x0800c53a

0800b780 <__mcmp>:
 800b780:	690a      	ldr	r2, [r1, #16]
 800b782:	4603      	mov	r3, r0
 800b784:	6900      	ldr	r0, [r0, #16]
 800b786:	1a80      	subs	r0, r0, r2
 800b788:	b530      	push	{r4, r5, lr}
 800b78a:	d10e      	bne.n	800b7aa <__mcmp+0x2a>
 800b78c:	3314      	adds	r3, #20
 800b78e:	3114      	adds	r1, #20
 800b790:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b794:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b798:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b79c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b7a0:	4295      	cmp	r5, r2
 800b7a2:	d003      	beq.n	800b7ac <__mcmp+0x2c>
 800b7a4:	d205      	bcs.n	800b7b2 <__mcmp+0x32>
 800b7a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b7aa:	bd30      	pop	{r4, r5, pc}
 800b7ac:	42a3      	cmp	r3, r4
 800b7ae:	d3f3      	bcc.n	800b798 <__mcmp+0x18>
 800b7b0:	e7fb      	b.n	800b7aa <__mcmp+0x2a>
 800b7b2:	2001      	movs	r0, #1
 800b7b4:	e7f9      	b.n	800b7aa <__mcmp+0x2a>
	...

0800b7b8 <__mdiff>:
 800b7b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7bc:	4689      	mov	r9, r1
 800b7be:	4606      	mov	r6, r0
 800b7c0:	4611      	mov	r1, r2
 800b7c2:	4648      	mov	r0, r9
 800b7c4:	4614      	mov	r4, r2
 800b7c6:	f7ff ffdb 	bl	800b780 <__mcmp>
 800b7ca:	1e05      	subs	r5, r0, #0
 800b7cc:	d112      	bne.n	800b7f4 <__mdiff+0x3c>
 800b7ce:	4629      	mov	r1, r5
 800b7d0:	4630      	mov	r0, r6
 800b7d2:	f7ff fd5b 	bl	800b28c <_Balloc>
 800b7d6:	4602      	mov	r2, r0
 800b7d8:	b928      	cbnz	r0, 800b7e6 <__mdiff+0x2e>
 800b7da:	4b3f      	ldr	r3, [pc, #252]	@ (800b8d8 <__mdiff+0x120>)
 800b7dc:	f240 2137 	movw	r1, #567	@ 0x237
 800b7e0:	483e      	ldr	r0, [pc, #248]	@ (800b8dc <__mdiff+0x124>)
 800b7e2:	f000 f9c5 	bl	800bb70 <__assert_func>
 800b7e6:	2301      	movs	r3, #1
 800b7e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b7ec:	4610      	mov	r0, r2
 800b7ee:	b003      	add	sp, #12
 800b7f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7f4:	bfbc      	itt	lt
 800b7f6:	464b      	movlt	r3, r9
 800b7f8:	46a1      	movlt	r9, r4
 800b7fa:	4630      	mov	r0, r6
 800b7fc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b800:	bfba      	itte	lt
 800b802:	461c      	movlt	r4, r3
 800b804:	2501      	movlt	r5, #1
 800b806:	2500      	movge	r5, #0
 800b808:	f7ff fd40 	bl	800b28c <_Balloc>
 800b80c:	4602      	mov	r2, r0
 800b80e:	b918      	cbnz	r0, 800b818 <__mdiff+0x60>
 800b810:	4b31      	ldr	r3, [pc, #196]	@ (800b8d8 <__mdiff+0x120>)
 800b812:	f240 2145 	movw	r1, #581	@ 0x245
 800b816:	e7e3      	b.n	800b7e0 <__mdiff+0x28>
 800b818:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b81c:	6926      	ldr	r6, [r4, #16]
 800b81e:	60c5      	str	r5, [r0, #12]
 800b820:	f109 0310 	add.w	r3, r9, #16
 800b824:	f109 0514 	add.w	r5, r9, #20
 800b828:	f104 0e14 	add.w	lr, r4, #20
 800b82c:	f100 0b14 	add.w	fp, r0, #20
 800b830:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b834:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b838:	9301      	str	r3, [sp, #4]
 800b83a:	46d9      	mov	r9, fp
 800b83c:	f04f 0c00 	mov.w	ip, #0
 800b840:	9b01      	ldr	r3, [sp, #4]
 800b842:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b846:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b84a:	9301      	str	r3, [sp, #4]
 800b84c:	fa1f f38a 	uxth.w	r3, sl
 800b850:	4619      	mov	r1, r3
 800b852:	b283      	uxth	r3, r0
 800b854:	1acb      	subs	r3, r1, r3
 800b856:	0c00      	lsrs	r0, r0, #16
 800b858:	4463      	add	r3, ip
 800b85a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b85e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b862:	b29b      	uxth	r3, r3
 800b864:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b868:	4576      	cmp	r6, lr
 800b86a:	f849 3b04 	str.w	r3, [r9], #4
 800b86e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b872:	d8e5      	bhi.n	800b840 <__mdiff+0x88>
 800b874:	1b33      	subs	r3, r6, r4
 800b876:	3b15      	subs	r3, #21
 800b878:	f023 0303 	bic.w	r3, r3, #3
 800b87c:	3415      	adds	r4, #21
 800b87e:	3304      	adds	r3, #4
 800b880:	42a6      	cmp	r6, r4
 800b882:	bf38      	it	cc
 800b884:	2304      	movcc	r3, #4
 800b886:	441d      	add	r5, r3
 800b888:	445b      	add	r3, fp
 800b88a:	461e      	mov	r6, r3
 800b88c:	462c      	mov	r4, r5
 800b88e:	4544      	cmp	r4, r8
 800b890:	d30e      	bcc.n	800b8b0 <__mdiff+0xf8>
 800b892:	f108 0103 	add.w	r1, r8, #3
 800b896:	1b49      	subs	r1, r1, r5
 800b898:	f021 0103 	bic.w	r1, r1, #3
 800b89c:	3d03      	subs	r5, #3
 800b89e:	45a8      	cmp	r8, r5
 800b8a0:	bf38      	it	cc
 800b8a2:	2100      	movcc	r1, #0
 800b8a4:	440b      	add	r3, r1
 800b8a6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b8aa:	b191      	cbz	r1, 800b8d2 <__mdiff+0x11a>
 800b8ac:	6117      	str	r7, [r2, #16]
 800b8ae:	e79d      	b.n	800b7ec <__mdiff+0x34>
 800b8b0:	f854 1b04 	ldr.w	r1, [r4], #4
 800b8b4:	46e6      	mov	lr, ip
 800b8b6:	0c08      	lsrs	r0, r1, #16
 800b8b8:	fa1c fc81 	uxtah	ip, ip, r1
 800b8bc:	4471      	add	r1, lr
 800b8be:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b8c2:	b289      	uxth	r1, r1
 800b8c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b8c8:	f846 1b04 	str.w	r1, [r6], #4
 800b8cc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b8d0:	e7dd      	b.n	800b88e <__mdiff+0xd6>
 800b8d2:	3f01      	subs	r7, #1
 800b8d4:	e7e7      	b.n	800b8a6 <__mdiff+0xee>
 800b8d6:	bf00      	nop
 800b8d8:	0800c518 	.word	0x0800c518
 800b8dc:	0800c53a 	.word	0x0800c53a

0800b8e0 <__d2b>:
 800b8e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b8e4:	460f      	mov	r7, r1
 800b8e6:	2101      	movs	r1, #1
 800b8e8:	ec59 8b10 	vmov	r8, r9, d0
 800b8ec:	4616      	mov	r6, r2
 800b8ee:	f7ff fccd 	bl	800b28c <_Balloc>
 800b8f2:	4604      	mov	r4, r0
 800b8f4:	b930      	cbnz	r0, 800b904 <__d2b+0x24>
 800b8f6:	4602      	mov	r2, r0
 800b8f8:	4b23      	ldr	r3, [pc, #140]	@ (800b988 <__d2b+0xa8>)
 800b8fa:	4824      	ldr	r0, [pc, #144]	@ (800b98c <__d2b+0xac>)
 800b8fc:	f240 310f 	movw	r1, #783	@ 0x30f
 800b900:	f000 f936 	bl	800bb70 <__assert_func>
 800b904:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b908:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b90c:	b10d      	cbz	r5, 800b912 <__d2b+0x32>
 800b90e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b912:	9301      	str	r3, [sp, #4]
 800b914:	f1b8 0300 	subs.w	r3, r8, #0
 800b918:	d023      	beq.n	800b962 <__d2b+0x82>
 800b91a:	4668      	mov	r0, sp
 800b91c:	9300      	str	r3, [sp, #0]
 800b91e:	f7ff fd7c 	bl	800b41a <__lo0bits>
 800b922:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b926:	b1d0      	cbz	r0, 800b95e <__d2b+0x7e>
 800b928:	f1c0 0320 	rsb	r3, r0, #32
 800b92c:	fa02 f303 	lsl.w	r3, r2, r3
 800b930:	430b      	orrs	r3, r1
 800b932:	40c2      	lsrs	r2, r0
 800b934:	6163      	str	r3, [r4, #20]
 800b936:	9201      	str	r2, [sp, #4]
 800b938:	9b01      	ldr	r3, [sp, #4]
 800b93a:	61a3      	str	r3, [r4, #24]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	bf0c      	ite	eq
 800b940:	2201      	moveq	r2, #1
 800b942:	2202      	movne	r2, #2
 800b944:	6122      	str	r2, [r4, #16]
 800b946:	b1a5      	cbz	r5, 800b972 <__d2b+0x92>
 800b948:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b94c:	4405      	add	r5, r0
 800b94e:	603d      	str	r5, [r7, #0]
 800b950:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b954:	6030      	str	r0, [r6, #0]
 800b956:	4620      	mov	r0, r4
 800b958:	b003      	add	sp, #12
 800b95a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b95e:	6161      	str	r1, [r4, #20]
 800b960:	e7ea      	b.n	800b938 <__d2b+0x58>
 800b962:	a801      	add	r0, sp, #4
 800b964:	f7ff fd59 	bl	800b41a <__lo0bits>
 800b968:	9b01      	ldr	r3, [sp, #4]
 800b96a:	6163      	str	r3, [r4, #20]
 800b96c:	3020      	adds	r0, #32
 800b96e:	2201      	movs	r2, #1
 800b970:	e7e8      	b.n	800b944 <__d2b+0x64>
 800b972:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b976:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b97a:	6038      	str	r0, [r7, #0]
 800b97c:	6918      	ldr	r0, [r3, #16]
 800b97e:	f7ff fd2d 	bl	800b3dc <__hi0bits>
 800b982:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b986:	e7e5      	b.n	800b954 <__d2b+0x74>
 800b988:	0800c518 	.word	0x0800c518
 800b98c:	0800c53a 	.word	0x0800c53a

0800b990 <__sread>:
 800b990:	b510      	push	{r4, lr}
 800b992:	460c      	mov	r4, r1
 800b994:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b998:	f000 f8a8 	bl	800baec <_read_r>
 800b99c:	2800      	cmp	r0, #0
 800b99e:	bfab      	itete	ge
 800b9a0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b9a2:	89a3      	ldrhlt	r3, [r4, #12]
 800b9a4:	181b      	addge	r3, r3, r0
 800b9a6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b9aa:	bfac      	ite	ge
 800b9ac:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b9ae:	81a3      	strhlt	r3, [r4, #12]
 800b9b0:	bd10      	pop	{r4, pc}

0800b9b2 <__swrite>:
 800b9b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9b6:	461f      	mov	r7, r3
 800b9b8:	898b      	ldrh	r3, [r1, #12]
 800b9ba:	05db      	lsls	r3, r3, #23
 800b9bc:	4605      	mov	r5, r0
 800b9be:	460c      	mov	r4, r1
 800b9c0:	4616      	mov	r6, r2
 800b9c2:	d505      	bpl.n	800b9d0 <__swrite+0x1e>
 800b9c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9c8:	2302      	movs	r3, #2
 800b9ca:	2200      	movs	r2, #0
 800b9cc:	f000 f87c 	bl	800bac8 <_lseek_r>
 800b9d0:	89a3      	ldrh	r3, [r4, #12]
 800b9d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b9d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b9da:	81a3      	strh	r3, [r4, #12]
 800b9dc:	4632      	mov	r2, r6
 800b9de:	463b      	mov	r3, r7
 800b9e0:	4628      	mov	r0, r5
 800b9e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b9e6:	f000 b8a3 	b.w	800bb30 <_write_r>

0800b9ea <__sseek>:
 800b9ea:	b510      	push	{r4, lr}
 800b9ec:	460c      	mov	r4, r1
 800b9ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9f2:	f000 f869 	bl	800bac8 <_lseek_r>
 800b9f6:	1c43      	adds	r3, r0, #1
 800b9f8:	89a3      	ldrh	r3, [r4, #12]
 800b9fa:	bf15      	itete	ne
 800b9fc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b9fe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ba02:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ba06:	81a3      	strheq	r3, [r4, #12]
 800ba08:	bf18      	it	ne
 800ba0a:	81a3      	strhne	r3, [r4, #12]
 800ba0c:	bd10      	pop	{r4, pc}

0800ba0e <__sclose>:
 800ba0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba12:	f000 b849 	b.w	800baa8 <_close_r>

0800ba16 <_realloc_r>:
 800ba16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba1a:	4680      	mov	r8, r0
 800ba1c:	4615      	mov	r5, r2
 800ba1e:	460c      	mov	r4, r1
 800ba20:	b921      	cbnz	r1, 800ba2c <_realloc_r+0x16>
 800ba22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba26:	4611      	mov	r1, r2
 800ba28:	f7ff baf8 	b.w	800b01c <_malloc_r>
 800ba2c:	b92a      	cbnz	r2, 800ba3a <_realloc_r+0x24>
 800ba2e:	f000 f8d1 	bl	800bbd4 <_free_r>
 800ba32:	2400      	movs	r4, #0
 800ba34:	4620      	mov	r0, r4
 800ba36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba3a:	f000 f927 	bl	800bc8c <_malloc_usable_size_r>
 800ba3e:	4285      	cmp	r5, r0
 800ba40:	4606      	mov	r6, r0
 800ba42:	d802      	bhi.n	800ba4a <_realloc_r+0x34>
 800ba44:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ba48:	d8f4      	bhi.n	800ba34 <_realloc_r+0x1e>
 800ba4a:	4629      	mov	r1, r5
 800ba4c:	4640      	mov	r0, r8
 800ba4e:	f7ff fae5 	bl	800b01c <_malloc_r>
 800ba52:	4607      	mov	r7, r0
 800ba54:	2800      	cmp	r0, #0
 800ba56:	d0ec      	beq.n	800ba32 <_realloc_r+0x1c>
 800ba58:	42b5      	cmp	r5, r6
 800ba5a:	462a      	mov	r2, r5
 800ba5c:	4621      	mov	r1, r4
 800ba5e:	bf28      	it	cs
 800ba60:	4632      	movcs	r2, r6
 800ba62:	f000 f877 	bl	800bb54 <memcpy>
 800ba66:	4621      	mov	r1, r4
 800ba68:	4640      	mov	r0, r8
 800ba6a:	f000 f8b3 	bl	800bbd4 <_free_r>
 800ba6e:	463c      	mov	r4, r7
 800ba70:	e7e0      	b.n	800ba34 <_realloc_r+0x1e>

0800ba72 <memmove>:
 800ba72:	4288      	cmp	r0, r1
 800ba74:	b510      	push	{r4, lr}
 800ba76:	eb01 0402 	add.w	r4, r1, r2
 800ba7a:	d902      	bls.n	800ba82 <memmove+0x10>
 800ba7c:	4284      	cmp	r4, r0
 800ba7e:	4623      	mov	r3, r4
 800ba80:	d807      	bhi.n	800ba92 <memmove+0x20>
 800ba82:	1e43      	subs	r3, r0, #1
 800ba84:	42a1      	cmp	r1, r4
 800ba86:	d008      	beq.n	800ba9a <memmove+0x28>
 800ba88:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ba8c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ba90:	e7f8      	b.n	800ba84 <memmove+0x12>
 800ba92:	4402      	add	r2, r0
 800ba94:	4601      	mov	r1, r0
 800ba96:	428a      	cmp	r2, r1
 800ba98:	d100      	bne.n	800ba9c <memmove+0x2a>
 800ba9a:	bd10      	pop	{r4, pc}
 800ba9c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800baa0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800baa4:	e7f7      	b.n	800ba96 <memmove+0x24>
	...

0800baa8 <_close_r>:
 800baa8:	b538      	push	{r3, r4, r5, lr}
 800baaa:	4d06      	ldr	r5, [pc, #24]	@ (800bac4 <_close_r+0x1c>)
 800baac:	2300      	movs	r3, #0
 800baae:	4604      	mov	r4, r0
 800bab0:	4608      	mov	r0, r1
 800bab2:	602b      	str	r3, [r5, #0]
 800bab4:	f000 fbb6 	bl	800c224 <_close>
 800bab8:	1c43      	adds	r3, r0, #1
 800baba:	d102      	bne.n	800bac2 <_close_r+0x1a>
 800babc:	682b      	ldr	r3, [r5, #0]
 800babe:	b103      	cbz	r3, 800bac2 <_close_r+0x1a>
 800bac0:	6023      	str	r3, [r4, #0]
 800bac2:	bd38      	pop	{r3, r4, r5, pc}
 800bac4:	2001f4b4 	.word	0x2001f4b4

0800bac8 <_lseek_r>:
 800bac8:	b538      	push	{r3, r4, r5, lr}
 800baca:	4d07      	ldr	r5, [pc, #28]	@ (800bae8 <_lseek_r+0x20>)
 800bacc:	4604      	mov	r4, r0
 800bace:	4608      	mov	r0, r1
 800bad0:	4611      	mov	r1, r2
 800bad2:	2200      	movs	r2, #0
 800bad4:	602a      	str	r2, [r5, #0]
 800bad6:	461a      	mov	r2, r3
 800bad8:	f000 fbcc 	bl	800c274 <_lseek>
 800badc:	1c43      	adds	r3, r0, #1
 800bade:	d102      	bne.n	800bae6 <_lseek_r+0x1e>
 800bae0:	682b      	ldr	r3, [r5, #0]
 800bae2:	b103      	cbz	r3, 800bae6 <_lseek_r+0x1e>
 800bae4:	6023      	str	r3, [r4, #0]
 800bae6:	bd38      	pop	{r3, r4, r5, pc}
 800bae8:	2001f4b4 	.word	0x2001f4b4

0800baec <_read_r>:
 800baec:	b538      	push	{r3, r4, r5, lr}
 800baee:	4d07      	ldr	r5, [pc, #28]	@ (800bb0c <_read_r+0x20>)
 800baf0:	4604      	mov	r4, r0
 800baf2:	4608      	mov	r0, r1
 800baf4:	4611      	mov	r1, r2
 800baf6:	2200      	movs	r2, #0
 800baf8:	602a      	str	r2, [r5, #0]
 800bafa:	461a      	mov	r2, r3
 800bafc:	f000 fbc2 	bl	800c284 <_read>
 800bb00:	1c43      	adds	r3, r0, #1
 800bb02:	d102      	bne.n	800bb0a <_read_r+0x1e>
 800bb04:	682b      	ldr	r3, [r5, #0]
 800bb06:	b103      	cbz	r3, 800bb0a <_read_r+0x1e>
 800bb08:	6023      	str	r3, [r4, #0]
 800bb0a:	bd38      	pop	{r3, r4, r5, pc}
 800bb0c:	2001f4b4 	.word	0x2001f4b4

0800bb10 <_sbrk_r>:
 800bb10:	b538      	push	{r3, r4, r5, lr}
 800bb12:	4d06      	ldr	r5, [pc, #24]	@ (800bb2c <_sbrk_r+0x1c>)
 800bb14:	2300      	movs	r3, #0
 800bb16:	4604      	mov	r4, r0
 800bb18:	4608      	mov	r0, r1
 800bb1a:	602b      	str	r3, [r5, #0]
 800bb1c:	f000 fbba 	bl	800c294 <_sbrk>
 800bb20:	1c43      	adds	r3, r0, #1
 800bb22:	d102      	bne.n	800bb2a <_sbrk_r+0x1a>
 800bb24:	682b      	ldr	r3, [r5, #0]
 800bb26:	b103      	cbz	r3, 800bb2a <_sbrk_r+0x1a>
 800bb28:	6023      	str	r3, [r4, #0]
 800bb2a:	bd38      	pop	{r3, r4, r5, pc}
 800bb2c:	2001f4b4 	.word	0x2001f4b4

0800bb30 <_write_r>:
 800bb30:	b538      	push	{r3, r4, r5, lr}
 800bb32:	4d07      	ldr	r5, [pc, #28]	@ (800bb50 <_write_r+0x20>)
 800bb34:	4604      	mov	r4, r0
 800bb36:	4608      	mov	r0, r1
 800bb38:	4611      	mov	r1, r2
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	602a      	str	r2, [r5, #0]
 800bb3e:	461a      	mov	r2, r3
 800bb40:	f000 fbb6 	bl	800c2b0 <_write>
 800bb44:	1c43      	adds	r3, r0, #1
 800bb46:	d102      	bne.n	800bb4e <_write_r+0x1e>
 800bb48:	682b      	ldr	r3, [r5, #0]
 800bb4a:	b103      	cbz	r3, 800bb4e <_write_r+0x1e>
 800bb4c:	6023      	str	r3, [r4, #0]
 800bb4e:	bd38      	pop	{r3, r4, r5, pc}
 800bb50:	2001f4b4 	.word	0x2001f4b4

0800bb54 <memcpy>:
 800bb54:	440a      	add	r2, r1
 800bb56:	4291      	cmp	r1, r2
 800bb58:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800bb5c:	d100      	bne.n	800bb60 <memcpy+0xc>
 800bb5e:	4770      	bx	lr
 800bb60:	b510      	push	{r4, lr}
 800bb62:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb66:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bb6a:	4291      	cmp	r1, r2
 800bb6c:	d1f9      	bne.n	800bb62 <memcpy+0xe>
 800bb6e:	bd10      	pop	{r4, pc}

0800bb70 <__assert_func>:
 800bb70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bb72:	4614      	mov	r4, r2
 800bb74:	461a      	mov	r2, r3
 800bb76:	4b09      	ldr	r3, [pc, #36]	@ (800bb9c <__assert_func+0x2c>)
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	4605      	mov	r5, r0
 800bb7c:	68d8      	ldr	r0, [r3, #12]
 800bb7e:	b954      	cbnz	r4, 800bb96 <__assert_func+0x26>
 800bb80:	4b07      	ldr	r3, [pc, #28]	@ (800bba0 <__assert_func+0x30>)
 800bb82:	461c      	mov	r4, r3
 800bb84:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bb88:	9100      	str	r1, [sp, #0]
 800bb8a:	462b      	mov	r3, r5
 800bb8c:	4905      	ldr	r1, [pc, #20]	@ (800bba4 <__assert_func+0x34>)
 800bb8e:	f000 f885 	bl	800bc9c <fiprintf>
 800bb92:	f000 f8a2 	bl	800bcda <abort>
 800bb96:	4b04      	ldr	r3, [pc, #16]	@ (800bba8 <__assert_func+0x38>)
 800bb98:	e7f4      	b.n	800bb84 <__assert_func+0x14>
 800bb9a:	bf00      	nop
 800bb9c:	20000018 	.word	0x20000018
 800bba0:	0800c7d6 	.word	0x0800c7d6
 800bba4:	0800c7a8 	.word	0x0800c7a8
 800bba8:	0800c79b 	.word	0x0800c79b

0800bbac <_calloc_r>:
 800bbac:	b570      	push	{r4, r5, r6, lr}
 800bbae:	fba1 5402 	umull	r5, r4, r1, r2
 800bbb2:	b93c      	cbnz	r4, 800bbc4 <_calloc_r+0x18>
 800bbb4:	4629      	mov	r1, r5
 800bbb6:	f7ff fa31 	bl	800b01c <_malloc_r>
 800bbba:	4606      	mov	r6, r0
 800bbbc:	b928      	cbnz	r0, 800bbca <_calloc_r+0x1e>
 800bbbe:	2600      	movs	r6, #0
 800bbc0:	4630      	mov	r0, r6
 800bbc2:	bd70      	pop	{r4, r5, r6, pc}
 800bbc4:	220c      	movs	r2, #12
 800bbc6:	6002      	str	r2, [r0, #0]
 800bbc8:	e7f9      	b.n	800bbbe <_calloc_r+0x12>
 800bbca:	462a      	mov	r2, r5
 800bbcc:	4621      	mov	r1, r4
 800bbce:	f7fe fa21 	bl	800a014 <memset>
 800bbd2:	e7f5      	b.n	800bbc0 <_calloc_r+0x14>

0800bbd4 <_free_r>:
 800bbd4:	b538      	push	{r3, r4, r5, lr}
 800bbd6:	4605      	mov	r5, r0
 800bbd8:	2900      	cmp	r1, #0
 800bbda:	d041      	beq.n	800bc60 <_free_r+0x8c>
 800bbdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bbe0:	1f0c      	subs	r4, r1, #4
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	bfb8      	it	lt
 800bbe6:	18e4      	addlt	r4, r4, r3
 800bbe8:	f7ff fb44 	bl	800b274 <__malloc_lock>
 800bbec:	4a1d      	ldr	r2, [pc, #116]	@ (800bc64 <_free_r+0x90>)
 800bbee:	6813      	ldr	r3, [r2, #0]
 800bbf0:	b933      	cbnz	r3, 800bc00 <_free_r+0x2c>
 800bbf2:	6063      	str	r3, [r4, #4]
 800bbf4:	6014      	str	r4, [r2, #0]
 800bbf6:	4628      	mov	r0, r5
 800bbf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bbfc:	f7ff bb40 	b.w	800b280 <__malloc_unlock>
 800bc00:	42a3      	cmp	r3, r4
 800bc02:	d908      	bls.n	800bc16 <_free_r+0x42>
 800bc04:	6820      	ldr	r0, [r4, #0]
 800bc06:	1821      	adds	r1, r4, r0
 800bc08:	428b      	cmp	r3, r1
 800bc0a:	bf01      	itttt	eq
 800bc0c:	6819      	ldreq	r1, [r3, #0]
 800bc0e:	685b      	ldreq	r3, [r3, #4]
 800bc10:	1809      	addeq	r1, r1, r0
 800bc12:	6021      	streq	r1, [r4, #0]
 800bc14:	e7ed      	b.n	800bbf2 <_free_r+0x1e>
 800bc16:	461a      	mov	r2, r3
 800bc18:	685b      	ldr	r3, [r3, #4]
 800bc1a:	b10b      	cbz	r3, 800bc20 <_free_r+0x4c>
 800bc1c:	42a3      	cmp	r3, r4
 800bc1e:	d9fa      	bls.n	800bc16 <_free_r+0x42>
 800bc20:	6811      	ldr	r1, [r2, #0]
 800bc22:	1850      	adds	r0, r2, r1
 800bc24:	42a0      	cmp	r0, r4
 800bc26:	d10b      	bne.n	800bc40 <_free_r+0x6c>
 800bc28:	6820      	ldr	r0, [r4, #0]
 800bc2a:	4401      	add	r1, r0
 800bc2c:	1850      	adds	r0, r2, r1
 800bc2e:	4283      	cmp	r3, r0
 800bc30:	6011      	str	r1, [r2, #0]
 800bc32:	d1e0      	bne.n	800bbf6 <_free_r+0x22>
 800bc34:	6818      	ldr	r0, [r3, #0]
 800bc36:	685b      	ldr	r3, [r3, #4]
 800bc38:	6053      	str	r3, [r2, #4]
 800bc3a:	4408      	add	r0, r1
 800bc3c:	6010      	str	r0, [r2, #0]
 800bc3e:	e7da      	b.n	800bbf6 <_free_r+0x22>
 800bc40:	d902      	bls.n	800bc48 <_free_r+0x74>
 800bc42:	230c      	movs	r3, #12
 800bc44:	602b      	str	r3, [r5, #0]
 800bc46:	e7d6      	b.n	800bbf6 <_free_r+0x22>
 800bc48:	6820      	ldr	r0, [r4, #0]
 800bc4a:	1821      	adds	r1, r4, r0
 800bc4c:	428b      	cmp	r3, r1
 800bc4e:	bf04      	itt	eq
 800bc50:	6819      	ldreq	r1, [r3, #0]
 800bc52:	685b      	ldreq	r3, [r3, #4]
 800bc54:	6063      	str	r3, [r4, #4]
 800bc56:	bf04      	itt	eq
 800bc58:	1809      	addeq	r1, r1, r0
 800bc5a:	6021      	streq	r1, [r4, #0]
 800bc5c:	6054      	str	r4, [r2, #4]
 800bc5e:	e7ca      	b.n	800bbf6 <_free_r+0x22>
 800bc60:	bd38      	pop	{r3, r4, r5, pc}
 800bc62:	bf00      	nop
 800bc64:	2001f4b0 	.word	0x2001f4b0

0800bc68 <__ascii_mbtowc>:
 800bc68:	b082      	sub	sp, #8
 800bc6a:	b901      	cbnz	r1, 800bc6e <__ascii_mbtowc+0x6>
 800bc6c:	a901      	add	r1, sp, #4
 800bc6e:	b142      	cbz	r2, 800bc82 <__ascii_mbtowc+0x1a>
 800bc70:	b14b      	cbz	r3, 800bc86 <__ascii_mbtowc+0x1e>
 800bc72:	7813      	ldrb	r3, [r2, #0]
 800bc74:	600b      	str	r3, [r1, #0]
 800bc76:	7812      	ldrb	r2, [r2, #0]
 800bc78:	1e10      	subs	r0, r2, #0
 800bc7a:	bf18      	it	ne
 800bc7c:	2001      	movne	r0, #1
 800bc7e:	b002      	add	sp, #8
 800bc80:	4770      	bx	lr
 800bc82:	4610      	mov	r0, r2
 800bc84:	e7fb      	b.n	800bc7e <__ascii_mbtowc+0x16>
 800bc86:	f06f 0001 	mvn.w	r0, #1
 800bc8a:	e7f8      	b.n	800bc7e <__ascii_mbtowc+0x16>

0800bc8c <_malloc_usable_size_r>:
 800bc8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc90:	1f18      	subs	r0, r3, #4
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	bfbc      	itt	lt
 800bc96:	580b      	ldrlt	r3, [r1, r0]
 800bc98:	18c0      	addlt	r0, r0, r3
 800bc9a:	4770      	bx	lr

0800bc9c <fiprintf>:
 800bc9c:	b40e      	push	{r1, r2, r3}
 800bc9e:	b503      	push	{r0, r1, lr}
 800bca0:	4601      	mov	r1, r0
 800bca2:	ab03      	add	r3, sp, #12
 800bca4:	4805      	ldr	r0, [pc, #20]	@ (800bcbc <fiprintf+0x20>)
 800bca6:	f853 2b04 	ldr.w	r2, [r3], #4
 800bcaa:	6800      	ldr	r0, [r0, #0]
 800bcac:	9301      	str	r3, [sp, #4]
 800bcae:	f000 f845 	bl	800bd3c <_vfiprintf_r>
 800bcb2:	b002      	add	sp, #8
 800bcb4:	f85d eb04 	ldr.w	lr, [sp], #4
 800bcb8:	b003      	add	sp, #12
 800bcba:	4770      	bx	lr
 800bcbc:	20000018 	.word	0x20000018

0800bcc0 <__ascii_wctomb>:
 800bcc0:	4603      	mov	r3, r0
 800bcc2:	4608      	mov	r0, r1
 800bcc4:	b141      	cbz	r1, 800bcd8 <__ascii_wctomb+0x18>
 800bcc6:	2aff      	cmp	r2, #255	@ 0xff
 800bcc8:	d904      	bls.n	800bcd4 <__ascii_wctomb+0x14>
 800bcca:	228a      	movs	r2, #138	@ 0x8a
 800bccc:	601a      	str	r2, [r3, #0]
 800bcce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bcd2:	4770      	bx	lr
 800bcd4:	700a      	strb	r2, [r1, #0]
 800bcd6:	2001      	movs	r0, #1
 800bcd8:	4770      	bx	lr

0800bcda <abort>:
 800bcda:	b508      	push	{r3, lr}
 800bcdc:	2006      	movs	r0, #6
 800bcde:	f000 fa85 	bl	800c1ec <raise>
 800bce2:	2001      	movs	r0, #1
 800bce4:	f000 faec 	bl	800c2c0 <_exit>

0800bce8 <__sfputc_r>:
 800bce8:	6893      	ldr	r3, [r2, #8]
 800bcea:	3b01      	subs	r3, #1
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	b410      	push	{r4}
 800bcf0:	6093      	str	r3, [r2, #8]
 800bcf2:	da08      	bge.n	800bd06 <__sfputc_r+0x1e>
 800bcf4:	6994      	ldr	r4, [r2, #24]
 800bcf6:	42a3      	cmp	r3, r4
 800bcf8:	db01      	blt.n	800bcfe <__sfputc_r+0x16>
 800bcfa:	290a      	cmp	r1, #10
 800bcfc:	d103      	bne.n	800bd06 <__sfputc_r+0x1e>
 800bcfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd02:	f000 b933 	b.w	800bf6c <__swbuf_r>
 800bd06:	6813      	ldr	r3, [r2, #0]
 800bd08:	1c58      	adds	r0, r3, #1
 800bd0a:	6010      	str	r0, [r2, #0]
 800bd0c:	7019      	strb	r1, [r3, #0]
 800bd0e:	4608      	mov	r0, r1
 800bd10:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd14:	4770      	bx	lr

0800bd16 <__sfputs_r>:
 800bd16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd18:	4606      	mov	r6, r0
 800bd1a:	460f      	mov	r7, r1
 800bd1c:	4614      	mov	r4, r2
 800bd1e:	18d5      	adds	r5, r2, r3
 800bd20:	42ac      	cmp	r4, r5
 800bd22:	d101      	bne.n	800bd28 <__sfputs_r+0x12>
 800bd24:	2000      	movs	r0, #0
 800bd26:	e007      	b.n	800bd38 <__sfputs_r+0x22>
 800bd28:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd2c:	463a      	mov	r2, r7
 800bd2e:	4630      	mov	r0, r6
 800bd30:	f7ff ffda 	bl	800bce8 <__sfputc_r>
 800bd34:	1c43      	adds	r3, r0, #1
 800bd36:	d1f3      	bne.n	800bd20 <__sfputs_r+0xa>
 800bd38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bd3c <_vfiprintf_r>:
 800bd3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd40:	460d      	mov	r5, r1
 800bd42:	b09d      	sub	sp, #116	@ 0x74
 800bd44:	4614      	mov	r4, r2
 800bd46:	4698      	mov	r8, r3
 800bd48:	4606      	mov	r6, r0
 800bd4a:	b118      	cbz	r0, 800bd54 <_vfiprintf_r+0x18>
 800bd4c:	6a03      	ldr	r3, [r0, #32]
 800bd4e:	b90b      	cbnz	r3, 800bd54 <_vfiprintf_r+0x18>
 800bd50:	f7fe f92a 	bl	8009fa8 <__sinit>
 800bd54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bd56:	07d9      	lsls	r1, r3, #31
 800bd58:	d405      	bmi.n	800bd66 <_vfiprintf_r+0x2a>
 800bd5a:	89ab      	ldrh	r3, [r5, #12]
 800bd5c:	059a      	lsls	r2, r3, #22
 800bd5e:	d402      	bmi.n	800bd66 <_vfiprintf_r+0x2a>
 800bd60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bd62:	f7fe f988 	bl	800a076 <__retarget_lock_acquire_recursive>
 800bd66:	89ab      	ldrh	r3, [r5, #12]
 800bd68:	071b      	lsls	r3, r3, #28
 800bd6a:	d501      	bpl.n	800bd70 <_vfiprintf_r+0x34>
 800bd6c:	692b      	ldr	r3, [r5, #16]
 800bd6e:	b99b      	cbnz	r3, 800bd98 <_vfiprintf_r+0x5c>
 800bd70:	4629      	mov	r1, r5
 800bd72:	4630      	mov	r0, r6
 800bd74:	f000 f938 	bl	800bfe8 <__swsetup_r>
 800bd78:	b170      	cbz	r0, 800bd98 <_vfiprintf_r+0x5c>
 800bd7a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bd7c:	07dc      	lsls	r4, r3, #31
 800bd7e:	d504      	bpl.n	800bd8a <_vfiprintf_r+0x4e>
 800bd80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bd84:	b01d      	add	sp, #116	@ 0x74
 800bd86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd8a:	89ab      	ldrh	r3, [r5, #12]
 800bd8c:	0598      	lsls	r0, r3, #22
 800bd8e:	d4f7      	bmi.n	800bd80 <_vfiprintf_r+0x44>
 800bd90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bd92:	f7fe f971 	bl	800a078 <__retarget_lock_release_recursive>
 800bd96:	e7f3      	b.n	800bd80 <_vfiprintf_r+0x44>
 800bd98:	2300      	movs	r3, #0
 800bd9a:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd9c:	2320      	movs	r3, #32
 800bd9e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bda2:	f8cd 800c 	str.w	r8, [sp, #12]
 800bda6:	2330      	movs	r3, #48	@ 0x30
 800bda8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bf58 <_vfiprintf_r+0x21c>
 800bdac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bdb0:	f04f 0901 	mov.w	r9, #1
 800bdb4:	4623      	mov	r3, r4
 800bdb6:	469a      	mov	sl, r3
 800bdb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bdbc:	b10a      	cbz	r2, 800bdc2 <_vfiprintf_r+0x86>
 800bdbe:	2a25      	cmp	r2, #37	@ 0x25
 800bdc0:	d1f9      	bne.n	800bdb6 <_vfiprintf_r+0x7a>
 800bdc2:	ebba 0b04 	subs.w	fp, sl, r4
 800bdc6:	d00b      	beq.n	800bde0 <_vfiprintf_r+0xa4>
 800bdc8:	465b      	mov	r3, fp
 800bdca:	4622      	mov	r2, r4
 800bdcc:	4629      	mov	r1, r5
 800bdce:	4630      	mov	r0, r6
 800bdd0:	f7ff ffa1 	bl	800bd16 <__sfputs_r>
 800bdd4:	3001      	adds	r0, #1
 800bdd6:	f000 80a7 	beq.w	800bf28 <_vfiprintf_r+0x1ec>
 800bdda:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bddc:	445a      	add	r2, fp
 800bdde:	9209      	str	r2, [sp, #36]	@ 0x24
 800bde0:	f89a 3000 	ldrb.w	r3, [sl]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	f000 809f 	beq.w	800bf28 <_vfiprintf_r+0x1ec>
 800bdea:	2300      	movs	r3, #0
 800bdec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bdf0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bdf4:	f10a 0a01 	add.w	sl, sl, #1
 800bdf8:	9304      	str	r3, [sp, #16]
 800bdfa:	9307      	str	r3, [sp, #28]
 800bdfc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800be00:	931a      	str	r3, [sp, #104]	@ 0x68
 800be02:	4654      	mov	r4, sl
 800be04:	2205      	movs	r2, #5
 800be06:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be0a:	4853      	ldr	r0, [pc, #332]	@ (800bf58 <_vfiprintf_r+0x21c>)
 800be0c:	f7f4 fa00 	bl	8000210 <memchr>
 800be10:	9a04      	ldr	r2, [sp, #16]
 800be12:	b9d8      	cbnz	r0, 800be4c <_vfiprintf_r+0x110>
 800be14:	06d1      	lsls	r1, r2, #27
 800be16:	bf44      	itt	mi
 800be18:	2320      	movmi	r3, #32
 800be1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800be1e:	0713      	lsls	r3, r2, #28
 800be20:	bf44      	itt	mi
 800be22:	232b      	movmi	r3, #43	@ 0x2b
 800be24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800be28:	f89a 3000 	ldrb.w	r3, [sl]
 800be2c:	2b2a      	cmp	r3, #42	@ 0x2a
 800be2e:	d015      	beq.n	800be5c <_vfiprintf_r+0x120>
 800be30:	9a07      	ldr	r2, [sp, #28]
 800be32:	4654      	mov	r4, sl
 800be34:	2000      	movs	r0, #0
 800be36:	f04f 0c0a 	mov.w	ip, #10
 800be3a:	4621      	mov	r1, r4
 800be3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be40:	3b30      	subs	r3, #48	@ 0x30
 800be42:	2b09      	cmp	r3, #9
 800be44:	d94b      	bls.n	800bede <_vfiprintf_r+0x1a2>
 800be46:	b1b0      	cbz	r0, 800be76 <_vfiprintf_r+0x13a>
 800be48:	9207      	str	r2, [sp, #28]
 800be4a:	e014      	b.n	800be76 <_vfiprintf_r+0x13a>
 800be4c:	eba0 0308 	sub.w	r3, r0, r8
 800be50:	fa09 f303 	lsl.w	r3, r9, r3
 800be54:	4313      	orrs	r3, r2
 800be56:	9304      	str	r3, [sp, #16]
 800be58:	46a2      	mov	sl, r4
 800be5a:	e7d2      	b.n	800be02 <_vfiprintf_r+0xc6>
 800be5c:	9b03      	ldr	r3, [sp, #12]
 800be5e:	1d19      	adds	r1, r3, #4
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	9103      	str	r1, [sp, #12]
 800be64:	2b00      	cmp	r3, #0
 800be66:	bfbb      	ittet	lt
 800be68:	425b      	neglt	r3, r3
 800be6a:	f042 0202 	orrlt.w	r2, r2, #2
 800be6e:	9307      	strge	r3, [sp, #28]
 800be70:	9307      	strlt	r3, [sp, #28]
 800be72:	bfb8      	it	lt
 800be74:	9204      	strlt	r2, [sp, #16]
 800be76:	7823      	ldrb	r3, [r4, #0]
 800be78:	2b2e      	cmp	r3, #46	@ 0x2e
 800be7a:	d10a      	bne.n	800be92 <_vfiprintf_r+0x156>
 800be7c:	7863      	ldrb	r3, [r4, #1]
 800be7e:	2b2a      	cmp	r3, #42	@ 0x2a
 800be80:	d132      	bne.n	800bee8 <_vfiprintf_r+0x1ac>
 800be82:	9b03      	ldr	r3, [sp, #12]
 800be84:	1d1a      	adds	r2, r3, #4
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	9203      	str	r2, [sp, #12]
 800be8a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800be8e:	3402      	adds	r4, #2
 800be90:	9305      	str	r3, [sp, #20]
 800be92:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bf68 <_vfiprintf_r+0x22c>
 800be96:	7821      	ldrb	r1, [r4, #0]
 800be98:	2203      	movs	r2, #3
 800be9a:	4650      	mov	r0, sl
 800be9c:	f7f4 f9b8 	bl	8000210 <memchr>
 800bea0:	b138      	cbz	r0, 800beb2 <_vfiprintf_r+0x176>
 800bea2:	9b04      	ldr	r3, [sp, #16]
 800bea4:	eba0 000a 	sub.w	r0, r0, sl
 800bea8:	2240      	movs	r2, #64	@ 0x40
 800beaa:	4082      	lsls	r2, r0
 800beac:	4313      	orrs	r3, r2
 800beae:	3401      	adds	r4, #1
 800beb0:	9304      	str	r3, [sp, #16]
 800beb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800beb6:	4829      	ldr	r0, [pc, #164]	@ (800bf5c <_vfiprintf_r+0x220>)
 800beb8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bebc:	2206      	movs	r2, #6
 800bebe:	f7f4 f9a7 	bl	8000210 <memchr>
 800bec2:	2800      	cmp	r0, #0
 800bec4:	d03f      	beq.n	800bf46 <_vfiprintf_r+0x20a>
 800bec6:	4b26      	ldr	r3, [pc, #152]	@ (800bf60 <_vfiprintf_r+0x224>)
 800bec8:	bb1b      	cbnz	r3, 800bf12 <_vfiprintf_r+0x1d6>
 800beca:	9b03      	ldr	r3, [sp, #12]
 800becc:	3307      	adds	r3, #7
 800bece:	f023 0307 	bic.w	r3, r3, #7
 800bed2:	3308      	adds	r3, #8
 800bed4:	9303      	str	r3, [sp, #12]
 800bed6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bed8:	443b      	add	r3, r7
 800beda:	9309      	str	r3, [sp, #36]	@ 0x24
 800bedc:	e76a      	b.n	800bdb4 <_vfiprintf_r+0x78>
 800bede:	fb0c 3202 	mla	r2, ip, r2, r3
 800bee2:	460c      	mov	r4, r1
 800bee4:	2001      	movs	r0, #1
 800bee6:	e7a8      	b.n	800be3a <_vfiprintf_r+0xfe>
 800bee8:	2300      	movs	r3, #0
 800beea:	3401      	adds	r4, #1
 800beec:	9305      	str	r3, [sp, #20]
 800beee:	4619      	mov	r1, r3
 800bef0:	f04f 0c0a 	mov.w	ip, #10
 800bef4:	4620      	mov	r0, r4
 800bef6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800befa:	3a30      	subs	r2, #48	@ 0x30
 800befc:	2a09      	cmp	r2, #9
 800befe:	d903      	bls.n	800bf08 <_vfiprintf_r+0x1cc>
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d0c6      	beq.n	800be92 <_vfiprintf_r+0x156>
 800bf04:	9105      	str	r1, [sp, #20]
 800bf06:	e7c4      	b.n	800be92 <_vfiprintf_r+0x156>
 800bf08:	fb0c 2101 	mla	r1, ip, r1, r2
 800bf0c:	4604      	mov	r4, r0
 800bf0e:	2301      	movs	r3, #1
 800bf10:	e7f0      	b.n	800bef4 <_vfiprintf_r+0x1b8>
 800bf12:	ab03      	add	r3, sp, #12
 800bf14:	9300      	str	r3, [sp, #0]
 800bf16:	462a      	mov	r2, r5
 800bf18:	4b12      	ldr	r3, [pc, #72]	@ (800bf64 <_vfiprintf_r+0x228>)
 800bf1a:	a904      	add	r1, sp, #16
 800bf1c:	4630      	mov	r0, r6
 800bf1e:	f7fd fbdf 	bl	80096e0 <_printf_float>
 800bf22:	4607      	mov	r7, r0
 800bf24:	1c78      	adds	r0, r7, #1
 800bf26:	d1d6      	bne.n	800bed6 <_vfiprintf_r+0x19a>
 800bf28:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bf2a:	07d9      	lsls	r1, r3, #31
 800bf2c:	d405      	bmi.n	800bf3a <_vfiprintf_r+0x1fe>
 800bf2e:	89ab      	ldrh	r3, [r5, #12]
 800bf30:	059a      	lsls	r2, r3, #22
 800bf32:	d402      	bmi.n	800bf3a <_vfiprintf_r+0x1fe>
 800bf34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bf36:	f7fe f89f 	bl	800a078 <__retarget_lock_release_recursive>
 800bf3a:	89ab      	ldrh	r3, [r5, #12]
 800bf3c:	065b      	lsls	r3, r3, #25
 800bf3e:	f53f af1f 	bmi.w	800bd80 <_vfiprintf_r+0x44>
 800bf42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bf44:	e71e      	b.n	800bd84 <_vfiprintf_r+0x48>
 800bf46:	ab03      	add	r3, sp, #12
 800bf48:	9300      	str	r3, [sp, #0]
 800bf4a:	462a      	mov	r2, r5
 800bf4c:	4b05      	ldr	r3, [pc, #20]	@ (800bf64 <_vfiprintf_r+0x228>)
 800bf4e:	a904      	add	r1, sp, #16
 800bf50:	4630      	mov	r0, r6
 800bf52:	f7fd fe5d 	bl	8009c10 <_printf_i>
 800bf56:	e7e4      	b.n	800bf22 <_vfiprintf_r+0x1e6>
 800bf58:	0800c529 	.word	0x0800c529
 800bf5c:	0800c533 	.word	0x0800c533
 800bf60:	080096e1 	.word	0x080096e1
 800bf64:	0800bd17 	.word	0x0800bd17
 800bf68:	0800c52f 	.word	0x0800c52f

0800bf6c <__swbuf_r>:
 800bf6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf6e:	460e      	mov	r6, r1
 800bf70:	4614      	mov	r4, r2
 800bf72:	4605      	mov	r5, r0
 800bf74:	b118      	cbz	r0, 800bf7e <__swbuf_r+0x12>
 800bf76:	6a03      	ldr	r3, [r0, #32]
 800bf78:	b90b      	cbnz	r3, 800bf7e <__swbuf_r+0x12>
 800bf7a:	f7fe f815 	bl	8009fa8 <__sinit>
 800bf7e:	69a3      	ldr	r3, [r4, #24]
 800bf80:	60a3      	str	r3, [r4, #8]
 800bf82:	89a3      	ldrh	r3, [r4, #12]
 800bf84:	071a      	lsls	r2, r3, #28
 800bf86:	d501      	bpl.n	800bf8c <__swbuf_r+0x20>
 800bf88:	6923      	ldr	r3, [r4, #16]
 800bf8a:	b943      	cbnz	r3, 800bf9e <__swbuf_r+0x32>
 800bf8c:	4621      	mov	r1, r4
 800bf8e:	4628      	mov	r0, r5
 800bf90:	f000 f82a 	bl	800bfe8 <__swsetup_r>
 800bf94:	b118      	cbz	r0, 800bf9e <__swbuf_r+0x32>
 800bf96:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800bf9a:	4638      	mov	r0, r7
 800bf9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf9e:	6823      	ldr	r3, [r4, #0]
 800bfa0:	6922      	ldr	r2, [r4, #16]
 800bfa2:	1a98      	subs	r0, r3, r2
 800bfa4:	6963      	ldr	r3, [r4, #20]
 800bfa6:	b2f6      	uxtb	r6, r6
 800bfa8:	4283      	cmp	r3, r0
 800bfaa:	4637      	mov	r7, r6
 800bfac:	dc05      	bgt.n	800bfba <__swbuf_r+0x4e>
 800bfae:	4621      	mov	r1, r4
 800bfb0:	4628      	mov	r0, r5
 800bfb2:	f7ff f937 	bl	800b224 <_fflush_r>
 800bfb6:	2800      	cmp	r0, #0
 800bfb8:	d1ed      	bne.n	800bf96 <__swbuf_r+0x2a>
 800bfba:	68a3      	ldr	r3, [r4, #8]
 800bfbc:	3b01      	subs	r3, #1
 800bfbe:	60a3      	str	r3, [r4, #8]
 800bfc0:	6823      	ldr	r3, [r4, #0]
 800bfc2:	1c5a      	adds	r2, r3, #1
 800bfc4:	6022      	str	r2, [r4, #0]
 800bfc6:	701e      	strb	r6, [r3, #0]
 800bfc8:	6962      	ldr	r2, [r4, #20]
 800bfca:	1c43      	adds	r3, r0, #1
 800bfcc:	429a      	cmp	r2, r3
 800bfce:	d004      	beq.n	800bfda <__swbuf_r+0x6e>
 800bfd0:	89a3      	ldrh	r3, [r4, #12]
 800bfd2:	07db      	lsls	r3, r3, #31
 800bfd4:	d5e1      	bpl.n	800bf9a <__swbuf_r+0x2e>
 800bfd6:	2e0a      	cmp	r6, #10
 800bfd8:	d1df      	bne.n	800bf9a <__swbuf_r+0x2e>
 800bfda:	4621      	mov	r1, r4
 800bfdc:	4628      	mov	r0, r5
 800bfde:	f7ff f921 	bl	800b224 <_fflush_r>
 800bfe2:	2800      	cmp	r0, #0
 800bfe4:	d0d9      	beq.n	800bf9a <__swbuf_r+0x2e>
 800bfe6:	e7d6      	b.n	800bf96 <__swbuf_r+0x2a>

0800bfe8 <__swsetup_r>:
 800bfe8:	b538      	push	{r3, r4, r5, lr}
 800bfea:	4b29      	ldr	r3, [pc, #164]	@ (800c090 <__swsetup_r+0xa8>)
 800bfec:	4605      	mov	r5, r0
 800bfee:	6818      	ldr	r0, [r3, #0]
 800bff0:	460c      	mov	r4, r1
 800bff2:	b118      	cbz	r0, 800bffc <__swsetup_r+0x14>
 800bff4:	6a03      	ldr	r3, [r0, #32]
 800bff6:	b90b      	cbnz	r3, 800bffc <__swsetup_r+0x14>
 800bff8:	f7fd ffd6 	bl	8009fa8 <__sinit>
 800bffc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c000:	0719      	lsls	r1, r3, #28
 800c002:	d422      	bmi.n	800c04a <__swsetup_r+0x62>
 800c004:	06da      	lsls	r2, r3, #27
 800c006:	d407      	bmi.n	800c018 <__swsetup_r+0x30>
 800c008:	2209      	movs	r2, #9
 800c00a:	602a      	str	r2, [r5, #0]
 800c00c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c010:	81a3      	strh	r3, [r4, #12]
 800c012:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c016:	e033      	b.n	800c080 <__swsetup_r+0x98>
 800c018:	0758      	lsls	r0, r3, #29
 800c01a:	d512      	bpl.n	800c042 <__swsetup_r+0x5a>
 800c01c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c01e:	b141      	cbz	r1, 800c032 <__swsetup_r+0x4a>
 800c020:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c024:	4299      	cmp	r1, r3
 800c026:	d002      	beq.n	800c02e <__swsetup_r+0x46>
 800c028:	4628      	mov	r0, r5
 800c02a:	f7ff fdd3 	bl	800bbd4 <_free_r>
 800c02e:	2300      	movs	r3, #0
 800c030:	6363      	str	r3, [r4, #52]	@ 0x34
 800c032:	89a3      	ldrh	r3, [r4, #12]
 800c034:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c038:	81a3      	strh	r3, [r4, #12]
 800c03a:	2300      	movs	r3, #0
 800c03c:	6063      	str	r3, [r4, #4]
 800c03e:	6923      	ldr	r3, [r4, #16]
 800c040:	6023      	str	r3, [r4, #0]
 800c042:	89a3      	ldrh	r3, [r4, #12]
 800c044:	f043 0308 	orr.w	r3, r3, #8
 800c048:	81a3      	strh	r3, [r4, #12]
 800c04a:	6923      	ldr	r3, [r4, #16]
 800c04c:	b94b      	cbnz	r3, 800c062 <__swsetup_r+0x7a>
 800c04e:	89a3      	ldrh	r3, [r4, #12]
 800c050:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c054:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c058:	d003      	beq.n	800c062 <__swsetup_r+0x7a>
 800c05a:	4621      	mov	r1, r4
 800c05c:	4628      	mov	r0, r5
 800c05e:	f000 f83f 	bl	800c0e0 <__smakebuf_r>
 800c062:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c066:	f013 0201 	ands.w	r2, r3, #1
 800c06a:	d00a      	beq.n	800c082 <__swsetup_r+0x9a>
 800c06c:	2200      	movs	r2, #0
 800c06e:	60a2      	str	r2, [r4, #8]
 800c070:	6962      	ldr	r2, [r4, #20]
 800c072:	4252      	negs	r2, r2
 800c074:	61a2      	str	r2, [r4, #24]
 800c076:	6922      	ldr	r2, [r4, #16]
 800c078:	b942      	cbnz	r2, 800c08c <__swsetup_r+0xa4>
 800c07a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c07e:	d1c5      	bne.n	800c00c <__swsetup_r+0x24>
 800c080:	bd38      	pop	{r3, r4, r5, pc}
 800c082:	0799      	lsls	r1, r3, #30
 800c084:	bf58      	it	pl
 800c086:	6962      	ldrpl	r2, [r4, #20]
 800c088:	60a2      	str	r2, [r4, #8]
 800c08a:	e7f4      	b.n	800c076 <__swsetup_r+0x8e>
 800c08c:	2000      	movs	r0, #0
 800c08e:	e7f7      	b.n	800c080 <__swsetup_r+0x98>
 800c090:	20000018 	.word	0x20000018

0800c094 <__swhatbuf_r>:
 800c094:	b570      	push	{r4, r5, r6, lr}
 800c096:	460c      	mov	r4, r1
 800c098:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c09c:	2900      	cmp	r1, #0
 800c09e:	b096      	sub	sp, #88	@ 0x58
 800c0a0:	4615      	mov	r5, r2
 800c0a2:	461e      	mov	r6, r3
 800c0a4:	da0d      	bge.n	800c0c2 <__swhatbuf_r+0x2e>
 800c0a6:	89a3      	ldrh	r3, [r4, #12]
 800c0a8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c0ac:	f04f 0100 	mov.w	r1, #0
 800c0b0:	bf14      	ite	ne
 800c0b2:	2340      	movne	r3, #64	@ 0x40
 800c0b4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c0b8:	2000      	movs	r0, #0
 800c0ba:	6031      	str	r1, [r6, #0]
 800c0bc:	602b      	str	r3, [r5, #0]
 800c0be:	b016      	add	sp, #88	@ 0x58
 800c0c0:	bd70      	pop	{r4, r5, r6, pc}
 800c0c2:	466a      	mov	r2, sp
 800c0c4:	f000 f848 	bl	800c158 <_fstat_r>
 800c0c8:	2800      	cmp	r0, #0
 800c0ca:	dbec      	blt.n	800c0a6 <__swhatbuf_r+0x12>
 800c0cc:	9901      	ldr	r1, [sp, #4]
 800c0ce:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c0d2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c0d6:	4259      	negs	r1, r3
 800c0d8:	4159      	adcs	r1, r3
 800c0da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c0de:	e7eb      	b.n	800c0b8 <__swhatbuf_r+0x24>

0800c0e0 <__smakebuf_r>:
 800c0e0:	898b      	ldrh	r3, [r1, #12]
 800c0e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c0e4:	079d      	lsls	r5, r3, #30
 800c0e6:	4606      	mov	r6, r0
 800c0e8:	460c      	mov	r4, r1
 800c0ea:	d507      	bpl.n	800c0fc <__smakebuf_r+0x1c>
 800c0ec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c0f0:	6023      	str	r3, [r4, #0]
 800c0f2:	6123      	str	r3, [r4, #16]
 800c0f4:	2301      	movs	r3, #1
 800c0f6:	6163      	str	r3, [r4, #20]
 800c0f8:	b003      	add	sp, #12
 800c0fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c0fc:	ab01      	add	r3, sp, #4
 800c0fe:	466a      	mov	r2, sp
 800c100:	f7ff ffc8 	bl	800c094 <__swhatbuf_r>
 800c104:	9f00      	ldr	r7, [sp, #0]
 800c106:	4605      	mov	r5, r0
 800c108:	4639      	mov	r1, r7
 800c10a:	4630      	mov	r0, r6
 800c10c:	f7fe ff86 	bl	800b01c <_malloc_r>
 800c110:	b948      	cbnz	r0, 800c126 <__smakebuf_r+0x46>
 800c112:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c116:	059a      	lsls	r2, r3, #22
 800c118:	d4ee      	bmi.n	800c0f8 <__smakebuf_r+0x18>
 800c11a:	f023 0303 	bic.w	r3, r3, #3
 800c11e:	f043 0302 	orr.w	r3, r3, #2
 800c122:	81a3      	strh	r3, [r4, #12]
 800c124:	e7e2      	b.n	800c0ec <__smakebuf_r+0xc>
 800c126:	89a3      	ldrh	r3, [r4, #12]
 800c128:	6020      	str	r0, [r4, #0]
 800c12a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c12e:	81a3      	strh	r3, [r4, #12]
 800c130:	9b01      	ldr	r3, [sp, #4]
 800c132:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c136:	b15b      	cbz	r3, 800c150 <__smakebuf_r+0x70>
 800c138:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c13c:	4630      	mov	r0, r6
 800c13e:	f000 f81d 	bl	800c17c <_isatty_r>
 800c142:	b128      	cbz	r0, 800c150 <__smakebuf_r+0x70>
 800c144:	89a3      	ldrh	r3, [r4, #12]
 800c146:	f023 0303 	bic.w	r3, r3, #3
 800c14a:	f043 0301 	orr.w	r3, r3, #1
 800c14e:	81a3      	strh	r3, [r4, #12]
 800c150:	89a3      	ldrh	r3, [r4, #12]
 800c152:	431d      	orrs	r5, r3
 800c154:	81a5      	strh	r5, [r4, #12]
 800c156:	e7cf      	b.n	800c0f8 <__smakebuf_r+0x18>

0800c158 <_fstat_r>:
 800c158:	b538      	push	{r3, r4, r5, lr}
 800c15a:	4d07      	ldr	r5, [pc, #28]	@ (800c178 <_fstat_r+0x20>)
 800c15c:	2300      	movs	r3, #0
 800c15e:	4604      	mov	r4, r0
 800c160:	4608      	mov	r0, r1
 800c162:	4611      	mov	r1, r2
 800c164:	602b      	str	r3, [r5, #0]
 800c166:	f000 f865 	bl	800c234 <_fstat>
 800c16a:	1c43      	adds	r3, r0, #1
 800c16c:	d102      	bne.n	800c174 <_fstat_r+0x1c>
 800c16e:	682b      	ldr	r3, [r5, #0]
 800c170:	b103      	cbz	r3, 800c174 <_fstat_r+0x1c>
 800c172:	6023      	str	r3, [r4, #0]
 800c174:	bd38      	pop	{r3, r4, r5, pc}
 800c176:	bf00      	nop
 800c178:	2001f4b4 	.word	0x2001f4b4

0800c17c <_isatty_r>:
 800c17c:	b538      	push	{r3, r4, r5, lr}
 800c17e:	4d06      	ldr	r5, [pc, #24]	@ (800c198 <_isatty_r+0x1c>)
 800c180:	2300      	movs	r3, #0
 800c182:	4604      	mov	r4, r0
 800c184:	4608      	mov	r0, r1
 800c186:	602b      	str	r3, [r5, #0]
 800c188:	f000 f864 	bl	800c254 <_isatty>
 800c18c:	1c43      	adds	r3, r0, #1
 800c18e:	d102      	bne.n	800c196 <_isatty_r+0x1a>
 800c190:	682b      	ldr	r3, [r5, #0]
 800c192:	b103      	cbz	r3, 800c196 <_isatty_r+0x1a>
 800c194:	6023      	str	r3, [r4, #0]
 800c196:	bd38      	pop	{r3, r4, r5, pc}
 800c198:	2001f4b4 	.word	0x2001f4b4

0800c19c <_raise_r>:
 800c19c:	291f      	cmp	r1, #31
 800c19e:	b538      	push	{r3, r4, r5, lr}
 800c1a0:	4605      	mov	r5, r0
 800c1a2:	460c      	mov	r4, r1
 800c1a4:	d904      	bls.n	800c1b0 <_raise_r+0x14>
 800c1a6:	2316      	movs	r3, #22
 800c1a8:	6003      	str	r3, [r0, #0]
 800c1aa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c1ae:	bd38      	pop	{r3, r4, r5, pc}
 800c1b0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c1b2:	b112      	cbz	r2, 800c1ba <_raise_r+0x1e>
 800c1b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c1b8:	b94b      	cbnz	r3, 800c1ce <_raise_r+0x32>
 800c1ba:	4628      	mov	r0, r5
 800c1bc:	f000 f830 	bl	800c220 <_getpid_r>
 800c1c0:	4622      	mov	r2, r4
 800c1c2:	4601      	mov	r1, r0
 800c1c4:	4628      	mov	r0, r5
 800c1c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c1ca:	f000 b817 	b.w	800c1fc <_kill_r>
 800c1ce:	2b01      	cmp	r3, #1
 800c1d0:	d00a      	beq.n	800c1e8 <_raise_r+0x4c>
 800c1d2:	1c59      	adds	r1, r3, #1
 800c1d4:	d103      	bne.n	800c1de <_raise_r+0x42>
 800c1d6:	2316      	movs	r3, #22
 800c1d8:	6003      	str	r3, [r0, #0]
 800c1da:	2001      	movs	r0, #1
 800c1dc:	e7e7      	b.n	800c1ae <_raise_r+0x12>
 800c1de:	2100      	movs	r1, #0
 800c1e0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c1e4:	4620      	mov	r0, r4
 800c1e6:	4798      	blx	r3
 800c1e8:	2000      	movs	r0, #0
 800c1ea:	e7e0      	b.n	800c1ae <_raise_r+0x12>

0800c1ec <raise>:
 800c1ec:	4b02      	ldr	r3, [pc, #8]	@ (800c1f8 <raise+0xc>)
 800c1ee:	4601      	mov	r1, r0
 800c1f0:	6818      	ldr	r0, [r3, #0]
 800c1f2:	f7ff bfd3 	b.w	800c19c <_raise_r>
 800c1f6:	bf00      	nop
 800c1f8:	20000018 	.word	0x20000018

0800c1fc <_kill_r>:
 800c1fc:	b538      	push	{r3, r4, r5, lr}
 800c1fe:	4d07      	ldr	r5, [pc, #28]	@ (800c21c <_kill_r+0x20>)
 800c200:	2300      	movs	r3, #0
 800c202:	4604      	mov	r4, r0
 800c204:	4608      	mov	r0, r1
 800c206:	4611      	mov	r1, r2
 800c208:	602b      	str	r3, [r5, #0]
 800c20a:	f000 f82b 	bl	800c264 <_kill>
 800c20e:	1c43      	adds	r3, r0, #1
 800c210:	d102      	bne.n	800c218 <_kill_r+0x1c>
 800c212:	682b      	ldr	r3, [r5, #0]
 800c214:	b103      	cbz	r3, 800c218 <_kill_r+0x1c>
 800c216:	6023      	str	r3, [r4, #0]
 800c218:	bd38      	pop	{r3, r4, r5, pc}
 800c21a:	bf00      	nop
 800c21c:	2001f4b4 	.word	0x2001f4b4

0800c220 <_getpid_r>:
 800c220:	f000 b810 	b.w	800c244 <_getpid>

0800c224 <_close>:
 800c224:	4b02      	ldr	r3, [pc, #8]	@ (800c230 <_close+0xc>)
 800c226:	2258      	movs	r2, #88	@ 0x58
 800c228:	601a      	str	r2, [r3, #0]
 800c22a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c22e:	4770      	bx	lr
 800c230:	2001f4b4 	.word	0x2001f4b4

0800c234 <_fstat>:
 800c234:	4b02      	ldr	r3, [pc, #8]	@ (800c240 <_fstat+0xc>)
 800c236:	2258      	movs	r2, #88	@ 0x58
 800c238:	601a      	str	r2, [r3, #0]
 800c23a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c23e:	4770      	bx	lr
 800c240:	2001f4b4 	.word	0x2001f4b4

0800c244 <_getpid>:
 800c244:	4b02      	ldr	r3, [pc, #8]	@ (800c250 <_getpid+0xc>)
 800c246:	2258      	movs	r2, #88	@ 0x58
 800c248:	601a      	str	r2, [r3, #0]
 800c24a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c24e:	4770      	bx	lr
 800c250:	2001f4b4 	.word	0x2001f4b4

0800c254 <_isatty>:
 800c254:	4b02      	ldr	r3, [pc, #8]	@ (800c260 <_isatty+0xc>)
 800c256:	2258      	movs	r2, #88	@ 0x58
 800c258:	601a      	str	r2, [r3, #0]
 800c25a:	2000      	movs	r0, #0
 800c25c:	4770      	bx	lr
 800c25e:	bf00      	nop
 800c260:	2001f4b4 	.word	0x2001f4b4

0800c264 <_kill>:
 800c264:	4b02      	ldr	r3, [pc, #8]	@ (800c270 <_kill+0xc>)
 800c266:	2258      	movs	r2, #88	@ 0x58
 800c268:	601a      	str	r2, [r3, #0]
 800c26a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c26e:	4770      	bx	lr
 800c270:	2001f4b4 	.word	0x2001f4b4

0800c274 <_lseek>:
 800c274:	4b02      	ldr	r3, [pc, #8]	@ (800c280 <_lseek+0xc>)
 800c276:	2258      	movs	r2, #88	@ 0x58
 800c278:	601a      	str	r2, [r3, #0]
 800c27a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c27e:	4770      	bx	lr
 800c280:	2001f4b4 	.word	0x2001f4b4

0800c284 <_read>:
 800c284:	4b02      	ldr	r3, [pc, #8]	@ (800c290 <_read+0xc>)
 800c286:	2258      	movs	r2, #88	@ 0x58
 800c288:	601a      	str	r2, [r3, #0]
 800c28a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c28e:	4770      	bx	lr
 800c290:	2001f4b4 	.word	0x2001f4b4

0800c294 <_sbrk>:
 800c294:	4a04      	ldr	r2, [pc, #16]	@ (800c2a8 <_sbrk+0x14>)
 800c296:	6811      	ldr	r1, [r2, #0]
 800c298:	4603      	mov	r3, r0
 800c29a:	b909      	cbnz	r1, 800c2a0 <_sbrk+0xc>
 800c29c:	4903      	ldr	r1, [pc, #12]	@ (800c2ac <_sbrk+0x18>)
 800c29e:	6011      	str	r1, [r2, #0]
 800c2a0:	6810      	ldr	r0, [r2, #0]
 800c2a2:	4403      	add	r3, r0
 800c2a4:	6013      	str	r3, [r2, #0]
 800c2a6:	4770      	bx	lr
 800c2a8:	2001f4b8 	.word	0x2001f4b8
 800c2ac:	2001f4c0 	.word	0x2001f4c0

0800c2b0 <_write>:
 800c2b0:	4b02      	ldr	r3, [pc, #8]	@ (800c2bc <_write+0xc>)
 800c2b2:	2258      	movs	r2, #88	@ 0x58
 800c2b4:	601a      	str	r2, [r3, #0]
 800c2b6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c2ba:	4770      	bx	lr
 800c2bc:	2001f4b4 	.word	0x2001f4b4

0800c2c0 <_exit>:
 800c2c0:	e7fe      	b.n	800c2c0 <_exit>
	...

0800c2c4 <_init>:
 800c2c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2c6:	bf00      	nop
 800c2c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2ca:	bc08      	pop	{r3}
 800c2cc:	469e      	mov	lr, r3
 800c2ce:	4770      	bx	lr

0800c2d0 <_fini>:
 800c2d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2d2:	bf00      	nop
 800c2d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2d6:	bc08      	pop	{r3}
 800c2d8:	469e      	mov	lr, r3
 800c2da:	4770      	bx	lr
